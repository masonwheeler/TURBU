Boo Compiler version 0.9.7.0 (CLR 4.0.30319.42000)
import System.Reflection
import System.Runtime.InteropServices

[assembly: System.Reflection.AssemblyTitleAttribute('TURBU.RM2K.Import.LCF')]
[assembly: System.Reflection.AssemblyDescriptionAttribute('LCF library reader and writer')]
[assembly: System.Reflection.AssemblyConfigurationAttribute('')]
[assembly: System.Reflection.AssemblyCompanyAttribute('')]
[assembly: System.Reflection.AssemblyProductAttribute('TURBU.RM2K.Import.LCF')]
[assembly: System.Reflection.AssemblyCopyrightAttribute('Copyright 2015')]
[assembly: System.Reflection.AssemblyTrademarkAttribute('')]
[assembly: System.Reflection.AssemblyCultureAttribute('')]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Reflection.AssemblyVersionAttribute('1.0.*')]
namespace TURBU.RM2K.Import.LCF

import System
import System.IO
import System.Linq.Enumerable
import System.Text
import TURBU.Meta
import TURBU.RM2K.Import.LCF

class LCFInt(object):

	private final _value as int

	def constructor(input as Stream):
		length = input.ReadByte()
		if length == 0:
			_value = 0
		elif length == 1:
			_value = input.ReadByte()
		else:
			_value = BERInt(input)

	def constructor(value as int):
		_value = value

	public static def op_Implicit(l as LCFInt) as int:
		return l._value

	public override def ToString():
		return _value.ToString()

class LCFWord(object, TURBU.RM2K.Import.LCF.ILCFObject):

	private final _value as int

	private static _is2k3 as bool

	def constructor(input as Stream):
		if _is2k3:
			bytes = array(byte, 2)
			input.Read(bytes, 0, 2)
			_value = BitConverter.ToInt16(bytes, 0)
		else:
			_value = LCFInt(input)

	def Save(output as Stream):
		if _is2k3:
			bytes = BitConverter.GetBytes((_value cast short))
			output.Write(bytes, 0, 2)
		else:
			WriteBERInt(output, _value)

	def constructor(value as int):
		_value = value

	public static def op_Implicit(l as LCFWord) as int:
		return l._value

	public override def ToString():
		return _value.ToString()

	public static Is2k3 as bool:
		get:
			return _is2k3
		set:
			LCFWord._is2k3 = value

class LCFString(object):

	private final _value as string

	def constructor(input as Stream):
		_value = ReadLCFString(input)

	def constructor(value as string):
		_value = value

	public static def op_Implicit(l as LCFString) as string:
		return l._value

	public override def ToString():
		return _value.ToString()

class LCFBool(object):

	private final _value as bool

	def constructor(input as Stream):
		length = input.ReadByte()
		unless length == 1:
			raise Boo.Lang.Runtime.AssertionFailedException('length == 1')
		_value = (input.ReadByte() != 0)

	def constructor(value as bool):
		_value = value

	public static def op_Implicit(l as LCFBool) as bool:
		return l._value

	public override def ToString():
		return _value.ToString()

class LCFByteArray(object):

	private final _value as (byte)

	def constructor(input as Stream):
		length = BERInt(input)
		_value = array(byte, length)
		input.Read(_value, 0, length)

	def Save(output as Stream):
		WriteBERInt(output, _value.Length)
		for value in _value:
			output.WriteByte(value)

	public static def op_Implicit(l as LCFByteArray) as (byte):
		return l._value

	Length as int:
		get:
			return _value.Length

class LCFUshortArray(object):

	private final _value as (int)

	def constructor(input as Stream):
		length = BERInt(input)
		buffer = array(byte, length)
		input.Read(buffer, 0, length)
		_value = array(int, (length / 2))
		for i in range((length / 2)):
			_value[i] = BitConverter.ToUInt16(buffer, (i * 2))

	def Save(output as Stream):
		WriteBERInt(output, (_value.Length * 2))
		for value in _value:
			arr = BitConverter.GetBytes(value)
			output.Write(arr, 0, 2)

	public static def op_Implicit(l as LCFUshortArray) as (int):
		return l._value

	Length as int:
		get:
			return _value.Length

class LCFIntArray(object):

	private final _value as (int)

	def constructor(input as Stream):
		length = BERInt(input)
		buffer = array(byte, length)
		input.Read(buffer, 0, length)
		_value = array(int, (length / 4))
		for i in range((length / 4)):
			_value[i] = BitConverter.ToInt32(buffer, (i * 4))

	def Save(output as Stream):
		WriteBERInt(output, (_value.Length * 4))
		for value in _value:
			arr = BitConverter.GetBytes(value)
			output.Write(arr, 0, 4)

	public static def op_Implicit(l as LCFIntArray) as (int):
		return l._value

	Length as int:
		get:
			return _value.Length

class LCFBoolArray(object):

	private final _value as (bool)

	def constructor(input as Stream):
		length = BERInt(input)
		buffer = array(byte, length)
		input.Read(buffer, 0, length)
		_value = array(bool, length)
		for i in range(length):
			_value[i] = (buffer[i] != 0)

	def Save(output as Stream):
		WriteBERInt(output, _value.Length)
		for value in _value:
			output.WriteByte((1 if value else 0))

	public static def op_Implicit(l as LCFBoolArray) as (bool):
		return l._value

	Length as int:
		get:
			return _value.Length

internal def BERInt(input as Stream) as int:
	result = 0
	repeat()def ():
		value = input.ReadByte()
		result = ((result << 7) + (value % 128))
		until((value < 128))

	return result

internal def WriteBERInt(output as Stream, value as int):
	if (value < 128) and (value >= 0):
		output.WriteByte(value)
	else:
		dividend as uint = 128
		base as byte
		unsigned = (value cast uint)
		stack = List[of byte]()
		i = 0
		while unsigned != 0:
			base = (unsigned % dividend)
			stack.Add((base if (i == 0) else (base | 128)))
			++i
			unsigned /= dividend
		output.Write(stack.Reversed.ToArray(), 0, stack.Count)

internal def WriteByteArray(output as Stream, value as (byte)):
	WriteBERInt(output, value.Length)
	output.Write(value, 0, value.Length)

internal def ReadLCFString(input as Stream) as string:
	length = BERInt(input)
	buffer = array(byte, length)
	input.Read(buffer, 0, length)
	return Encoding.Default.GetString(buffer)

public def WriteList[of T(ILCFObject)](output as Stream, list as System.Collections.Generic.List[of T]):
	subStream = MemoryStream()
	WriteBERInt(subStream, list.Count)
	for item in list:
		item.Save(subStream)
	WriteByteArray(output, subStream.ToArray())

public def WriteSequence[of T(ILCFObject)](output as Stream, list as System.Collections.Generic.List[of T]):
	subStream = MemoryStream()
	for item in list:
		item.Save(subStream)
	WriteByteArray(output, subStream.ToArray())

internal def WriteValue(output as Stream, value as ILCFObject):
	subStream = MemoryStream()
	value.Save(subStream)
	WriteByteArray(output, subStream.ToArray())

internal def WriteValue(output as Stream, value as int):
	subStream = MemoryStream()
	WriteBERInt(subStream, value)
	WriteByteArray(output, subStream.ToArray())

internal def WriteValue(output as Stream, value as string):
	utf8 = (array(byte, 0) if (value is null) else Encoding.Default.GetBytes(value))
	WriteByteArray(output, utf8)

internal def WriteValue(output as Stream, value as bool):
	output.WriteByte(1)
	output.WriteByte((1 if value else 0))

internal def WriteValue(output as Stream, value as LCFIntArray):
	if value is not null:
		value.Save(output)
	else:
		output.WriteByte(0)

internal def WriteValue(output as Stream, value as LCFUshortArray):
	if value is not null:
		value.Save(output)
	else:
		output.WriteByte(0)

internal def WriteValue(output as Stream, value as LCFByteArray):
	if value is not null:
		value.Save(output)
	else:
		output.WriteByte(0)

internal def WriteValue(output as Stream, value as LCFBoolArray):
	if value is not null:
		value.Save(output)
	else:
		output.WriteByte(0)

internal class LCFUnexpectedSection(System.Exception):

	def constructor(current as int, id as int, name as Type):
		super("While parsing $name, expected section $id but found $current")

namespace TURBU.RM2K.Import.LCF

import System
import Boo.Adt from 'Boo.Adt, Version=1.0.5474.0, Culture=neutral, PublicKeyToken=null'
import Boo.Lang.Compiler.Ast
import Boo.Lang.PatternMatching from 'Boo.Lang.PatternMatching, Version=2.0.9.4, Culture=neutral, PublicKeyToken=32c39770e9a21a67'
import TURBU.RM2K.Import.LCF
import Boo.Lang.PatternMatching

interface ILCFObject:

	def Save(output as System.IO.Stream)

public final class LCFObjectMacro(Boo.Lang.Compiler.LexicalInfoPreservingGeneratorMacro):

	[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
	private __macro as Boo.Lang.Compiler.Ast.MacroStatement

	public def constructor():
		super()

	public def constructor(context as Boo.Lang.Compiler.CompilerContext):
		raise System.ArgumentNullException('context') if (not context)
		super(context)

	protected override def ExpandGeneratorImpl(LCFObject as Boo.Lang.Compiler.Ast.MacroStatement) as System.Collections.Generic.IEnumerable[of Boo.Lang.Compiler.Ast.Node]:
		raise System.ArgumentNullException('LCFObject') if (not LCFObject)
		self.__macro = LCFObject
		$match$14 = LCFObject
		if ((($match$14 isa Boo.Lang.Compiler.Ast.MacroStatement) and @(($match$15 = ($match$14 cast Boo.Lang.Compiler.Ast.MacroStatement)), true)) and ($match$15.Name == 'LCFObject')) and ((1 == len($match$15.Arguments)) and (($match$15.Arguments[0] isa Boo.Lang.Compiler.Ast.ReferenceExpression) and @((name = ($match$15.Arguments[0] cast Boo.Lang.Compiler.Ast.ReferenceExpression)), true))):
			body = __macro.Body.Statements.Cast[of Boo.Lang.Compiler.Ast.Statement]()
			cls = [|
				class $(name)(ILCFObject):
					pass

			|]

			ctr = [|
				public def constructor(input as System.IO.Stream):
					current = BERInt(input)
			|]

			save = [|
				public def Save(output as System.IO.Stream):
					pass
			|]

			if LCFObject.ContainsAnnotation('header'):
				hdr = (LCFObject['header'] cast StringLiteralExpression)
				errstr = "File header '$(hdr.Value)' not found"
				readHeader = [|
					assert ReadLCFString(input) == $(hdr), $(errstr)
				|]

				ctr.Body.Insert(0, readHeader)
				readHeader.LexicalInfo = hdr.ParentNode.LexicalInfo
				writeHeader = [| WriteValue(output, $(hdr)) |].withLexicalInfoFrom(readHeader)
				save.Body.Add(writeHeader)
			if LCFObject.ContainsAnnotation('hasID'):
				idLine = [| _ID = BERInt(input) |].withLexicalInfoFrom((LCFObject['hasID'] cast Node))
				ctr.Body.Insert(0, idLine)
				exprField = Field(SimpleTypeReference('int'), null, Name: '_ID', Modifiers: (TypeMemberModifiers.Private | TypeMemberModifiers.Final))
				attr = Boo.Lang.Compiler.Ast.Attribute('Getter')
				attr.Arguments.Add(ReferenceExpression('ID'))
				exprField.Attributes.Add(attr)
				cls.Members.Add(exprField)
				writeSave = [| WriteBERInt(output, _ID) |].withLexicalInfoFrom(idLine)
				save.Body.Add(writeSave)
			last = 0
			skipping = false
			initBlock = Block()
			for decl in Flatten(body):
				writeUnless as Expression = null
				$match$11 = decl.Expression
				if (((($match$11 isa Boo.Lang.Compiler.Ast.BinaryExpression) and @(($match$12 = ($match$11 cast Boo.Lang.Compiler.Ast.BinaryExpression)), true)) and ($match$12.Operator == Boo.Lang.Compiler.Ast.BinaryOperatorType.Assign)) and @((num = $match$12.Left), true)) and (((($match$12.Right isa Boo.Lang.Compiler.Ast.TryCastExpression) and @(($match$13 = ($match$12.Right cast Boo.Lang.Compiler.Ast.TryCastExpression)), true)) and @((fld = $match$13.Target), true)) and @((type = $match$13.Type), true)):
					id = ($(num) as IntegerLiteralExpression)
					raise "Left side must be an integer: $(decl.ToCodeString())" if (id is null)
					raise 'ID numbers must be declared in order' if (id.Value <= last)
					last = id.Value
					ifBlock = [|
						if current == $(id):
							current = BERInt(input)
						elif (current < $(id)) and (current > 0):
							raise LCFUnexpectedSection(current, $(id), $(name))
					|]

					if mapping.ContainsKey(type.ToString()):
						isMapping = true
						tr = (mapping[type.ToString()] cast ReferenceExpression)
						mappedType = (SimpleTypeReference(tr.Name) if (tr is not null) else null)
					else:
						isMapping = false
					if isMapping and (mappedType is null):
						skipping = true
						ifBlock.TrueBlock.Insert(0, ExpressionStatement([| _legacy.Add($(id), LCFByteArray(input)) |]))
						type = null
						writeExpr = [| WriteByteArray(output, _legacy[$(id)]) |]
						writeUnless = [| not _legacy.ContainsKey($(id)) |]
					else:
						$match$8 = fld
						if ((($match$8 isa Boo.Lang.Compiler.Ast.MethodInvocationExpression) and @(($match$9 = ($match$8 cast Boo.Lang.Compiler.Ast.MethodInvocationExpression)), true)) and @((fld = $match$9.Target), true)) and ((1 == len($match$9.Arguments)) and @((default = $match$9.Arguments[0]), true)):
							fldName = (fld cast ReferenceExpression).Name
							iFldName = ReferenceExpression(('_' + fldName))
							writeUnless = [| $(iFldName) == $(default) |]
						elif (($match$8 isa ReferenceExpression) and @(($match$10 = ($match$8 cast ReferenceExpression)), true)) and @((fldName = $match$10.Name), true):
							iFldName = ReferenceExpression(('_' + fldName))
							default = null
						else:
							raise MatchError("`fld` failed to match `$$match$8`")
						if (not isMapping) and (type isa ArrayTypeReference):
							basetype = ReferenceExpression((type cast ArrayTypeReference).ElementType.ToString())
							initBlock.Add([| $(iFldName) = System.Collections.Generic.List[of $(basetype)]() |])
							extra = [|
								check = (BERInt(input) + input.Position)
								for i in range(BERInt(input)):
									$(fld).Add($(basetype)(input))
								raise 'Unexpected input position' unless (input.Position == check)
							|]

							type = GenericTypeReference('System.Collections.Generic.List', SimpleTypeReference(basetype.Name))
							ifBlock.TrueBlock.Insert(0, extra)
							writeExpr = [| WriteList(output, $(iFldName)) |]
						elif type isa GenericTypeReference:
							gtr = (type cast GenericTypeReference)
							unless gtr.Name == 'System.Collections.Generic.IEnumerable':
								raise Boo.Lang.Runtime.AssertionFailedException('gtr.Name == \'System.Collections.Generic.IEnumerable\'')
							type = (gtr.GenericArguments[0] cast SimpleTypeReference)
							basetype = ReferenceExpression(type.ToString())
							initBlock.Add([| $(iFldName) = System.Collections.Generic.List[of $(basetype)]() |])
							extra = [|
								check = (BERInt(input) + input.Position)
								while input.Position < check:
									$(iFldName).Add($(basetype)(input))
								raise 'Unexpected input position' unless (input.Position == check)
							|]

							type = GenericTypeReference('System.Collections.Generic.List', SimpleTypeReference(basetype.Name))
							ifBlock.TrueBlock.Insert(0, extra)
							writeExpr = [| WriteSequence(output, $(iFldName)) |]
						else:
							fldClass = ReferenceExpression((mappedType.ToString() if isMapping else type.ToString()))
							ifBlock.TrueBlock.Insert(0, ExpressionStatement([| $(iFldName) = $(fldClass)(input) |]))
							if isMapping:
								writeExpr = [| WriteValue(output, $(iFldName)) |]
							else:
								ifBlock.TrueBlock.Insert(0, ExpressionStatement([| BERInt(input) |]))
								writeExpr = [| WriteValue(output, $(iFldName)) |]
						if (default is not null) and (not (default isa NullLiteralExpression)):
							ifs = (ifBlock.FalseBlock.FirstStatement cast IfStatement)
							unless ifs.FalseBlock is null:
								raise Boo.Lang.Runtime.AssertionFailedException('ifs.FalseBlock is null')
							ifs.FalseBlock = Block(ExpressionStatement([| $(iFldName) = $(fldClass)($(default)) |]))
						type = mappedType if (isMapping and type.ToString().EndsWith('Array'))
				else:
					raise MatchError("`decl.Expression` failed to match `$$match$11`")
				if writeUnless is not null:
					unlessStmt = UnlessStatement(writeUnless)
					writeBlock = unlessStmt.Block
					save.Body.Add(unlessStmt)
				else:
					writeBlock = save.Body
				writeBlock.Add([| WriteBERInt(output, $(id)) |])
				writeBlock.Add(writeExpr)
				writeBlock.LexicalInfo = decl.LexicalInfo
				ctr.Body.Add(ifBlock)
				ifBlock.LexicalInfo = decl.LexicalInfo
				unless type is null:
					exprField = Field(decl.Expression.LexicalInfo, type, null, Name: iFldName.Name, Modifiers: TypeMemberModifiers.Private)
					attr = Boo.Lang.Compiler.Ast.Attribute('Property')
					attr.Arguments.Add(ReferenceExpression(fldName))
					exprField.Attributes.Add(attr)
					cls.Members.Add(exprField)
			if skipping:
				exprField = Field(LCFObject.LexicalInfo, null, [| System.Collections.Generic.Dictionary[of int, (byte)]() |], Name: '_legacy', Modifiers: (TypeMemberModifiers.Private | TypeMemberModifiers.Final))
				attr = Boo.Lang.Compiler.Ast.Attribute('Getter')
				attr.Arguments.Add(ReferenceExpression('Legacy'))
				exprField.Attributes.Add(attr)
				cls.Members.Add(exprField)
			unless LCFObject.ContainsAnnotation('noZeroEnd'):
				ctr.Body.Add([|
					assert current == 0, "Ending 0 not found at offset $(input.Position.ToString('X'))"
				|]
)
				save.Body.Add([| output.WriteByte(0) |])
			ctr.Body.Insert(0, initBlock)
			cls.Members.Add(ctr)
			cls.Members.Add(save)
			yield cls
		else:
			raise '`LCFObject` macro invocation argument(s) did not match definition: `LCFObject((name as Boo.Lang.Compiler.Ast.ReferenceExpression), (body as System.Collections.Generic.IEnumerable[of Boo.Lang.Compiler.Ast.Statement]))`'

	[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
	protected override def ExpandImpl(LCFObject as Boo.Lang.Compiler.Ast.MacroStatement) as Boo.Lang.Compiler.Ast.Statement:
		raise System.NotImplementedException('Boo installed version is older than the new macro syntax \'LCFObject\' is using. Read BOO-1077 for more info.')

	private def Flatten(input as System.Collections.Generic.IEnumerable[of Statement]) as System.Collections.Generic.IEnumerable[of ExpressionStatement]:
		for value in input:
			if value isa ExpressionStatement:
				yield value
			else:
				for sub as ExpressionStatement in (value cast Block).Statements:
					yield sub

	public static final mapping = { 'bool': [| LCFBool |], 'int': [| LCFInt |], 'string': [| LCFString |], 'byteArray': [| LCFByteArray |], 'wordArray': [| LCFUshortArray |], 'intArray': [| LCFIntArray |], 'boolArray': [| LCFBoolArray |], 'skip': null }

	public final class SkipSecMacro(Boo.Lang.Compiler.LexicalInfoPreservingGeneratorMacro):

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private __macro as Boo.Lang.Compiler.Ast.MacroStatement

		public def constructor():
			super()

		public def constructor(context as Boo.Lang.Compiler.CompilerContext):
			raise System.ArgumentNullException('context') if (not context)
			super(context)

		protected override def ExpandGeneratorImpl(skipSec as Boo.Lang.Compiler.Ast.MacroStatement) as System.Collections.Generic.IEnumerable[of Boo.Lang.Compiler.Ast.Node]:
			raise System.ArgumentNullException('skipSec') if (not skipSec)
			self.__macro = skipSec
			$match$4 = skipSec
			if ((($match$4 isa Boo.Lang.Compiler.Ast.MacroStatement) and @(($match$5 = ($match$4 cast Boo.Lang.Compiler.Ast.MacroStatement)), true)) and ($match$5.Name == 'skipSec')) and ((1 == len($match$5.Arguments)) and (($match$5.Arguments[0] isa Boo.Lang.Compiler.Ast.Expression) and @((value = ($match$5.Arguments[0] cast Boo.Lang.Compiler.Ast.Expression)), true))):
				$match$1 = value
				if $match$1 isa IntegerLiteralExpression:
					yield ExpressionStatement([| $(value) = (blank as skip) |])
				elif ((($match$1 isa Boo.Lang.Compiler.Ast.MethodInvocationExpression) and @(($match$2 = ($match$1 cast Boo.Lang.Compiler.Ast.MethodInvocationExpression)), true)) and ((($match$2.Target isa Boo.Lang.Compiler.Ast.ReferenceExpression) and @(($match$3 = ($match$2.Target cast Boo.Lang.Compiler.Ast.ReferenceExpression)), true)) and ($match$3.Name == 'range'))) and (((2 == len($match$2.Arguments)) and @((l = $match$2.Arguments[0]), true)) and @((h = $match$2.Arguments[1]), true)):
					i = (l cast IntegerLiteralExpression).Value
					while i <= (h cast IntegerLiteralExpression).Value:
						yield ExpressionStatement([| $(i) = (blank as skip) |])
						++i
				else:
					raise MatchError("`value` failed to match `$$match$1`")
			else:
				raise '`skipSec` macro invocation argument(s) did not match definition: `skipSec((value as Boo.Lang.Compiler.Ast.Expression))`'

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		protected override def ExpandImpl(skipSec as Boo.Lang.Compiler.Ast.MacroStatement) as Boo.Lang.Compiler.Ast.Statement:
			raise System.NotImplementedException('Boo installed version is older than the new macro syntax \'skipSec\' is using. Read BOO-1077 for more info.')

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private $LCFObject as Boo.Lang.Compiler.Ast.MacroStatement

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private LCFObject:
			get:
				$LCFObject = __macro.GetParentMacroByName('LCFObject') unless $LCFObject
				return $LCFObject

	public final class HeaderMacro(Boo.Lang.Compiler.LexicalInfoPreservingMacro):

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private __macro as Boo.Lang.Compiler.Ast.MacroStatement

		public def constructor():
			super()

		public def constructor(context as Boo.Lang.Compiler.CompilerContext):
			raise System.ArgumentNullException('context') if (not context)
			super(context)

		protected override def ExpandImpl(header as Boo.Lang.Compiler.Ast.MacroStatement) as Boo.Lang.Compiler.Ast.Statement:
			raise System.ArgumentNullException('header') if (not header)
			self.__macro = header
			$match$6 = header
			if ((($match$6 isa Boo.Lang.Compiler.Ast.MacroStatement) and @(($match$7 = ($match$6 cast Boo.Lang.Compiler.Ast.MacroStatement)), true)) and ($match$7.Name == 'header')) and ((1 == len($match$7.Arguments)) and (($match$7.Arguments[0] isa Boo.Lang.Compiler.Ast.StringLiteralExpression) and @((value = ($match$7.Arguments[0] cast Boo.Lang.Compiler.Ast.StringLiteralExpression)), true))):
				LCFObject['header'] = value
			else:
				raise '`header` macro invocation argument(s) did not match definition: `header((value as Boo.Lang.Compiler.Ast.StringLiteralExpression))`'

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private $LCFObject as Boo.Lang.Compiler.Ast.MacroStatement

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private LCFObject:
			get:
				$LCFObject = __macro.GetParentMacroByName('LCFObject') unless $LCFObject
				return $LCFObject

	public final class HasIDMacro(Boo.Lang.Compiler.LexicalInfoPreservingMacro):

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private __macro as Boo.Lang.Compiler.Ast.MacroStatement

		public def constructor():
			super()

		public def constructor(context as Boo.Lang.Compiler.CompilerContext):
			raise System.ArgumentNullException('context') if (not context)
			super(context)

		protected override def ExpandImpl(hasID as Boo.Lang.Compiler.Ast.MacroStatement) as Boo.Lang.Compiler.Ast.Statement:
			raise System.ArgumentNullException('hasID') if (not hasID)
			self.__macro = hasID
			LCFObject['hasID'] = hasID

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private $LCFObject as Boo.Lang.Compiler.Ast.MacroStatement

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private LCFObject:
			get:
				$LCFObject = __macro.GetParentMacroByName('LCFObject') unless $LCFObject
				return $LCFObject

	public final class NoZeroEndMacro(Boo.Lang.Compiler.LexicalInfoPreservingMacro):

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private __macro as Boo.Lang.Compiler.Ast.MacroStatement

		public def constructor():
			super()

		public def constructor(context as Boo.Lang.Compiler.CompilerContext):
			raise System.ArgumentNullException('context') if (not context)
			super(context)

		protected override def ExpandImpl(noZeroEnd as Boo.Lang.Compiler.Ast.MacroStatement) as Boo.Lang.Compiler.Ast.Statement:
			raise System.ArgumentNullException('noZeroEnd') if (not noZeroEnd)
			self.__macro = noZeroEnd
			LCFObject['noZeroEnd'] = noZeroEnd

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private $LCFObject as Boo.Lang.Compiler.Ast.MacroStatement

		[System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private LCFObject:
			get:
				$LCFObject = __macro.GetParentMacroByName('LCFObject') unless $LCFObject
				return $LCFObject

namespace TURBU.RM2K.Import.LCF

import System
import System.Linq.Enumerable
import TURBU.RM2K.Import.LCF

class RMVocabDict(object, TURBU.RM2K.Import.LCF.ILCFObject):

	private _dict = System.Collections.Generic.Dictionary[of int, string]()

	def constructor(input as System.IO.Stream):
		last = (-1)
		current = BERInt(input)
		while current > 0:
			unless current > last:
				raise Boo.Lang.Runtime.AssertionFailedException('current > last')
			last = current
			_dict.Add(current, LCFString(input))
			current = BERInt(input)

	def Save(output as System.IO.Stream):
		for pair in _dict.OrderBy({ kv | kv.Key }):
			WriteBERInt(output, pair.Key)
			WriteValue(output, pair.Value)
		output.WriteByte(0)

	self[index as int] as string:
		get:
			return Items[index]

	public Items:
		get:
			return _dict

class LDB(ILCFObject):

	private _Heroes as System.Collections.Generic.List[of RMHero]

	private _Skills as System.Collections.Generic.List[of RMSkill]

	private _Items as System.Collections.Generic.List[of RMItem]

	private _Monsters as System.Collections.Generic.List[of RMMonster]

	private _MParties as System.Collections.Generic.List[of RMMonsterParty]

	private _Terrains as System.Collections.Generic.List[of RMTerrain]

	private _Attributes as System.Collections.Generic.List[of RMAttribute]

	private _Conditions as System.Collections.Generic.List[of RMCondition]

	private _Animations as System.Collections.Generic.List[of RMAnimation]

	private _Tilesets as System.Collections.Generic.List[of RMTileset]

	private _Vocab as RMVocabDict

	private _SysData as RMSystemRecord

	private _Switches as System.Collections.Generic.List[of RMVariable]

	private _Variables as System.Collections.Generic.List[of RMVariable]

	private _GlobalEvents as System.Collections.Generic.List[of GlobalEvent]

	private _BattleLayout as RMBattleLayout

	private _Classes as System.Collections.Generic.List[of RMCharClass]

	private _BattleAnims as System.Collections.Generic.List[of RM2K3AttackAnimation]

	private final _legacy = System.Collections.Generic.Dictionary[of int, (byte)]()

	public def constructor(input as System.IO.Stream):
		_Heroes = System.Collections.Generic.List[of RMHero]()
		_Skills = System.Collections.Generic.List[of RMSkill]()
		_Items = System.Collections.Generic.List[of RMItem]()
		_Monsters = System.Collections.Generic.List[of RMMonster]()
		_MParties = System.Collections.Generic.List[of RMMonsterParty]()
		_Terrains = System.Collections.Generic.List[of RMTerrain]()
		_Attributes = System.Collections.Generic.List[of RMAttribute]()
		_Conditions = System.Collections.Generic.List[of RMCondition]()
		_Animations = System.Collections.Generic.List[of RMAnimation]()
		_Tilesets = System.Collections.Generic.List[of RMTileset]()
		_Switches = System.Collections.Generic.List[of RMVariable]()
		_Variables = System.Collections.Generic.List[of RMVariable]()
		_GlobalEvents = System.Collections.Generic.List[of GlobalEvent]()
		_Classes = System.Collections.Generic.List[of RMCharClass]()
		_BattleAnims = System.Collections.Generic.List[of RM2K3AttackAnimation]()
		unless ReadLCFString(input) == 'LcfDataBase':
			raise Boo.Lang.Runtime.AssertionFailedException('File header \'LcfDataBase\' not found')
		current = BERInt(input)
		if current == 11:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Heroes.Add(RMHero(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, LDB)
		if current == 12:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Skills.Add(RMSkill(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, LDB)
		if current == 13:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Items.Add(RMItem(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, LDB)
		if current == 14:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Monsters.Add(RMMonster(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, LDB)
		if current == 15:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				MParties.Add(RMMonsterParty(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, LDB)
		if current == 16:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Terrains.Add(RMTerrain(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, LDB)
		if current == 17:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Attributes.Add(RMAttribute(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 17) and (current > 0):
			raise LCFUnexpectedSection(current, 17, LDB)
		if current == 18:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Conditions.Add(RMCondition(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 18) and (current > 0):
			raise LCFUnexpectedSection(current, 18, LDB)
		if current == 19:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Animations.Add(RMAnimation(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 19) and (current > 0):
			raise LCFUnexpectedSection(current, 19, LDB)
		if current == 20:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Tilesets.Add(RMTileset(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 20) and (current > 0):
			raise LCFUnexpectedSection(current, 20, LDB)
		if current == 21:
			BERInt(input)
			_Vocab = RMVocabDict(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, LDB)
		if current == 22:
			BERInt(input)
			_SysData = RMSystemRecord(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, LDB)
		if current == 23:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Switches.Add(RMVariable(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, LDB)
		if current == 24:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Variables.Add(RMVariable(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, LDB)
		if current == 25:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				GlobalEvents.Add(GlobalEvent(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 25) and (current > 0):
			raise LCFUnexpectedSection(current, 25, LDB)
		if current == 26:
			_legacy.Add(26, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 26) and (current > 0):
			raise LCFUnexpectedSection(current, 26, LDB)
		if current == 27:
			_legacy.Add(27, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 27) and (current > 0):
			raise LCFUnexpectedSection(current, 27, LDB)
		if current == 28:
			_legacy.Add(28, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 28) and (current > 0):
			raise LCFUnexpectedSection(current, 28, LDB)
		if current == 29:
			BERInt(input)
			_BattleLayout = RMBattleLayout(input)
			current = BERInt(input)
		elif (current < 29) and (current > 0):
			raise LCFUnexpectedSection(current, 29, LDB)
		if current == 30:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Classes.Add(RMCharClass(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 30) and (current > 0):
			raise LCFUnexpectedSection(current, 30, LDB)
		if current == 31:
			_legacy.Add(31, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, LDB)
		if current == 32:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				BattleAnims.Add(RM2K3AttackAnimation(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, LDB)

	public def Save(output as System.IO.Stream):
		WriteValue(output, 'LcfDataBase')
		WriteBERInt(output, 11)
		WriteList(output, _Heroes)
		WriteBERInt(output, 12)
		WriteList(output, _Skills)
		WriteBERInt(output, 13)
		WriteList(output, _Items)
		WriteBERInt(output, 14)
		WriteList(output, _Monsters)
		WriteBERInt(output, 15)
		WriteList(output, _MParties)
		WriteBERInt(output, 16)
		WriteList(output, _Terrains)
		WriteBERInt(output, 17)
		WriteList(output, _Attributes)
		WriteBERInt(output, 18)
		WriteList(output, _Conditions)
		WriteBERInt(output, 19)
		WriteList(output, _Animations)
		WriteBERInt(output, 20)
		WriteList(output, _Tilesets)
		WriteBERInt(output, 21)
		WriteValue(output, _Vocab)
		WriteBERInt(output, 22)
		WriteValue(output, _SysData)
		WriteBERInt(output, 23)
		WriteList(output, _Switches)
		WriteBERInt(output, 24)
		WriteList(output, _Variables)
		WriteBERInt(output, 25)
		WriteList(output, _GlobalEvents)
		unless not _legacy.ContainsKey(26):
			WriteBERInt(output, 26)
			WriteByteArray(output, _legacy[26])
		unless not _legacy.ContainsKey(27):
			WriteBERInt(output, 27)
			WriteByteArray(output, _legacy[27])
		unless not _legacy.ContainsKey(28):
			WriteBERInt(output, 28)
			WriteByteArray(output, _legacy[28])
		WriteBERInt(output, 29)
		WriteValue(output, _BattleLayout)
		WriteBERInt(output, 30)
		WriteList(output, _Classes)
		unless not _legacy.ContainsKey(31):
			WriteBERInt(output, 31)
			WriteByteArray(output, _legacy[31])
		WriteBERInt(output, 32)
		WriteList(output, _BattleAnims)

	public Heroes as System.Collections.Generic.List[of RMHero]:
		get:
			return _Heroes
		set:
			self._Heroes = value

	public Skills as System.Collections.Generic.List[of RMSkill]:
		get:
			return _Skills
		set:
			self._Skills = value

	public Items as System.Collections.Generic.List[of RMItem]:
		get:
			return _Items
		set:
			self._Items = value

	public Monsters as System.Collections.Generic.List[of RMMonster]:
		get:
			return _Monsters
		set:
			self._Monsters = value

	public MParties as System.Collections.Generic.List[of RMMonsterParty]:
		get:
			return _MParties
		set:
			self._MParties = value

	public Terrains as System.Collections.Generic.List[of RMTerrain]:
		get:
			return _Terrains
		set:
			self._Terrains = value

	public Attributes as System.Collections.Generic.List[of RMAttribute]:
		get:
			return _Attributes
		set:
			self._Attributes = value

	public Conditions as System.Collections.Generic.List[of RMCondition]:
		get:
			return _Conditions
		set:
			self._Conditions = value

	public Animations as System.Collections.Generic.List[of RMAnimation]:
		get:
			return _Animations
		set:
			self._Animations = value

	public Tilesets as System.Collections.Generic.List[of RMTileset]:
		get:
			return _Tilesets
		set:
			self._Tilesets = value

	public Vocab as RMVocabDict:
		get:
			return _Vocab
		set:
			self._Vocab = value

	public SysData as RMSystemRecord:
		get:
			return _SysData
		set:
			self._SysData = value

	public Switches as System.Collections.Generic.List[of RMVariable]:
		get:
			return _Switches
		set:
			self._Switches = value

	public Variables as System.Collections.Generic.List[of RMVariable]:
		get:
			return _Variables
		set:
			self._Variables = value

	public GlobalEvents as System.Collections.Generic.List[of GlobalEvent]:
		get:
			return _GlobalEvents
		set:
			self._GlobalEvents = value

	public BattleLayout as RMBattleLayout:
		get:
			return _BattleLayout
		set:
			self._BattleLayout = value

	public Classes as System.Collections.Generic.List[of RMCharClass]:
		get:
			return _Classes
		set:
			self._Classes = value

	public BattleAnims as System.Collections.Generic.List[of RM2K3AttackAnimation]:
		get:
			return _BattleAnims
		set:
			self._BattleAnims = value

	public Legacy:
		get:
			return _legacy

class RMVariable(ILCFObject):

	private final _ID as int

	private _Name as string

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMVariable)
		else:
			_Name = LCFString('')
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

namespace TURBU.RM2K.Import.LCF

import System.Collections.Generic
import System.IO
import System.Linq.Enumerable
import TURBU.RM2K.Import.LCF

final class StartPoint(System.ValueType):

	public Map as int

	public X as int

	public Y as int

class LMT(object):

	private final _maps = Dictionary[of int, MapTreeData]()

	private final _nodes = List[of int]()

	private final _currentMap as int

	private final _startPoints = List[of StartPoint]()

	def constructor(input as Stream):
		unless ReadLCFString(input) == 'LcfMapTree':
			raise Boo.Lang.Runtime.AssertionFailedException('File header \'LcfMapTree\' not found')
		for i in range(BERInt(input)):
			data = MapTreeData(input)
			_maps.Add(data.ID, data)
		for i in range(BERInt(input)):
			_nodes.Add(BERInt(input))
		unless _nodes[0] == 0:
			raise Boo.Lang.Runtime.AssertionFailedException('_nodes[0] == 0')
		unless _nodes.Count == _maps.Count:
			raise Boo.Lang.Runtime.AssertionFailedException('_nodes.Count == _maps.Count')
		_currentMap = BERInt(input)
		current = BERInt(input)
		base = 0
		for i in range(4):
			sp = StartPoint(Map: (-1), X: 0, Y: 0)
			if current == (base + 1):
				sp.Map = LCFInt(input)
				current = BERInt(input)
			elif (current > 0) and (current < (base + 1)):
				raise LCFUnexpectedSection(current, 1, LMT)
			if current == (base + 2):
				sp.X = LCFInt(input)
				current = BERInt(input)
			elif (current > 0) and (current < (base + 2)):
				raise LCFUnexpectedSection(current, 2, LMT)
			if current == (base + 3):
				sp.Y = LCFInt(input)
				current = BERInt(input)
			elif (current > 0) and (current < (base + 3)):
				raise LCFUnexpectedSection(current, 3, LMT)
			StartPoints.Add(sp)
			base += 10
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as Stream):
		WriteValue(output, 'LcfMapTree')
		WriteBERInt(output, _maps.Count)
		for data in _maps.Values.OrderBy({ m | m.ID }):
			data.Save(output)
		WriteBERInt(output, _nodes.Count)
		for node in _nodes:
			WriteBERInt(output, node)
		WriteBERInt(output, _currentMap)
		current = 1
		for sp in StartPoints:
			unless sp.Map == (-1):
				WriteBERInt(output, current)
				WriteValue(output, sp.Map)
			unless sp.X == 0:
				WriteBERInt(output, (current + 1))
				WriteValue(output, sp.X)
			unless sp.Y == 0:
				WriteBERInt(output, (current + 2))
				WriteValue(output, sp.Y)
			current += 10
		output.WriteByte(0)

	public Maps:
		get:
			return _maps

	public Nodes:
		get:
			return _nodes

	public CurrentMap as int:
		get:
			return _currentMap

	public StartPoints:
		get:
			return _startPoints

class MapTreeData(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Parent as int

	private _Generation as int

	private _NodeType as int

	private _HScroll as int

	private _VScroll as int

	private _TreeOpen as bool

	private _BgmState as int

	private _BgmData as RMMusic

	private _BattleBGState as int

	private _BattleBGName as string

	private _CanPort as int

	private _CanEscape as int

	private _CanSave as int

	private _Battles as System.Collections.Generic.List[of EncounterData]

	private _EncounterRate as int

	private _AreaData as LCFIntArray

	public def constructor(input as System.IO.Stream):
		_Battles = System.Collections.Generic.List[of EncounterData]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, MapTreeData)
		if current == 2:
			_Parent = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, MapTreeData)
		else:
			_Parent = LCFInt(0)
		if current == 3:
			_Generation = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, MapTreeData)
		else:
			_Generation = LCFInt(0)
		if current == 4:
			_NodeType = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, MapTreeData)
		if current == 5:
			_HScroll = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, MapTreeData)
		else:
			_HScroll = LCFInt(0)
		if current == 6:
			_VScroll = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, MapTreeData)
		else:
			_VScroll = LCFInt(0)
		if current == 7:
			_TreeOpen = LCFBool(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, MapTreeData)
		else:
			_TreeOpen = LCFBool(false)
		if current == 11:
			_BgmState = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, MapTreeData)
		if current == 12:
			BERInt(input)
			_BgmData = RMMusic(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, MapTreeData)
		if current == 21:
			_BattleBGState = LCFInt(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, MapTreeData)
		if current == 22:
			_BattleBGName = LCFString(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, MapTreeData)
		else:
			_BattleBGName = LCFString('')
		if current == 31:
			_CanPort = LCFInt(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, MapTreeData)
		if current == 32:
			_CanEscape = LCFInt(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, MapTreeData)
		if current == 33:
			_CanSave = LCFInt(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, MapTreeData)
		if current == 41:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Battles.Add(EncounterData(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, MapTreeData)
		if current == 44:
			_EncounterRate = LCFInt(input)
			current = BERInt(input)
		elif (current < 44) and (current > 0):
			raise LCFUnexpectedSection(current, 44, MapTreeData)
		else:
			_EncounterRate = LCFInt(25)
		if current == 51:
			_AreaData = LCFIntArray(input)
			current = BERInt(input)
		elif (current < 51) and (current > 0):
			raise LCFUnexpectedSection(current, 51, MapTreeData)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Name)
		unless _Parent == 0:
			WriteBERInt(output, 2)
			WriteValue(output, _Parent)
		unless _Generation == 0:
			WriteBERInt(output, 3)
			WriteValue(output, _Generation)
		WriteBERInt(output, 4)
		WriteValue(output, _NodeType)
		unless _HScroll == 0:
			WriteBERInt(output, 5)
			WriteValue(output, _HScroll)
		unless _VScroll == 0:
			WriteBERInt(output, 6)
			WriteValue(output, _VScroll)
		unless _TreeOpen == false:
			WriteBERInt(output, 7)
			WriteValue(output, _TreeOpen)
		WriteBERInt(output, 11)
		WriteValue(output, _BgmState)
		WriteBERInt(output, 12)
		WriteValue(output, _BgmData)
		WriteBERInt(output, 21)
		WriteValue(output, _BattleBGState)
		unless _BattleBGName == '':
			WriteBERInt(output, 22)
			WriteValue(output, _BattleBGName)
		WriteBERInt(output, 31)
		WriteValue(output, _CanPort)
		WriteBERInt(output, 32)
		WriteValue(output, _CanEscape)
		WriteBERInt(output, 33)
		WriteValue(output, _CanSave)
		WriteBERInt(output, 41)
		WriteList(output, _Battles)
		unless _EncounterRate == 25:
			WriteBERInt(output, 44)
			WriteValue(output, _EncounterRate)
		WriteBERInt(output, 51)
		WriteValue(output, _AreaData)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Parent as int:
		get:
			return _Parent
		set:
			self._Parent = value

	public Generation as int:
		get:
			return _Generation
		set:
			self._Generation = value

	public NodeType as int:
		get:
			return _NodeType
		set:
			self._NodeType = value

	public HScroll as int:
		get:
			return _HScroll
		set:
			self._HScroll = value

	public VScroll as int:
		get:
			return _VScroll
		set:
			self._VScroll = value

	public TreeOpen as bool:
		get:
			return _TreeOpen
		set:
			self._TreeOpen = value

	public BgmState as int:
		get:
			return _BgmState
		set:
			self._BgmState = value

	public BgmData as RMMusic:
		get:
			return _BgmData
		set:
			self._BgmData = value

	public BattleBGState as int:
		get:
			return _BattleBGState
		set:
			self._BattleBGState = value

	public BattleBGName as string:
		get:
			return _BattleBGName
		set:
			self._BattleBGName = value

	public CanPort as int:
		get:
			return _CanPort
		set:
			self._CanPort = value

	public CanEscape as int:
		get:
			return _CanEscape
		set:
			self._CanEscape = value

	public CanSave as int:
		get:
			return _CanSave
		set:
			self._CanSave = value

	public Battles as System.Collections.Generic.List[of EncounterData]:
		get:
			return _Battles
		set:
			self._Battles = value

	public EncounterRate as int:
		get:
			return _EncounterRate
		set:
			self._EncounterRate = value

	public AreaData as LCFIntArray:
		get:
			return _AreaData
		set:
			self._AreaData = value

class EncounterData(ILCFObject):

	private final _ID as int

	private _MonsterParty as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_MonsterParty = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, EncounterData)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _MonsterParty)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public MonsterParty as int:
		get:
			return _MonsterParty
		set:
			self._MonsterParty = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class LMU(ILCFObject):

	private _Terrain as int

	private _Width as int

	private _Height as int

	private _Wraparound as int

	private _UsesPano as bool

	private _PanoName as string

	private _HPan as bool

	private _VPan as bool

	private _HPanAutoscroll as bool

	private _HPanSpeed as int

	private _VPanAutoscroll as bool

	private _VPanSpeed as int

	private _UseGenerator as bool

	private _GeneratorStyle as int

	private _GeneratorGranularity as int

	private _GeneratorRoomWidth as int

	private _GeneratorRoomHeight as int

	private _GeneratorSurround as bool

	private _GeneratorUseUpperWall as bool

	private _GeneratorUseFloorB as bool

	private _GeneratorUseFloorC as bool

	private _GeneratorUseObstacleB as bool

	private _GeneratorUseObstacleC as bool

	private _LowChip as LCFUshortArray

	private _HighChip as LCFUshortArray

	private _Events as System.Collections.Generic.List[of MapEvent]

	private _Modified as int

	private final _legacy = System.Collections.Generic.Dictionary[of int, (byte)]()

	public def constructor(input as System.IO.Stream):
		_Events = System.Collections.Generic.List[of MapEvent]()
		unless ReadLCFString(input) == 'LcfMapUnit':
			raise Boo.Lang.Runtime.AssertionFailedException('File header \'LcfMapUnit\' not found')
		current = BERInt(input)
		if current == 1:
			_Terrain = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, LMU)
		else:
			_Terrain = LCFInt(1)
		if current == 2:
			_Width = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, LMU)
		else:
			_Width = LCFInt(20)
		if current == 3:
			_Height = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, LMU)
		else:
			_Height = LCFInt(15)
		if current == 11:
			_Wraparound = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, LMU)
		if current == 31:
			_UsesPano = LCFBool(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, LMU)
		else:
			_UsesPano = LCFBool(false)
		if current == 32:
			_PanoName = LCFString(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, LMU)
		else:
			_PanoName = LCFString('')
		if current == 33:
			_HPan = LCFBool(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, LMU)
		else:
			_HPan = LCFBool(false)
		if current == 34:
			_VPan = LCFBool(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, LMU)
		else:
			_VPan = LCFBool(false)
		if current == 35:
			_HPanAutoscroll = LCFBool(input)
			current = BERInt(input)
		elif (current < 35) and (current > 0):
			raise LCFUnexpectedSection(current, 35, LMU)
		else:
			_HPanAutoscroll = LCFBool(false)
		if current == 36:
			_HPanSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 36) and (current > 0):
			raise LCFUnexpectedSection(current, 36, LMU)
		else:
			_HPanSpeed = LCFInt(0)
		if current == 37:
			_VPanAutoscroll = LCFBool(input)
			current = BERInt(input)
		elif (current < 37) and (current > 0):
			raise LCFUnexpectedSection(current, 37, LMU)
		else:
			_VPanAutoscroll = LCFBool(false)
		if current == 38:
			_VPanSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 38) and (current > 0):
			raise LCFUnexpectedSection(current, 38, LMU)
		else:
			_VPanSpeed = LCFInt(0)
		if current == 40:
			_UseGenerator = LCFBool(input)
			current = BERInt(input)
		elif (current < 40) and (current > 0):
			raise LCFUnexpectedSection(current, 40, LMU)
		else:
			_UseGenerator = LCFBool(false)
		if current == 41:
			_GeneratorStyle = LCFInt(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, LMU)
		else:
			_GeneratorStyle = LCFInt(0)
		if current == 42:
			_legacy.Add(42, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, LMU)
		if current == 48:
			_GeneratorGranularity = LCFInt(input)
			current = BERInt(input)
		elif (current < 48) and (current > 0):
			raise LCFUnexpectedSection(current, 48, LMU)
		else:
			_GeneratorGranularity = LCFInt(0)
		if current == 49:
			_GeneratorRoomWidth = LCFInt(input)
			current = BERInt(input)
		elif (current < 49) and (current > 0):
			raise LCFUnexpectedSection(current, 49, LMU)
		else:
			_GeneratorRoomWidth = LCFInt(0)
		if current == 50:
			_GeneratorRoomHeight = LCFInt(input)
			current = BERInt(input)
		elif (current < 50) and (current > 0):
			raise LCFUnexpectedSection(current, 50, LMU)
		if current == 51:
			_GeneratorSurround = LCFBool(input)
			current = BERInt(input)
		elif (current < 51) and (current > 0):
			raise LCFUnexpectedSection(current, 51, LMU)
		else:
			_GeneratorSurround = LCFBool(false)
		if current == 52:
			_GeneratorUseUpperWall = LCFBool(input)
			current = BERInt(input)
		elif (current < 52) and (current > 0):
			raise LCFUnexpectedSection(current, 52, LMU)
		else:
			_GeneratorUseUpperWall = LCFBool(false)
		if current == 53:
			_GeneratorUseFloorB = LCFBool(input)
			current = BERInt(input)
		elif (current < 53) and (current > 0):
			raise LCFUnexpectedSection(current, 53, LMU)
		else:
			_GeneratorUseFloorB = LCFBool(false)
		if current == 54:
			_GeneratorUseFloorC = LCFBool(input)
			current = BERInt(input)
		elif (current < 54) and (current > 0):
			raise LCFUnexpectedSection(current, 54, LMU)
		else:
			_GeneratorUseFloorC = LCFBool(false)
		if current == 55:
			_GeneratorUseObstacleB = LCFBool(input)
			current = BERInt(input)
		elif (current < 55) and (current > 0):
			raise LCFUnexpectedSection(current, 55, LMU)
		else:
			_GeneratorUseObstacleB = LCFBool(false)
		if current == 56:
			_GeneratorUseObstacleC = LCFBool(input)
			current = BERInt(input)
		elif (current < 56) and (current > 0):
			raise LCFUnexpectedSection(current, 56, LMU)
		else:
			_GeneratorUseObstacleC = LCFBool(false)
		if current == 60:
			_legacy.Add(60, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 60) and (current > 0):
			raise LCFUnexpectedSection(current, 60, LMU)
		if current == 61:
			_legacy.Add(61, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 61) and (current > 0):
			raise LCFUnexpectedSection(current, 61, LMU)
		if current == 62:
			_legacy.Add(62, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 62) and (current > 0):
			raise LCFUnexpectedSection(current, 62, LMU)
		if current == 71:
			_LowChip = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 71) and (current > 0):
			raise LCFUnexpectedSection(current, 71, LMU)
		if current == 72:
			_HighChip = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 72) and (current > 0):
			raise LCFUnexpectedSection(current, 72, LMU)
		if current == 81:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Events.Add(MapEvent(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 81) and (current > 0):
			raise LCFUnexpectedSection(current, 81, LMU)
		if current == 91:
			_Modified = LCFInt(input)
			current = BERInt(input)
		elif (current < 91) and (current > 0):
			raise LCFUnexpectedSection(current, 91, LMU)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteValue(output, 'LcfMapUnit')
		unless _Terrain == 1:
			WriteBERInt(output, 1)
			WriteValue(output, _Terrain)
		unless _Width == 20:
			WriteBERInt(output, 2)
			WriteValue(output, _Width)
		unless _Height == 15:
			WriteBERInt(output, 3)
			WriteValue(output, _Height)
		WriteBERInt(output, 11)
		WriteValue(output, _Wraparound)
		unless _UsesPano == false:
			WriteBERInt(output, 31)
			WriteValue(output, _UsesPano)
		unless _PanoName == '':
			WriteBERInt(output, 32)
			WriteValue(output, _PanoName)
		unless _HPan == false:
			WriteBERInt(output, 33)
			WriteValue(output, _HPan)
		unless _VPan == false:
			WriteBERInt(output, 34)
			WriteValue(output, _VPan)
		unless _HPanAutoscroll == false:
			WriteBERInt(output, 35)
			WriteValue(output, _HPanAutoscroll)
		unless _HPanSpeed == 0:
			WriteBERInt(output, 36)
			WriteValue(output, _HPanSpeed)
		unless _VPanAutoscroll == false:
			WriteBERInt(output, 37)
			WriteValue(output, _VPanAutoscroll)
		unless _VPanSpeed == 0:
			WriteBERInt(output, 38)
			WriteValue(output, _VPanSpeed)
		unless _UseGenerator == false:
			WriteBERInt(output, 40)
			WriteValue(output, _UseGenerator)
		unless _GeneratorStyle == 0:
			WriteBERInt(output, 41)
			WriteValue(output, _GeneratorStyle)
		unless not _legacy.ContainsKey(42):
			WriteBERInt(output, 42)
			WriteByteArray(output, _legacy[42])
		unless _GeneratorGranularity == 0:
			WriteBERInt(output, 48)
			WriteValue(output, _GeneratorGranularity)
		unless _GeneratorRoomWidth == 0:
			WriteBERInt(output, 49)
			WriteValue(output, _GeneratorRoomWidth)
		WriteBERInt(output, 50)
		WriteValue(output, _GeneratorRoomHeight)
		unless _GeneratorSurround == false:
			WriteBERInt(output, 51)
			WriteValue(output, _GeneratorSurround)
		unless _GeneratorUseUpperWall == false:
			WriteBERInt(output, 52)
			WriteValue(output, _GeneratorUseUpperWall)
		unless _GeneratorUseFloorB == false:
			WriteBERInt(output, 53)
			WriteValue(output, _GeneratorUseFloorB)
		unless _GeneratorUseFloorC == false:
			WriteBERInt(output, 54)
			WriteValue(output, _GeneratorUseFloorC)
		unless _GeneratorUseObstacleB == false:
			WriteBERInt(output, 55)
			WriteValue(output, _GeneratorUseObstacleB)
		unless _GeneratorUseObstacleC == false:
			WriteBERInt(output, 56)
			WriteValue(output, _GeneratorUseObstacleC)
		unless not _legacy.ContainsKey(60):
			WriteBERInt(output, 60)
			WriteByteArray(output, _legacy[60])
		unless not _legacy.ContainsKey(61):
			WriteBERInt(output, 61)
			WriteByteArray(output, _legacy[61])
		unless not _legacy.ContainsKey(62):
			WriteBERInt(output, 62)
			WriteByteArray(output, _legacy[62])
		WriteBERInt(output, 71)
		WriteValue(output, _LowChip)
		WriteBERInt(output, 72)
		WriteValue(output, _HighChip)
		WriteBERInt(output, 81)
		WriteList(output, _Events)
		WriteBERInt(output, 91)
		WriteValue(output, _Modified)
		output.WriteByte(0)

	public Terrain as int:
		get:
			return _Terrain
		set:
			self._Terrain = value

	public Width as int:
		get:
			return _Width
		set:
			self._Width = value

	public Height as int:
		get:
			return _Height
		set:
			self._Height = value

	public Wraparound as int:
		get:
			return _Wraparound
		set:
			self._Wraparound = value

	public UsesPano as bool:
		get:
			return _UsesPano
		set:
			self._UsesPano = value

	public PanoName as string:
		get:
			return _PanoName
		set:
			self._PanoName = value

	public HPan as bool:
		get:
			return _HPan
		set:
			self._HPan = value

	public VPan as bool:
		get:
			return _VPan
		set:
			self._VPan = value

	public HPanAutoscroll as bool:
		get:
			return _HPanAutoscroll
		set:
			self._HPanAutoscroll = value

	public HPanSpeed as int:
		get:
			return _HPanSpeed
		set:
			self._HPanSpeed = value

	public VPanAutoscroll as bool:
		get:
			return _VPanAutoscroll
		set:
			self._VPanAutoscroll = value

	public VPanSpeed as int:
		get:
			return _VPanSpeed
		set:
			self._VPanSpeed = value

	public UseGenerator as bool:
		get:
			return _UseGenerator
		set:
			self._UseGenerator = value

	public GeneratorStyle as int:
		get:
			return _GeneratorStyle
		set:
			self._GeneratorStyle = value

	public GeneratorGranularity as int:
		get:
			return _GeneratorGranularity
		set:
			self._GeneratorGranularity = value

	public GeneratorRoomWidth as int:
		get:
			return _GeneratorRoomWidth
		set:
			self._GeneratorRoomWidth = value

	public GeneratorRoomHeight as int:
		get:
			return _GeneratorRoomHeight
		set:
			self._GeneratorRoomHeight = value

	public GeneratorSurround as bool:
		get:
			return _GeneratorSurround
		set:
			self._GeneratorSurround = value

	public GeneratorUseUpperWall as bool:
		get:
			return _GeneratorUseUpperWall
		set:
			self._GeneratorUseUpperWall = value

	public GeneratorUseFloorB as bool:
		get:
			return _GeneratorUseFloorB
		set:
			self._GeneratorUseFloorB = value

	public GeneratorUseFloorC as bool:
		get:
			return _GeneratorUseFloorC
		set:
			self._GeneratorUseFloorC = value

	public GeneratorUseObstacleB as bool:
		get:
			return _GeneratorUseObstacleB
		set:
			self._GeneratorUseObstacleB = value

	public GeneratorUseObstacleC as bool:
		get:
			return _GeneratorUseObstacleC
		set:
			self._GeneratorUseObstacleC = value

	public LowChip as LCFUshortArray:
		get:
			return _LowChip
		set:
			self._LowChip = value

	public HighChip as LCFUshortArray:
		get:
			return _HighChip
		set:
			self._HighChip = value

	public Events as System.Collections.Generic.List[of MapEvent]:
		get:
			return _Events
		set:
			self._Events = value

	public Modified as int:
		get:
			return _Modified
		set:
			self._Modified = value

	public Legacy:
		get:
			return _legacy

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RM2K3AttackAnimation(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Speed as int

	private _Poses as System.Collections.Generic.List[of RM2K3AttackData]

	private _Weapons as System.Collections.Generic.List[of RM2K3AttackData]

	public def constructor(input as System.IO.Stream):
		_Poses = System.Collections.Generic.List[of RM2K3AttackData]()
		_Weapons = System.Collections.Generic.List[of RM2K3AttackData]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RM2K3AttackAnimation)
		if current == 2:
			_Speed = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RM2K3AttackAnimation)
		else:
			_Speed = LCFInt(20)
		if current == 10:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Poses.Add(RM2K3AttackData(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, RM2K3AttackAnimation)
		if current == 11:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Weapons.Add(RM2K3AttackData(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RM2K3AttackAnimation)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Name)
		unless _Speed == 20:
			WriteBERInt(output, 2)
			WriteValue(output, _Speed)
		WriteBERInt(output, 10)
		WriteList(output, _Poses)
		WriteBERInt(output, 11)
		WriteList(output, _Weapons)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Speed as int:
		get:
			return _Speed
		set:
			self._Speed = value

	public Poses as System.Collections.Generic.List[of RM2K3AttackData]:
		get:
			return _Poses
		set:
			self._Poses = value

	public Weapons as System.Collections.Generic.List[of RM2K3AttackData]:
		get:
			return _Weapons
		set:
			self._Weapons = value

class RM2K3AttackData(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Filename as string

	private _Frame as int

	private _AnimType as int

	private _AnimNum as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RM2K3AttackData)
		else:
			_Name = LCFString('')
		if current == 2:
			_Filename = LCFString(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RM2K3AttackData)
		else:
			_Filename = LCFString('')
		if current == 3:
			_Frame = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RM2K3AttackData)
		else:
			_Frame = LCFInt(0)
		if current == 4:
			_AnimType = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RM2K3AttackData)
		else:
			_AnimType = LCFInt(0)
		if current == 5:
			_AnimNum = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RM2K3AttackData)
		else:
			_AnimNum = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		unless _Filename == '':
			WriteBERInt(output, 2)
			WriteValue(output, _Filename)
		unless _Frame == 0:
			WriteBERInt(output, 3)
			WriteValue(output, _Frame)
		unless _AnimType == 0:
			WriteBERInt(output, 4)
			WriteValue(output, _AnimType)
		unless _AnimNum == 0:
			WriteBERInt(output, 5)
			WriteValue(output, _AnimNum)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Filename as string:
		get:
			return _Filename
		set:
			self._Filename = value

	public Frame as int:
		get:
			return _Frame
		set:
			self._Frame = value

	public AnimType as int:
		get:
			return _AnimType
		set:
			self._AnimType = value

	public AnimNum as int:
		get:
			return _AnimNum
		set:
			self._AnimNum = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMAnimation(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Filename as string

	private _LargeAnim as bool

	private _Timing as System.Collections.Generic.List[of AnimEffects]

	private _HitsAll as bool

	private _YTarget as int

	private _Frames as System.Collections.Generic.List[of AnimFrame]

	public def constructor(input as System.IO.Stream):
		_Timing = System.Collections.Generic.List[of AnimEffects]()
		_Frames = System.Collections.Generic.List[of AnimFrame]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMAnimation)
		else:
			_Name = LCFString('')
		if current == 2:
			_Filename = LCFString(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMAnimation)
		else:
			_Filename = LCFString('')
		if current == 3:
			_LargeAnim = LCFBool(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMAnimation)
		else:
			_LargeAnim = LCFBool(false)
		if current == 6:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Timing.Add(AnimEffects(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, RMAnimation)
		if current == 9:
			_HitsAll = LCFBool(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, RMAnimation)
		if current == 10:
			_YTarget = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, RMAnimation)
		if current == 12:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Frames.Add(AnimFrame(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMAnimation)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		unless _Filename == '':
			WriteBERInt(output, 2)
			WriteValue(output, _Filename)
		unless _LargeAnim == false:
			WriteBERInt(output, 3)
			WriteValue(output, _LargeAnim)
		WriteBERInt(output, 6)
		WriteList(output, _Timing)
		WriteBERInt(output, 9)
		WriteValue(output, _HitsAll)
		WriteBERInt(output, 10)
		WriteValue(output, _YTarget)
		WriteBERInt(output, 12)
		WriteList(output, _Frames)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Filename as string:
		get:
			return _Filename
		set:
			self._Filename = value

	public LargeAnim as bool:
		get:
			return _LargeAnim
		set:
			self._LargeAnim = value

	public Timing as System.Collections.Generic.List[of AnimEffects]:
		get:
			return _Timing
		set:
			self._Timing = value

	public HitsAll as bool:
		get:
			return _HitsAll
		set:
			self._HitsAll = value

	public YTarget as int:
		get:
			return _YTarget
		set:
			self._YTarget = value

	public Frames as System.Collections.Generic.List[of AnimFrame]:
		get:
			return _Frames
		set:
			self._Frames = value

class AnimFrame(ILCFObject):

	private final _ID as int

	private _Cells as System.Collections.Generic.List[of AnimCell]

	public def constructor(input as System.IO.Stream):
		_Cells = System.Collections.Generic.List[of AnimCell]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Cells.Add(AnimCell(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, AnimFrame)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteList(output, _Cells)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Cells as System.Collections.Generic.List[of AnimCell]:
		get:
			return _Cells
		set:
			self._Cells = value

class AnimCell(ILCFObject):

	private final _ID as int

	private _IsNew as bool

	private _Index as int

	private _X as int

	private _Y as int

	private _Zoom as int

	private _Red as int

	private _Green as int

	private _Blue as int

	private _Sat as int

	private _Transparency as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_IsNew = LCFBool(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, AnimCell)
		else:
			_IsNew = LCFBool(true)
		if current == 2:
			_Index = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, AnimCell)
		else:
			_Index = LCFInt(0)
		if current == 3:
			_X = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, AnimCell)
		else:
			_X = LCFInt(0)
		if current == 4:
			_Y = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, AnimCell)
		else:
			_Y = LCFInt(0)
		if current == 5:
			_Zoom = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, AnimCell)
		else:
			_Zoom = LCFInt(100)
		if current == 6:
			_Red = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, AnimCell)
		else:
			_Red = LCFInt(100)
		if current == 7:
			_Green = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, AnimCell)
		else:
			_Green = LCFInt(100)
		if current == 8:
			_Blue = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, AnimCell)
		else:
			_Blue = LCFInt(100)
		if current == 9:
			_Sat = LCFInt(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, AnimCell)
		else:
			_Sat = LCFInt(100)
		if current == 10:
			_Transparency = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, AnimCell)
		else:
			_Transparency = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _IsNew == true:
			WriteBERInt(output, 1)
			WriteValue(output, _IsNew)
		unless _Index == 0:
			WriteBERInt(output, 2)
			WriteValue(output, _Index)
		unless _X == 0:
			WriteBERInt(output, 3)
			WriteValue(output, _X)
		unless _Y == 0:
			WriteBERInt(output, 4)
			WriteValue(output, _Y)
		unless _Zoom == 100:
			WriteBERInt(output, 5)
			WriteValue(output, _Zoom)
		unless _Red == 100:
			WriteBERInt(output, 6)
			WriteValue(output, _Red)
		unless _Green == 100:
			WriteBERInt(output, 7)
			WriteValue(output, _Green)
		unless _Blue == 100:
			WriteBERInt(output, 8)
			WriteValue(output, _Blue)
		unless _Sat == 100:
			WriteBERInt(output, 9)
			WriteValue(output, _Sat)
		unless _Transparency == 0:
			WriteBERInt(output, 10)
			WriteValue(output, _Transparency)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public IsNew as bool:
		get:
			return _IsNew
		set:
			self._IsNew = value

	public Index as int:
		get:
			return _Index
		set:
			self._Index = value

	public X as int:
		get:
			return _X
		set:
			self._X = value

	public Y as int:
		get:
			return _Y
		set:
			self._Y = value

	public Zoom as int:
		get:
			return _Zoom
		set:
			self._Zoom = value

	public Red as int:
		get:
			return _Red
		set:
			self._Red = value

	public Green as int:
		get:
			return _Green
		set:
			self._Green = value

	public Blue as int:
		get:
			return _Blue
		set:
			self._Blue = value

	public Sat as int:
		get:
			return _Sat
		set:
			self._Sat = value

	public Transparency as int:
		get:
			return _Transparency
		set:
			self._Transparency = value

class AnimEffects(ILCFObject):

	private final _ID as int

	private _Frame as int

	private _Sound as RMMusic

	private _FlashWhere as int

	private _Red as int

	private _Green as int

	private _Blue as int

	private _Power as int

	private _ShakeWhere as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Frame = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, AnimEffects)
		if current == 2:
			BERInt(input)
			_Sound = RMMusic(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, AnimEffects)
		if current == 3:
			_FlashWhere = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, AnimEffects)
		if current == 4:
			_Red = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, AnimEffects)
		else:
			_Red = LCFInt(31)
		if current == 5:
			_Green = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, AnimEffects)
		else:
			_Green = LCFInt(31)
		if current == 6:
			_Blue = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, AnimEffects)
		else:
			_Blue = LCFInt(31)
		if current == 7:
			_Power = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, AnimEffects)
		else:
			_Power = LCFInt(31)
		if current == 8:
			_ShakeWhere = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, AnimEffects)
		else:
			_ShakeWhere = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Frame)
		WriteBERInt(output, 2)
		WriteValue(output, _Sound)
		WriteBERInt(output, 3)
		WriteValue(output, _FlashWhere)
		unless _Red == 31:
			WriteBERInt(output, 4)
			WriteValue(output, _Red)
		unless _Green == 31:
			WriteBERInt(output, 5)
			WriteValue(output, _Green)
		unless _Blue == 31:
			WriteBERInt(output, 6)
			WriteValue(output, _Blue)
		unless _Power == 31:
			WriteBERInt(output, 7)
			WriteValue(output, _Power)
		unless _ShakeWhere == 0:
			WriteBERInt(output, 8)
			WriteValue(output, _ShakeWhere)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Frame as int:
		get:
			return _Frame
		set:
			self._Frame = value

	public Sound as RMMusic:
		get:
			return _Sound
		set:
			self._Sound = value

	public FlashWhere as int:
		get:
			return _FlashWhere
		set:
			self._FlashWhere = value

	public Red as int:
		get:
			return _Red
		set:
			self._Red = value

	public Green as int:
		get:
			return _Green
		set:
			self._Green = value

	public Blue as int:
		get:
			return _Blue
		set:
			self._Blue = value

	public Power as int:
		get:
			return _Power
		set:
			self._Power = value

	public ShakeWhere as int:
		get:
			return _ShakeWhere
		set:
			self._ShakeWhere = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMAttribute(ILCFObject):

	private final _ID as int

	private _Name as string

	private _MagicAttribute as bool

	private _RateA as int

	private _RateB as int

	private _RateC as int

	private _RateD as int

	private _RateE as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMAttribute)
		else:
			_Name = LCFString('')
		if current == 2:
			_MagicAttribute = LCFBool(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMAttribute)
		if current == 11:
			_RateA = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMAttribute)
		else:
			_RateA = LCFInt(300)
		if current == 12:
			_RateB = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMAttribute)
		else:
			_RateB = LCFInt(200)
		if current == 13:
			_RateC = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, RMAttribute)
		else:
			_RateC = LCFInt(100)
		if current == 14:
			_RateD = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, RMAttribute)
		else:
			_RateD = LCFInt(50)
		if current == 15:
			_RateE = LCFInt(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMAttribute)
		else:
			_RateE = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		WriteBERInt(output, 2)
		WriteValue(output, _MagicAttribute)
		unless _RateA == 300:
			WriteBERInt(output, 11)
			WriteValue(output, _RateA)
		unless _RateB == 200:
			WriteBERInt(output, 12)
			WriteValue(output, _RateB)
		unless _RateC == 100:
			WriteBERInt(output, 13)
			WriteValue(output, _RateC)
		unless _RateD == 50:
			WriteBERInt(output, 14)
			WriteValue(output, _RateD)
		unless _RateE == 0:
			WriteBERInt(output, 15)
			WriteValue(output, _RateE)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public MagicAttribute as bool:
		get:
			return _MagicAttribute
		set:
			self._MagicAttribute = value

	public RateA as int:
		get:
			return _RateA
		set:
			self._RateA = value

	public RateB as int:
		get:
			return _RateB
		set:
			self._RateB = value

	public RateC as int:
		get:
			return _RateC
		set:
			self._RateC = value

	public RateD as int:
		get:
			return _RateD
		set:
			self._RateD = value

	public RateE as int:
		get:
			return _RateE
		set:
			self._RateE = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMBattleLayout(ILCFObject):

	private _AutoLineup as bool

	private _DeathEvent as bool

	private _Row as int

	private _BattleStyle as int

	private _CommandCount as int

	private _Commands as System.Collections.Generic.List[of BattleCommand]

	private _UsesDeathEventHandler as bool

	private _DeathEventHandler as int

	private _SmallWindowSize as bool

	private _WindowTrans as bool

	private _TeleportOnDeath as bool

	private _EscapeMap as int

	private _EscapeX as int

	private _EscapeY as int

	private _EscapeFacing as int

	public def constructor(input as System.IO.Stream):
		_Commands = System.Collections.Generic.List[of BattleCommand]()
		current = BERInt(input)
		if current == 2:
			_AutoLineup = LCFBool(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMBattleLayout)
		else:
			_AutoLineup = LCFBool(false)
		if current == 4:
			_DeathEvent = LCFBool(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMBattleLayout)
		else:
			_DeathEvent = LCFBool(false)
		if current == 6:
			_Row = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, RMBattleLayout)
		else:
			_Row = LCFInt(0)
		if current == 7:
			_BattleStyle = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, RMBattleLayout)
		if current == 9:
			_CommandCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, RMBattleLayout)
		else:
			_CommandCount = LCFInt(0)
		if current == 10:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Commands.Add(BattleCommand(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, RMBattleLayout)
		if current == 15:
			_UsesDeathEventHandler = LCFBool(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMBattleLayout)
		else:
			_UsesDeathEventHandler = LCFBool(false)
		if current == 16:
			_DeathEventHandler = LCFInt(input)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, RMBattleLayout)
		if current == 20:
			_SmallWindowSize = LCFBool(input)
			current = BERInt(input)
		elif (current < 20) and (current > 0):
			raise LCFUnexpectedSection(current, 20, RMBattleLayout)
		if current == 24:
			_WindowTrans = LCFBool(input)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, RMBattleLayout)
		if current == 25:
			_TeleportOnDeath = LCFBool(input)
			current = BERInt(input)
		elif (current < 25) and (current > 0):
			raise LCFUnexpectedSection(current, 25, RMBattleLayout)
		else:
			_TeleportOnDeath = LCFBool(false)
		if current == 26:
			_EscapeMap = LCFInt(input)
			current = BERInt(input)
		elif (current < 26) and (current > 0):
			raise LCFUnexpectedSection(current, 26, RMBattleLayout)
		else:
			_EscapeMap = LCFInt(0)
		if current == 27:
			_EscapeX = LCFInt(input)
			current = BERInt(input)
		elif (current < 27) and (current > 0):
			raise LCFUnexpectedSection(current, 27, RMBattleLayout)
		else:
			_EscapeX = LCFInt(0)
		if current == 28:
			_EscapeY = LCFInt(input)
			current = BERInt(input)
		elif (current < 28) and (current > 0):
			raise LCFUnexpectedSection(current, 28, RMBattleLayout)
		else:
			_EscapeY = LCFInt(0)
		if current == 29:
			_EscapeFacing = LCFInt(input)
			current = BERInt(input)
		elif (current < 29) and (current > 0):
			raise LCFUnexpectedSection(current, 29, RMBattleLayout)
		else:
			_EscapeFacing = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		unless _AutoLineup == false:
			WriteBERInt(output, 2)
			WriteValue(output, _AutoLineup)
		unless _DeathEvent == false:
			WriteBERInt(output, 4)
			WriteValue(output, _DeathEvent)
		unless _Row == 0:
			WriteBERInt(output, 6)
			WriteValue(output, _Row)
		WriteBERInt(output, 7)
		WriteValue(output, _BattleStyle)
		unless _CommandCount == 0:
			WriteBERInt(output, 9)
			WriteValue(output, _CommandCount)
		WriteBERInt(output, 10)
		WriteList(output, _Commands)
		unless _UsesDeathEventHandler == false:
			WriteBERInt(output, 15)
			WriteValue(output, _UsesDeathEventHandler)
		WriteBERInt(output, 16)
		WriteValue(output, _DeathEventHandler)
		WriteBERInt(output, 20)
		WriteValue(output, _SmallWindowSize)
		WriteBERInt(output, 24)
		WriteValue(output, _WindowTrans)
		unless _TeleportOnDeath == false:
			WriteBERInt(output, 25)
			WriteValue(output, _TeleportOnDeath)
		unless _EscapeMap == 0:
			WriteBERInt(output, 26)
			WriteValue(output, _EscapeMap)
		unless _EscapeX == 0:
			WriteBERInt(output, 27)
			WriteValue(output, _EscapeX)
		unless _EscapeY == 0:
			WriteBERInt(output, 28)
			WriteValue(output, _EscapeY)
		unless _EscapeFacing == 0:
			WriteBERInt(output, 29)
			WriteValue(output, _EscapeFacing)
		output.WriteByte(0)

	public AutoLineup as bool:
		get:
			return _AutoLineup
		set:
			self._AutoLineup = value

	public DeathEvent as bool:
		get:
			return _DeathEvent
		set:
			self._DeathEvent = value

	public Row as int:
		get:
			return _Row
		set:
			self._Row = value

	public BattleStyle as int:
		get:
			return _BattleStyle
		set:
			self._BattleStyle = value

	public CommandCount as int:
		get:
			return _CommandCount
		set:
			self._CommandCount = value

	public Commands as System.Collections.Generic.List[of BattleCommand]:
		get:
			return _Commands
		set:
			self._Commands = value

	public UsesDeathEventHandler as bool:
		get:
			return _UsesDeathEventHandler
		set:
			self._UsesDeathEventHandler = value

	public DeathEventHandler as int:
		get:
			return _DeathEventHandler
		set:
			self._DeathEventHandler = value

	public SmallWindowSize as bool:
		get:
			return _SmallWindowSize
		set:
			self._SmallWindowSize = value

	public WindowTrans as bool:
		get:
			return _WindowTrans
		set:
			self._WindowTrans = value

	public TeleportOnDeath as bool:
		get:
			return _TeleportOnDeath
		set:
			self._TeleportOnDeath = value

	public EscapeMap as int:
		get:
			return _EscapeMap
		set:
			self._EscapeMap = value

	public EscapeX as int:
		get:
			return _EscapeX
		set:
			self._EscapeX = value

	public EscapeY as int:
		get:
			return _EscapeY
		set:
			self._EscapeY = value

	public EscapeFacing as int:
		get:
			return _EscapeFacing
		set:
			self._EscapeFacing = value

class BattleCommand(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Style as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, BattleCommand)
		if current == 2:
			_Style = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, BattleCommand)
		else:
			_Style = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Name)
		unless _Style == 0:
			WriteBERInt(output, 2)
			WriteValue(output, _Style)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Style as int:
		get:
			return _Style
		set:
			self._Style = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMCharClass(ILCFObject):

	private final _ID as int

	private _Name as string

	private _SpriteIndex as int

	private _DualWield as bool

	private _StaticEq as bool

	private _ComputerControlled as bool

	private _StrongDefense as bool

	private _StatSection as LCFUshortArray

	private _ExpStandard as int

	private _ExpAddition as int

	private _ExpCorrection as int

	private _SkillSection as System.Collections.Generic.List[of HeroSkillRecord]

	private _ConditionModifiers as LCFByteArray

	private _DTypeModifiers as LCFByteArray

	private _BattleCommands as LCFIntArray

	private final _legacy = System.Collections.Generic.Dictionary[of int, (byte)]()

	public def constructor(input as System.IO.Stream):
		_SkillSection = System.Collections.Generic.List[of HeroSkillRecord]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMCharClass)
		if current == 4:
			_SpriteIndex = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMCharClass)
		else:
			_SpriteIndex = LCFInt(1)
		if current == 21:
			_DualWield = LCFBool(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMCharClass)
		else:
			_DualWield = LCFBool(false)
		if current == 22:
			_StaticEq = LCFBool(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMCharClass)
		else:
			_StaticEq = LCFBool(false)
		if current == 23:
			_ComputerControlled = LCFBool(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, RMCharClass)
		else:
			_ComputerControlled = LCFBool(false)
		if current == 24:
			_StrongDefense = LCFBool(input)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, RMCharClass)
		else:
			_StrongDefense = LCFBool(false)
		if current == 31:
			_StatSection = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMCharClass)
		if current == 41:
			_ExpStandard = LCFInt(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, RMCharClass)
		else:
			_ExpStandard = LCFInt(30)
		if current == 42:
			_ExpAddition = LCFInt(input)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMCharClass)
		else:
			_ExpAddition = LCFInt(30)
		if current == 43:
			_ExpCorrection = LCFInt(input)
			current = BERInt(input)
		elif (current < 43) and (current > 0):
			raise LCFUnexpectedSection(current, 43, RMCharClass)
		if current == 62:
			_legacy.Add(62, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 62) and (current > 0):
			raise LCFUnexpectedSection(current, 62, RMCharClass)
		if current == 63:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				SkillSection.Add(HeroSkillRecord(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 63) and (current > 0):
			raise LCFUnexpectedSection(current, 63, RMCharClass)
		if current == 71:
			_legacy.Add(71, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 71) and (current > 0):
			raise LCFUnexpectedSection(current, 71, RMCharClass)
		if current == 72:
			_ConditionModifiers = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 72) and (current > 0):
			raise LCFUnexpectedSection(current, 72, RMCharClass)
		if current == 73:
			_legacy.Add(73, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 73) and (current > 0):
			raise LCFUnexpectedSection(current, 73, RMCharClass)
		if current == 74:
			_DTypeModifiers = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 74) and (current > 0):
			raise LCFUnexpectedSection(current, 74, RMCharClass)
		if current == 80:
			_BattleCommands = LCFIntArray(input)
			current = BERInt(input)
		elif (current < 80) and (current > 0):
			raise LCFUnexpectedSection(current, 80, RMCharClass)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Name)
		unless _SpriteIndex == 1:
			WriteBERInt(output, 4)
			WriteValue(output, _SpriteIndex)
		unless _DualWield == false:
			WriteBERInt(output, 21)
			WriteValue(output, _DualWield)
		unless _StaticEq == false:
			WriteBERInt(output, 22)
			WriteValue(output, _StaticEq)
		unless _ComputerControlled == false:
			WriteBERInt(output, 23)
			WriteValue(output, _ComputerControlled)
		unless _StrongDefense == false:
			WriteBERInt(output, 24)
			WriteValue(output, _StrongDefense)
		WriteBERInt(output, 31)
		WriteValue(output, _StatSection)
		unless _ExpStandard == 30:
			WriteBERInt(output, 41)
			WriteValue(output, _ExpStandard)
		unless _ExpAddition == 30:
			WriteBERInt(output, 42)
			WriteValue(output, _ExpAddition)
		WriteBERInt(output, 43)
		WriteValue(output, _ExpCorrection)
		unless not _legacy.ContainsKey(62):
			WriteBERInt(output, 62)
			WriteByteArray(output, _legacy[62])
		WriteBERInt(output, 63)
		WriteList(output, _SkillSection)
		unless not _legacy.ContainsKey(71):
			WriteBERInt(output, 71)
			WriteByteArray(output, _legacy[71])
		WriteBERInt(output, 72)
		WriteValue(output, _ConditionModifiers)
		unless not _legacy.ContainsKey(73):
			WriteBERInt(output, 73)
			WriteByteArray(output, _legacy[73])
		WriteBERInt(output, 74)
		WriteValue(output, _DTypeModifiers)
		WriteBERInt(output, 80)
		WriteValue(output, _BattleCommands)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public SpriteIndex as int:
		get:
			return _SpriteIndex
		set:
			self._SpriteIndex = value

	public DualWield as bool:
		get:
			return _DualWield
		set:
			self._DualWield = value

	public StaticEq as bool:
		get:
			return _StaticEq
		set:
			self._StaticEq = value

	public ComputerControlled as bool:
		get:
			return _ComputerControlled
		set:
			self._ComputerControlled = value

	public StrongDefense as bool:
		get:
			return _StrongDefense
		set:
			self._StrongDefense = value

	public StatSection as LCFUshortArray:
		get:
			return _StatSection
		set:
			self._StatSection = value

	public ExpStandard as int:
		get:
			return _ExpStandard
		set:
			self._ExpStandard = value

	public ExpAddition as int:
		get:
			return _ExpAddition
		set:
			self._ExpAddition = value

	public ExpCorrection as int:
		get:
			return _ExpCorrection
		set:
			self._ExpCorrection = value

	public SkillSection as System.Collections.Generic.List[of HeroSkillRecord]:
		get:
			return _SkillSection
		set:
			self._SkillSection = value

	public ConditionModifiers as LCFByteArray:
		get:
			return _ConditionModifiers
		set:
			self._ConditionModifiers = value

	public DTypeModifiers as LCFByteArray:
		get:
			return _DTypeModifiers
		set:
			self._DTypeModifiers = value

	public BattleCommands as LCFIntArray:
		get:
			return _BattleCommands
		set:
			self._BattleCommands = value

	public Legacy:
		get:
			return _legacy

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMCondition(ILCFObject):

	private final _ID as int

	private _Name as string

	private _LastsOutsideBattle as bool

	private _Color as int

	private _Priority as int

	private _Limitation as int

	private _RateA as int

	private _RateB as int

	private _RateC as int

	private _RateD as int

	private _RateE as int

	private _HealTurns as int

	private _HealPercent as int

	private _HealShock as int

	private _StatEffect as int

	private _AttackStat as bool

	private _DefenseStat as bool

	private _MindStat as bool

	private _SpeedStat as bool

	private _ToHitChange as int

	private _Evade as bool

	private _Reflect as bool

	private _EqLock as bool

	private _StatusAnimation as int

	private _PhysBlock as bool

	private _PhysCutoff as int

	private _MagBlock as bool

	private _MagCutoff as int

	private _HpDot as int

	private _MpDot as int

	private _CondMessage1 as string

	private _CondMessage2 as string

	private _CondMessage3 as string

	private _CondMessage4 as string

	private _CondMessage5 as string

	private _HpTurnPercent as int

	private _HpTurnFixed as int

	private _HpStepCount as int

	private _HpStepQuantity as int

	private _MpTurnPercent as int

	private _MpTurnFixed as int

	private _MpStepCount as int

	private _MpStepQuantity as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMCondition)
		else:
			_Name = LCFString('')
		if current == 2:
			_LastsOutsideBattle = LCFBool(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMCondition)
		if current == 3:
			_Color = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMCondition)
		else:
			_Color = LCFInt(6)
		if current == 4:
			_Priority = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMCondition)
		else:
			_Priority = LCFInt(50)
		if current == 5:
			_Limitation = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMCondition)
		if current == 11:
			_RateA = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMCondition)
		else:
			_RateA = LCFInt(100)
		if current == 12:
			_RateB = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMCondition)
		else:
			_RateB = LCFInt(80)
		if current == 13:
			_RateC = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, RMCondition)
		else:
			_RateC = LCFInt(60)
		if current == 14:
			_RateD = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, RMCondition)
		else:
			_RateD = LCFInt(30)
		if current == 15:
			_RateE = LCFInt(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMCondition)
		else:
			_RateE = LCFInt(0)
		if current == 21:
			_HealTurns = LCFInt(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMCondition)
		else:
			_HealTurns = LCFInt(0)
		if current == 22:
			_HealPercent = LCFInt(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMCondition)
		else:
			_HealPercent = LCFInt(0)
		if current == 23:
			_HealShock = LCFInt(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, RMCondition)
		else:
			_HealShock = LCFInt(0)
		if current == 30:
			_StatEffect = LCFInt(input)
			current = BERInt(input)
		elif (current < 30) and (current > 0):
			raise LCFUnexpectedSection(current, 30, RMCondition)
		else:
			_StatEffect = LCFInt(0)
		if current == 31:
			_AttackStat = LCFBool(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMCondition)
		else:
			_AttackStat = LCFBool(false)
		if current == 32:
			_DefenseStat = LCFBool(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, RMCondition)
		else:
			_DefenseStat = LCFBool(false)
		if current == 33:
			_MindStat = LCFBool(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, RMCondition)
		else:
			_MindStat = LCFBool(false)
		if current == 34:
			_SpeedStat = LCFBool(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, RMCondition)
		else:
			_SpeedStat = LCFBool(false)
		if current == 35:
			_ToHitChange = LCFInt(input)
			current = BERInt(input)
		elif (current < 35) and (current > 0):
			raise LCFUnexpectedSection(current, 35, RMCondition)
		else:
			_ToHitChange = LCFInt(100)
		if current == 36:
			_Evade = LCFBool(input)
			current = BERInt(input)
		elif (current < 36) and (current > 0):
			raise LCFUnexpectedSection(current, 36, RMCondition)
		else:
			_Evade = LCFBool(false)
		if current == 37:
			_Reflect = LCFBool(input)
			current = BERInt(input)
		elif (current < 37) and (current > 0):
			raise LCFUnexpectedSection(current, 37, RMCondition)
		else:
			_Reflect = LCFBool(false)
		if current == 38:
			_EqLock = LCFBool(input)
			current = BERInt(input)
		elif (current < 38) and (current > 0):
			raise LCFUnexpectedSection(current, 38, RMCondition)
		else:
			_EqLock = LCFBool(false)
		if current == 39:
			_StatusAnimation = LCFInt(input)
			current = BERInt(input)
		elif (current < 39) and (current > 0):
			raise LCFUnexpectedSection(current, 39, RMCondition)
		else:
			_StatusAnimation = LCFInt(6)
		if current == 41:
			_PhysBlock = LCFBool(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, RMCondition)
		else:
			_PhysBlock = LCFBool(false)
		if current == 42:
			_PhysCutoff = LCFInt(input)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMCondition)
		else:
			_PhysCutoff = LCFInt(0)
		if current == 43:
			_MagBlock = LCFBool(input)
			current = BERInt(input)
		elif (current < 43) and (current > 0):
			raise LCFUnexpectedSection(current, 43, RMCondition)
		else:
			_MagBlock = LCFBool(false)
		if current == 44:
			_MagCutoff = LCFInt(input)
			current = BERInt(input)
		elif (current < 44) and (current > 0):
			raise LCFUnexpectedSection(current, 44, RMCondition)
		else:
			_MagCutoff = LCFInt(0)
		if current == 45:
			_HpDot = LCFInt(input)
			current = BERInt(input)
		elif (current < 45) and (current > 0):
			raise LCFUnexpectedSection(current, 45, RMCondition)
		else:
			_HpDot = LCFInt(0)
		if current == 46:
			_MpDot = LCFInt(input)
			current = BERInt(input)
		elif (current < 46) and (current > 0):
			raise LCFUnexpectedSection(current, 46, RMCondition)
		else:
			_MpDot = LCFInt(0)
		if current == 51:
			_CondMessage1 = LCFString(input)
			current = BERInt(input)
		elif (current < 51) and (current > 0):
			raise LCFUnexpectedSection(current, 51, RMCondition)
		else:
			_CondMessage1 = LCFString('')
		if current == 52:
			_CondMessage2 = LCFString(input)
			current = BERInt(input)
		elif (current < 52) and (current > 0):
			raise LCFUnexpectedSection(current, 52, RMCondition)
		else:
			_CondMessage2 = LCFString('')
		if current == 53:
			_CondMessage3 = LCFString(input)
			current = BERInt(input)
		elif (current < 53) and (current > 0):
			raise LCFUnexpectedSection(current, 53, RMCondition)
		else:
			_CondMessage3 = LCFString('')
		if current == 54:
			_CondMessage4 = LCFString(input)
			current = BERInt(input)
		elif (current < 54) and (current > 0):
			raise LCFUnexpectedSection(current, 54, RMCondition)
		else:
			_CondMessage4 = LCFString('')
		if current == 55:
			_CondMessage5 = LCFString(input)
			current = BERInt(input)
		elif (current < 55) and (current > 0):
			raise LCFUnexpectedSection(current, 55, RMCondition)
		else:
			_CondMessage5 = LCFString('')
		if current == 61:
			_HpTurnPercent = LCFInt(input)
			current = BERInt(input)
		elif (current < 61) and (current > 0):
			raise LCFUnexpectedSection(current, 61, RMCondition)
		else:
			_HpTurnPercent = LCFInt(0)
		if current == 62:
			_HpTurnFixed = LCFInt(input)
			current = BERInt(input)
		elif (current < 62) and (current > 0):
			raise LCFUnexpectedSection(current, 62, RMCondition)
		else:
			_HpTurnFixed = LCFInt(0)
		if current == 63:
			_HpStepCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 63) and (current > 0):
			raise LCFUnexpectedSection(current, 63, RMCondition)
		else:
			_HpStepCount = LCFInt(0)
		if current == 64:
			_HpStepQuantity = LCFInt(input)
			current = BERInt(input)
		elif (current < 64) and (current > 0):
			raise LCFUnexpectedSection(current, 64, RMCondition)
		else:
			_HpStepQuantity = LCFInt(0)
		if current == 65:
			_MpTurnPercent = LCFInt(input)
			current = BERInt(input)
		elif (current < 65) and (current > 0):
			raise LCFUnexpectedSection(current, 65, RMCondition)
		else:
			_MpTurnPercent = LCFInt(0)
		if current == 66:
			_MpTurnFixed = LCFInt(input)
			current = BERInt(input)
		elif (current < 66) and (current > 0):
			raise LCFUnexpectedSection(current, 66, RMCondition)
		else:
			_MpTurnFixed = LCFInt(0)
		if current == 67:
			_MpStepCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 67) and (current > 0):
			raise LCFUnexpectedSection(current, 67, RMCondition)
		else:
			_MpStepCount = LCFInt(0)
		if current == 68:
			_MpStepQuantity = LCFInt(input)
			current = BERInt(input)
		elif (current < 68) and (current > 0):
			raise LCFUnexpectedSection(current, 68, RMCondition)
		else:
			_MpStepQuantity = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		WriteBERInt(output, 2)
		WriteValue(output, _LastsOutsideBattle)
		unless _Color == 6:
			WriteBERInt(output, 3)
			WriteValue(output, _Color)
		unless _Priority == 50:
			WriteBERInt(output, 4)
			WriteValue(output, _Priority)
		WriteBERInt(output, 5)
		WriteValue(output, _Limitation)
		unless _RateA == 100:
			WriteBERInt(output, 11)
			WriteValue(output, _RateA)
		unless _RateB == 80:
			WriteBERInt(output, 12)
			WriteValue(output, _RateB)
		unless _RateC == 60:
			WriteBERInt(output, 13)
			WriteValue(output, _RateC)
		unless _RateD == 30:
			WriteBERInt(output, 14)
			WriteValue(output, _RateD)
		unless _RateE == 0:
			WriteBERInt(output, 15)
			WriteValue(output, _RateE)
		unless _HealTurns == 0:
			WriteBERInt(output, 21)
			WriteValue(output, _HealTurns)
		unless _HealPercent == 0:
			WriteBERInt(output, 22)
			WriteValue(output, _HealPercent)
		unless _HealShock == 0:
			WriteBERInt(output, 23)
			WriteValue(output, _HealShock)
		unless _StatEffect == 0:
			WriteBERInt(output, 30)
			WriteValue(output, _StatEffect)
		unless _AttackStat == false:
			WriteBERInt(output, 31)
			WriteValue(output, _AttackStat)
		unless _DefenseStat == false:
			WriteBERInt(output, 32)
			WriteValue(output, _DefenseStat)
		unless _MindStat == false:
			WriteBERInt(output, 33)
			WriteValue(output, _MindStat)
		unless _SpeedStat == false:
			WriteBERInt(output, 34)
			WriteValue(output, _SpeedStat)
		unless _ToHitChange == 100:
			WriteBERInt(output, 35)
			WriteValue(output, _ToHitChange)
		unless _Evade == false:
			WriteBERInt(output, 36)
			WriteValue(output, _Evade)
		unless _Reflect == false:
			WriteBERInt(output, 37)
			WriteValue(output, _Reflect)
		unless _EqLock == false:
			WriteBERInt(output, 38)
			WriteValue(output, _EqLock)
		unless _StatusAnimation == 6:
			WriteBERInt(output, 39)
			WriteValue(output, _StatusAnimation)
		unless _PhysBlock == false:
			WriteBERInt(output, 41)
			WriteValue(output, _PhysBlock)
		unless _PhysCutoff == 0:
			WriteBERInt(output, 42)
			WriteValue(output, _PhysCutoff)
		unless _MagBlock == false:
			WriteBERInt(output, 43)
			WriteValue(output, _MagBlock)
		unless _MagCutoff == 0:
			WriteBERInt(output, 44)
			WriteValue(output, _MagCutoff)
		unless _HpDot == 0:
			WriteBERInt(output, 45)
			WriteValue(output, _HpDot)
		unless _MpDot == 0:
			WriteBERInt(output, 46)
			WriteValue(output, _MpDot)
		unless _CondMessage1 == '':
			WriteBERInt(output, 51)
			WriteValue(output, _CondMessage1)
		unless _CondMessage2 == '':
			WriteBERInt(output, 52)
			WriteValue(output, _CondMessage2)
		unless _CondMessage3 == '':
			WriteBERInt(output, 53)
			WriteValue(output, _CondMessage3)
		unless _CondMessage4 == '':
			WriteBERInt(output, 54)
			WriteValue(output, _CondMessage4)
		unless _CondMessage5 == '':
			WriteBERInt(output, 55)
			WriteValue(output, _CondMessage5)
		unless _HpTurnPercent == 0:
			WriteBERInt(output, 61)
			WriteValue(output, _HpTurnPercent)
		unless _HpTurnFixed == 0:
			WriteBERInt(output, 62)
			WriteValue(output, _HpTurnFixed)
		unless _HpStepCount == 0:
			WriteBERInt(output, 63)
			WriteValue(output, _HpStepCount)
		unless _HpStepQuantity == 0:
			WriteBERInt(output, 64)
			WriteValue(output, _HpStepQuantity)
		unless _MpTurnPercent == 0:
			WriteBERInt(output, 65)
			WriteValue(output, _MpTurnPercent)
		unless _MpTurnFixed == 0:
			WriteBERInt(output, 66)
			WriteValue(output, _MpTurnFixed)
		unless _MpStepCount == 0:
			WriteBERInt(output, 67)
			WriteValue(output, _MpStepCount)
		unless _MpStepQuantity == 0:
			WriteBERInt(output, 68)
			WriteValue(output, _MpStepQuantity)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public LastsOutsideBattle as bool:
		get:
			return _LastsOutsideBattle
		set:
			self._LastsOutsideBattle = value

	public Color as int:
		get:
			return _Color
		set:
			self._Color = value

	public Priority as int:
		get:
			return _Priority
		set:
			self._Priority = value

	public Limitation as int:
		get:
			return _Limitation
		set:
			self._Limitation = value

	public RateA as int:
		get:
			return _RateA
		set:
			self._RateA = value

	public RateB as int:
		get:
			return _RateB
		set:
			self._RateB = value

	public RateC as int:
		get:
			return _RateC
		set:
			self._RateC = value

	public RateD as int:
		get:
			return _RateD
		set:
			self._RateD = value

	public RateE as int:
		get:
			return _RateE
		set:
			self._RateE = value

	public HealTurns as int:
		get:
			return _HealTurns
		set:
			self._HealTurns = value

	public HealPercent as int:
		get:
			return _HealPercent
		set:
			self._HealPercent = value

	public HealShock as int:
		get:
			return _HealShock
		set:
			self._HealShock = value

	public StatEffect as int:
		get:
			return _StatEffect
		set:
			self._StatEffect = value

	public AttackStat as bool:
		get:
			return _AttackStat
		set:
			self._AttackStat = value

	public DefenseStat as bool:
		get:
			return _DefenseStat
		set:
			self._DefenseStat = value

	public MindStat as bool:
		get:
			return _MindStat
		set:
			self._MindStat = value

	public SpeedStat as bool:
		get:
			return _SpeedStat
		set:
			self._SpeedStat = value

	public ToHitChange as int:
		get:
			return _ToHitChange
		set:
			self._ToHitChange = value

	public Evade as bool:
		get:
			return _Evade
		set:
			self._Evade = value

	public Reflect as bool:
		get:
			return _Reflect
		set:
			self._Reflect = value

	public EqLock as bool:
		get:
			return _EqLock
		set:
			self._EqLock = value

	public StatusAnimation as int:
		get:
			return _StatusAnimation
		set:
			self._StatusAnimation = value

	public PhysBlock as bool:
		get:
			return _PhysBlock
		set:
			self._PhysBlock = value

	public PhysCutoff as int:
		get:
			return _PhysCutoff
		set:
			self._PhysCutoff = value

	public MagBlock as bool:
		get:
			return _MagBlock
		set:
			self._MagBlock = value

	public MagCutoff as int:
		get:
			return _MagCutoff
		set:
			self._MagCutoff = value

	public HpDot as int:
		get:
			return _HpDot
		set:
			self._HpDot = value

	public MpDot as int:
		get:
			return _MpDot
		set:
			self._MpDot = value

	public CondMessage1 as string:
		get:
			return _CondMessage1
		set:
			self._CondMessage1 = value

	public CondMessage2 as string:
		get:
			return _CondMessage2
		set:
			self._CondMessage2 = value

	public CondMessage3 as string:
		get:
			return _CondMessage3
		set:
			self._CondMessage3 = value

	public CondMessage4 as string:
		get:
			return _CondMessage4
		set:
			self._CondMessage4 = value

	public CondMessage5 as string:
		get:
			return _CondMessage5
		set:
			self._CondMessage5 = value

	public HpTurnPercent as int:
		get:
			return _HpTurnPercent
		set:
			self._HpTurnPercent = value

	public HpTurnFixed as int:
		get:
			return _HpTurnFixed
		set:
			self._HpTurnFixed = value

	public HpStepCount as int:
		get:
			return _HpStepCount
		set:
			self._HpStepCount = value

	public HpStepQuantity as int:
		get:
			return _HpStepQuantity
		set:
			self._HpStepQuantity = value

	public MpTurnPercent as int:
		get:
			return _MpTurnPercent
		set:
			self._MpTurnPercent = value

	public MpTurnFixed as int:
		get:
			return _MpTurnFixed
		set:
			self._MpTurnFixed = value

	public MpStepCount as int:
		get:
			return _MpStepCount
		set:
			self._MpStepCount = value

	public MpStepQuantity as int:
		get:
			return _MpStepQuantity
		set:
			self._MpStepQuantity = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class EventCommand(object, TURBU.RM2K.Import.LCF.ILCFObject):

	private final _Opcode as int

	private final _Depth as int

	private _Name as string

	private final _Data = System.Collections.Generic.List[of int]()

	def constructor(input as System.IO.Stream):
		_Opcode = BERInt(input)
		_Depth = BERInt(input)
		_Name = LCFString(input)
		for i in range(BERInt(input)):
			_Data.Add(BERInt(input))

	def constructor(opcode as int, *args as (int)):
		_Opcode = opcode
		_Depth = 0
		_Name = ''
		_Data.AddRange(args)

	def Save(output as System.IO.Stream):
		WriteBERInt(output, _Opcode)
		WriteBERInt(output, _Depth)
		WriteValue(output, _Name)
		WriteBERInt(output, _Data.Count)
		for i in _Data:
			WriteBERInt(output, i)

	override def ToString() as string:
		return "(Op: $_Opcode, Depth: $_Depth, Name: '$_Name', Data: $(join(_Data, ', ')))"

	public Opcode as int:
		get:
			return _Opcode

	public Depth as int:
		get:
			return _Depth

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Data:
		get:
			return _Data

class MoveOpcode(object, TURBU.RM2K.Import.LCF.ILCFObject):

	private final _code as int

	private _name as string

	private final _data = System.Collections.Generic.List[of int]()

	def constructor(input as System.IO.Stream):
		_code = input.ReadByte()
		unless _code in range(0, 42):
			raise Boo.Lang.Runtime.AssertionFailedException('_code in range(0, 42)')
		if _code in (32, 33):
			_data.Add(BERInt(input))
		elif _code == 34:
			_name = LCFString(input)
			_data.Add(BERInt(input))
		elif _code == 35:
			_name = LCFString(input)
			for i in range(3):
				_data.Add(BERInt(input))
		else:
			_data = null

	def Save(output as System.IO.Stream):
		output.WriteByte(_code)
		if _code in (34, 35):
			WriteValue(output, _name)
		if _data is not null:
			for value in _data:
				WriteBERInt(output, value)

	public Code as int:
		get:
			return _code

	public Name as string:
		get:
			return _name
		set:
			self._name = value

	public Data:
		get:
			return _data

class MapEvent(ILCFObject):

	private final _ID as int

	private _Name as string

	private _X as int

	private _Y as int

	private _Pages as System.Collections.Generic.List[of EventPage]

	public def constructor(input as System.IO.Stream):
		_Pages = System.Collections.Generic.List[of EventPage]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, MapEvent)
		if current == 2:
			_X = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, MapEvent)
		else:
			_X = LCFInt(0)
		if current == 3:
			_Y = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, MapEvent)
		else:
			_Y = LCFInt(0)
		if current == 5:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Pages.Add(EventPage(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, MapEvent)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Name)
		unless _X == 0:
			WriteBERInt(output, 2)
			WriteValue(output, _X)
		unless _Y == 0:
			WriteBERInt(output, 3)
			WriteValue(output, _Y)
		WriteBERInt(output, 5)
		WriteList(output, _Pages)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public X as int:
		get:
			return _X
		set:
			self._X = value

	public Y as int:
		get:
			return _Y
		set:
			self._Y = value

	public Pages as System.Collections.Generic.List[of EventPage]:
		get:
			return _Pages
		set:
			self._Pages = value

class GlobalEvent(ILCFObject):

	private final _ID as int

	private _Name as string

	private _StartCondition as int

	private _UsesSwitch as bool

	private _Switch as int

	private _CommandCount as int

	private _Script as System.Collections.Generic.List[of EventCommand]

	public def constructor(input as System.IO.Stream):
		_Script = System.Collections.Generic.List[of EventCommand]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, GlobalEvent)
		else:
			_Name = LCFString('')
		if current == 11:
			_StartCondition = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, GlobalEvent)
		if current == 12:
			_UsesSwitch = LCFBool(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, GlobalEvent)
		else:
			_UsesSwitch = LCFBool(false)
		if current == 13:
			_Switch = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, GlobalEvent)
		else:
			_Switch = LCFInt(1)
		if current == 21:
			_CommandCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, GlobalEvent)
		if current == 22:
			check = (BERInt(input) + input.Position)
			while input.Position < check:
				_Script.Add(EventCommand(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, GlobalEvent)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		WriteBERInt(output, 11)
		WriteValue(output, _StartCondition)
		unless _UsesSwitch == false:
			WriteBERInt(output, 12)
			WriteValue(output, _UsesSwitch)
		unless _Switch == 1:
			WriteBERInt(output, 13)
			WriteValue(output, _Switch)
		WriteBERInt(output, 21)
		WriteValue(output, _CommandCount)
		WriteBERInt(output, 22)
		WriteSequence(output, _Script)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public StartCondition as int:
		get:
			return _StartCondition
		set:
			self._StartCondition = value

	public UsesSwitch as bool:
		get:
			return _UsesSwitch
		set:
			self._UsesSwitch = value

	public Switch as int:
		get:
			return _Switch
		set:
			self._Switch = value

	public CommandCount as int:
		get:
			return _CommandCount
		set:
			self._CommandCount = value

	public Script as System.Collections.Generic.List[of EventCommand]:
		get:
			return _Script
		set:
			self._Script = value

class EventPage(ILCFObject):

	private final _ID as int

	private _Conditions as EventConditions

	private _GraphicFile as string

	private _Graphic as int

	private _Direction as int

	private _Frame as int

	private _Transparent as bool

	private _MoveType as int

	private _MoveFrequency as int

	private _StartCondition as int

	private _EventHeight as int

	private _NoOverlap as bool

	private _AnimType as int

	private _MoveSpeed as int

	private _MoveScript as EventMoveBlock

	private _ScriptSize as int

	private _Script as System.Collections.Generic.List[of EventCommand]

	public def constructor(input as System.IO.Stream):
		_Script = System.Collections.Generic.List[of EventCommand]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 2:
			BERInt(input)
			_Conditions = EventConditions(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, EventPage)
		if current == 21:
			_GraphicFile = LCFString(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, EventPage)
		else:
			_GraphicFile = LCFString('')
		if current == 22:
			_Graphic = LCFInt(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, EventPage)
		else:
			_Graphic = LCFInt(0)
		if current == 23:
			_Direction = LCFInt(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, EventPage)
		if current == 24:
			_Frame = LCFInt(input)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, EventPage)
		else:
			_Frame = LCFInt(1)
		if current == 25:
			_Transparent = LCFBool(input)
			current = BERInt(input)
		elif (current < 25) and (current > 0):
			raise LCFUnexpectedSection(current, 25, EventPage)
		if current == 31:
			_MoveType = LCFInt(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, EventPage)
		if current == 32:
			_MoveFrequency = LCFInt(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, EventPage)
		else:
			_MoveFrequency = LCFInt(3)
		if current == 33:
			_StartCondition = LCFInt(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, EventPage)
		if current == 34:
			_EventHeight = LCFInt(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, EventPage)
		if current == 35:
			_NoOverlap = LCFBool(input)
			current = BERInt(input)
		elif (current < 35) and (current > 0):
			raise LCFUnexpectedSection(current, 35, EventPage)
		if current == 36:
			_AnimType = LCFInt(input)
			current = BERInt(input)
		elif (current < 36) and (current > 0):
			raise LCFUnexpectedSection(current, 36, EventPage)
		if current == 37:
			_MoveSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 37) and (current > 0):
			raise LCFUnexpectedSection(current, 37, EventPage)
		else:
			_MoveSpeed = LCFInt(3)
		if current == 41:
			BERInt(input)
			_MoveScript = EventMoveBlock(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, EventPage)
		if current == 51:
			_ScriptSize = LCFInt(input)
			current = BERInt(input)
		elif (current < 51) and (current > 0):
			raise LCFUnexpectedSection(current, 51, EventPage)
		if current == 52:
			check = (BERInt(input) + input.Position)
			while input.Position < check:
				_Script.Add(EventCommand(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 52) and (current > 0):
			raise LCFUnexpectedSection(current, 52, EventPage)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 2)
		WriteValue(output, _Conditions)
		unless _GraphicFile == '':
			WriteBERInt(output, 21)
			WriteValue(output, _GraphicFile)
		unless _Graphic == 0:
			WriteBERInt(output, 22)
			WriteValue(output, _Graphic)
		WriteBERInt(output, 23)
		WriteValue(output, _Direction)
		unless _Frame == 1:
			WriteBERInt(output, 24)
			WriteValue(output, _Frame)
		WriteBERInt(output, 25)
		WriteValue(output, _Transparent)
		WriteBERInt(output, 31)
		WriteValue(output, _MoveType)
		unless _MoveFrequency == 3:
			WriteBERInt(output, 32)
			WriteValue(output, _MoveFrequency)
		WriteBERInt(output, 33)
		WriteValue(output, _StartCondition)
		WriteBERInt(output, 34)
		WriteValue(output, _EventHeight)
		WriteBERInt(output, 35)
		WriteValue(output, _NoOverlap)
		WriteBERInt(output, 36)
		WriteValue(output, _AnimType)
		unless _MoveSpeed == 3:
			WriteBERInt(output, 37)
			WriteValue(output, _MoveSpeed)
		WriteBERInt(output, 41)
		WriteValue(output, _MoveScript)
		WriteBERInt(output, 51)
		WriteValue(output, _ScriptSize)
		WriteBERInt(output, 52)
		WriteSequence(output, _Script)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Conditions as EventConditions:
		get:
			return _Conditions
		set:
			self._Conditions = value

	public GraphicFile as string:
		get:
			return _GraphicFile
		set:
			self._GraphicFile = value

	public Graphic as int:
		get:
			return _Graphic
		set:
			self._Graphic = value

	public Direction as int:
		get:
			return _Direction
		set:
			self._Direction = value

	public Frame as int:
		get:
			return _Frame
		set:
			self._Frame = value

	public Transparent as bool:
		get:
			return _Transparent
		set:
			self._Transparent = value

	public MoveType as int:
		get:
			return _MoveType
		set:
			self._MoveType = value

	public MoveFrequency as int:
		get:
			return _MoveFrequency
		set:
			self._MoveFrequency = value

	public StartCondition as int:
		get:
			return _StartCondition
		set:
			self._StartCondition = value

	public EventHeight as int:
		get:
			return _EventHeight
		set:
			self._EventHeight = value

	public NoOverlap as bool:
		get:
			return _NoOverlap
		set:
			self._NoOverlap = value

	public AnimType as int:
		get:
			return _AnimType
		set:
			self._AnimType = value

	public MoveSpeed as int:
		get:
			return _MoveSpeed
		set:
			self._MoveSpeed = value

	public MoveScript as EventMoveBlock:
		get:
			return _MoveScript
		set:
			self._MoveScript = value

	public ScriptSize as int:
		get:
			return _ScriptSize
		set:
			self._ScriptSize = value

	public Script as System.Collections.Generic.List[of EventCommand]:
		get:
			return _Script
		set:
			self._Script = value

class EventConditions(ILCFObject):

	private _Conditions as int

	private _Switch1 as int

	private _Switch2 as int

	private _Variable as int

	private _VarValue as int

	private _Item as int

	private _Hero as int

	private _Clock as int

	private _Clock2 as int

	private _VarOperator as int

	public def constructor(input as System.IO.Stream):
		current = BERInt(input)
		if current == 1:
			_Conditions = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, EventConditions)
		if current == 2:
			_Switch1 = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, EventConditions)
		else:
			_Switch1 = LCFInt(1)
		if current == 3:
			_Switch2 = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, EventConditions)
		else:
			_Switch2 = LCFInt(1)
		if current == 4:
			_Variable = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, EventConditions)
		else:
			_Variable = LCFInt(1)
		if current == 5:
			_VarValue = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, EventConditions)
		else:
			_VarValue = LCFInt(0)
		if current == 6:
			_Item = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, EventConditions)
		else:
			_Item = LCFInt(1)
		if current == 7:
			_Hero = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, EventConditions)
		if current == 8:
			_Clock = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, EventConditions)
		else:
			_Clock = LCFInt(0)
		if current == 9:
			_Clock2 = LCFInt(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, EventConditions)
		else:
			_Clock2 = LCFInt(0)
		if current == 10:
			_VarOperator = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, EventConditions)
		else:
			_VarOperator = LCFInt(1)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, 1)
		WriteValue(output, _Conditions)
		unless _Switch1 == 1:
			WriteBERInt(output, 2)
			WriteValue(output, _Switch1)
		unless _Switch2 == 1:
			WriteBERInt(output, 3)
			WriteValue(output, _Switch2)
		unless _Variable == 1:
			WriteBERInt(output, 4)
			WriteValue(output, _Variable)
		unless _VarValue == 0:
			WriteBERInt(output, 5)
			WriteValue(output, _VarValue)
		unless _Item == 1:
			WriteBERInt(output, 6)
			WriteValue(output, _Item)
		WriteBERInt(output, 7)
		WriteValue(output, _Hero)
		unless _Clock == 0:
			WriteBERInt(output, 8)
			WriteValue(output, _Clock)
		unless _Clock2 == 0:
			WriteBERInt(output, 9)
			WriteValue(output, _Clock2)
		unless _VarOperator == 1:
			WriteBERInt(output, 10)
			WriteValue(output, _VarOperator)
		output.WriteByte(0)

	public Conditions as int:
		get:
			return _Conditions
		set:
			self._Conditions = value

	public Switch1 as int:
		get:
			return _Switch1
		set:
			self._Switch1 = value

	public Switch2 as int:
		get:
			return _Switch2
		set:
			self._Switch2 = value

	public Variable as int:
		get:
			return _Variable
		set:
			self._Variable = value

	public VarValue as int:
		get:
			return _VarValue
		set:
			self._VarValue = value

	public Item as int:
		get:
			return _Item
		set:
			self._Item = value

	public Hero as int:
		get:
			return _Hero
		set:
			self._Hero = value

	public Clock as int:
		get:
			return _Clock
		set:
			self._Clock = value

	public Clock2 as int:
		get:
			return _Clock2
		set:
			self._Clock2 = value

	public VarOperator as int:
		get:
			return _VarOperator
		set:
			self._VarOperator = value

class EventMoveBlock(ILCFObject):

	private _MoveOrderSize as int

	private _MoveOrder as System.Collections.Generic.List[of MoveOpcode]

	private _Loop as bool

	private _Ignore as bool

	public def constructor(input as System.IO.Stream):
		_MoveOrder = System.Collections.Generic.List[of MoveOpcode]()
		current = BERInt(input)
		if current == 11:
			_MoveOrderSize = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, EventMoveBlock)
		else:
			_MoveOrderSize = LCFInt(0)
		if current == 12:
			check = (BERInt(input) + input.Position)
			while input.Position < check:
				_MoveOrder.Add(MoveOpcode(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, EventMoveBlock)
		if current == 21:
			_Loop = LCFBool(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, EventMoveBlock)
		else:
			_Loop = LCFBool(false)
		if current == 22:
			_Ignore = LCFBool(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, EventMoveBlock)
		else:
			_Ignore = LCFBool(false)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		unless _MoveOrderSize == 0:
			WriteBERInt(output, 11)
			WriteValue(output, _MoveOrderSize)
		WriteBERInt(output, 12)
		WriteSequence(output, _MoveOrder)
		unless _Loop == false:
			WriteBERInt(output, 21)
			WriteValue(output, _Loop)
		unless _Ignore == false:
			WriteBERInt(output, 22)
			WriteValue(output, _Ignore)
		output.WriteByte(0)

	public MoveOrderSize as int:
		get:
			return _MoveOrderSize
		set:
			self._MoveOrderSize = value

	public MoveOrder as System.Collections.Generic.List[of MoveOpcode]:
		get:
			return _MoveOrder
		set:
			self._MoveOrder = value

	public Loop as bool:
		get:
			return _Loop
		set:
			self._Loop = value

	public Ignore as bool:
		get:
			return _Ignore
		set:
			self._Ignore = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMHero(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Class as string

	private _Sprite as string

	private _SpriteIndex as int

	private _Transparent as bool

	private _StartLevel as int

	private _MaxLevel as int

	private _CanCrit as bool

	private _CritRate as int

	private _Portrait as string

	private _PortraitIndex as int

	private _DualWield as bool

	private _StaticEq as bool

	private _ComputerControlled as bool

	private _StrongDefense as bool

	private _StatSection as LCFUshortArray

	private _ExpStandard as int

	private _ExpAddition as int

	private _ExpCorrection as int

	private _InitialEq as LCFUshortArray

	private _UnarmedAnim as int

	private _ClassNum as int

	private _BattleX as int

	private _BattleY as int

	private _BattleChar as int

	private _SkillSection as System.Collections.Generic.List[of HeroSkillRecord]

	private _SkillRenamed as bool

	private _SkillCategoryName as string

	private _ConditionModifiers as LCFByteArray

	private _DTypeModifiers as LCFByteArray

	private _BattleCommands as LCFIntArray

	private final _legacy = System.Collections.Generic.Dictionary[of int, (byte)]()

	public def constructor(input as System.IO.Stream):
		_SkillSection = System.Collections.Generic.List[of HeroSkillRecord]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMHero)
		else:
			_Name = LCFString('')
		if current == 2:
			_Class = LCFString(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMHero)
		else:
			_Class = LCFString('')
		if current == 3:
			_Sprite = LCFString(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMHero)
		else:
			_Sprite = LCFString('')
		if current == 4:
			_SpriteIndex = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMHero)
		else:
			_SpriteIndex = LCFInt(0)
		if current == 5:
			_Transparent = LCFBool(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMHero)
		else:
			_Transparent = LCFBool(false)
		if current == 7:
			_StartLevel = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, RMHero)
		else:
			_StartLevel = LCFInt(1)
		if current == 8:
			_MaxLevel = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, RMHero)
		else:
			_MaxLevel = LCFInt(99)
		if current == 9:
			_CanCrit = LCFBool(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, RMHero)
		else:
			_CanCrit = LCFBool(true)
		if current == 10:
			_CritRate = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, RMHero)
		else:
			_CritRate = LCFInt(30)
		if current == 15:
			_Portrait = LCFString(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMHero)
		else:
			_Portrait = LCFString('')
		if current == 16:
			_PortraitIndex = LCFInt(input)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, RMHero)
		else:
			_PortraitIndex = LCFInt(0)
		if current == 21:
			_DualWield = LCFBool(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMHero)
		else:
			_DualWield = LCFBool(false)
		if current == 22:
			_StaticEq = LCFBool(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMHero)
		else:
			_StaticEq = LCFBool(false)
		if current == 23:
			_ComputerControlled = LCFBool(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, RMHero)
		else:
			_ComputerControlled = LCFBool(false)
		if current == 24:
			_StrongDefense = LCFBool(input)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, RMHero)
		else:
			_StrongDefense = LCFBool(false)
		if current == 31:
			_StatSection = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMHero)
		if current == 41:
			_ExpStandard = LCFInt(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, RMHero)
		else:
			_ExpStandard = LCFInt(30)
		if current == 42:
			_ExpAddition = LCFInt(input)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMHero)
		else:
			_ExpAddition = LCFInt(30)
		if current == 43:
			_ExpCorrection = LCFInt(input)
			current = BERInt(input)
		elif (current < 43) and (current > 0):
			raise LCFUnexpectedSection(current, 43, RMHero)
		else:
			_ExpCorrection = LCFInt(0)
		if current == 51:
			_InitialEq = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 51) and (current > 0):
			raise LCFUnexpectedSection(current, 51, RMHero)
		if current == 56:
			_UnarmedAnim = LCFInt(input)
			current = BERInt(input)
		elif (current < 56) and (current > 0):
			raise LCFUnexpectedSection(current, 56, RMHero)
		else:
			_UnarmedAnim = LCFInt(1)
		if current == 57:
			_ClassNum = LCFInt(input)
			current = BERInt(input)
		elif (current < 57) and (current > 0):
			raise LCFUnexpectedSection(current, 57, RMHero)
		else:
			_ClassNum = LCFInt(0)
		if current == 59:
			_BattleX = LCFInt(input)
			current = BERInt(input)
		elif (current < 59) and (current > 0):
			raise LCFUnexpectedSection(current, 59, RMHero)
		if current == 60:
			_BattleY = LCFInt(input)
			current = BERInt(input)
		elif (current < 60) and (current > 0):
			raise LCFUnexpectedSection(current, 60, RMHero)
		else:
			_BattleY = LCFInt(0)
		if current == 62:
			_BattleChar = LCFInt(input)
			current = BERInt(input)
		elif (current < 62) and (current > 0):
			raise LCFUnexpectedSection(current, 62, RMHero)
		else:
			_BattleChar = LCFInt(0)
		if current == 63:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				SkillSection.Add(HeroSkillRecord(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 63) and (current > 0):
			raise LCFUnexpectedSection(current, 63, RMHero)
		if current == 66:
			_SkillRenamed = LCFBool(input)
			current = BERInt(input)
		elif (current < 66) and (current > 0):
			raise LCFUnexpectedSection(current, 66, RMHero)
		else:
			_SkillRenamed = LCFBool(false)
		if current == 67:
			_SkillCategoryName = LCFString(input)
			current = BERInt(input)
		elif (current < 67) and (current > 0):
			raise LCFUnexpectedSection(current, 67, RMHero)
		else:
			_SkillCategoryName = LCFString('')
		if current == 71:
			_legacy.Add(71, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 71) and (current > 0):
			raise LCFUnexpectedSection(current, 71, RMHero)
		if current == 72:
			_ConditionModifiers = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 72) and (current > 0):
			raise LCFUnexpectedSection(current, 72, RMHero)
		if current == 73:
			_legacy.Add(73, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 73) and (current > 0):
			raise LCFUnexpectedSection(current, 73, RMHero)
		if current == 74:
			_DTypeModifiers = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 74) and (current > 0):
			raise LCFUnexpectedSection(current, 74, RMHero)
		if current == 80:
			_BattleCommands = LCFIntArray(input)
			current = BERInt(input)
		elif (current < 80) and (current > 0):
			raise LCFUnexpectedSection(current, 80, RMHero)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		unless _Class == '':
			WriteBERInt(output, 2)
			WriteValue(output, _Class)
		unless _Sprite == '':
			WriteBERInt(output, 3)
			WriteValue(output, _Sprite)
		unless _SpriteIndex == 0:
			WriteBERInt(output, 4)
			WriteValue(output, _SpriteIndex)
		unless _Transparent == false:
			WriteBERInt(output, 5)
			WriteValue(output, _Transparent)
		unless _StartLevel == 1:
			WriteBERInt(output, 7)
			WriteValue(output, _StartLevel)
		unless _MaxLevel == 99:
			WriteBERInt(output, 8)
			WriteValue(output, _MaxLevel)
		unless _CanCrit == true:
			WriteBERInt(output, 9)
			WriteValue(output, _CanCrit)
		unless _CritRate == 30:
			WriteBERInt(output, 10)
			WriteValue(output, _CritRate)
		unless _Portrait == '':
			WriteBERInt(output, 15)
			WriteValue(output, _Portrait)
		unless _PortraitIndex == 0:
			WriteBERInt(output, 16)
			WriteValue(output, _PortraitIndex)
		unless _DualWield == false:
			WriteBERInt(output, 21)
			WriteValue(output, _DualWield)
		unless _StaticEq == false:
			WriteBERInt(output, 22)
			WriteValue(output, _StaticEq)
		unless _ComputerControlled == false:
			WriteBERInt(output, 23)
			WriteValue(output, _ComputerControlled)
		unless _StrongDefense == false:
			WriteBERInt(output, 24)
			WriteValue(output, _StrongDefense)
		WriteBERInt(output, 31)
		WriteValue(output, _StatSection)
		unless _ExpStandard == 30:
			WriteBERInt(output, 41)
			WriteValue(output, _ExpStandard)
		unless _ExpAddition == 30:
			WriteBERInt(output, 42)
			WriteValue(output, _ExpAddition)
		unless _ExpCorrection == 0:
			WriteBERInt(output, 43)
			WriteValue(output, _ExpCorrection)
		WriteBERInt(output, 51)
		WriteValue(output, _InitialEq)
		unless _UnarmedAnim == 1:
			WriteBERInt(output, 56)
			WriteValue(output, _UnarmedAnim)
		unless _ClassNum == 0:
			WriteBERInt(output, 57)
			WriteValue(output, _ClassNum)
		WriteBERInt(output, 59)
		WriteValue(output, _BattleX)
		unless _BattleY == 0:
			WriteBERInt(output, 60)
			WriteValue(output, _BattleY)
		unless _BattleChar == 0:
			WriteBERInt(output, 62)
			WriteValue(output, _BattleChar)
		WriteBERInt(output, 63)
		WriteList(output, _SkillSection)
		unless _SkillRenamed == false:
			WriteBERInt(output, 66)
			WriteValue(output, _SkillRenamed)
		unless _SkillCategoryName == '':
			WriteBERInt(output, 67)
			WriteValue(output, _SkillCategoryName)
		unless not _legacy.ContainsKey(71):
			WriteBERInt(output, 71)
			WriteByteArray(output, _legacy[71])
		WriteBERInt(output, 72)
		WriteValue(output, _ConditionModifiers)
		unless not _legacy.ContainsKey(73):
			WriteBERInt(output, 73)
			WriteByteArray(output, _legacy[73])
		WriteBERInt(output, 74)
		WriteValue(output, _DTypeModifiers)
		WriteBERInt(output, 80)
		WriteValue(output, _BattleCommands)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Class as string:
		get:
			return _Class
		set:
			self._Class = value

	public Sprite as string:
		get:
			return _Sprite
		set:
			self._Sprite = value

	public SpriteIndex as int:
		get:
			return _SpriteIndex
		set:
			self._SpriteIndex = value

	public Transparent as bool:
		get:
			return _Transparent
		set:
			self._Transparent = value

	public StartLevel as int:
		get:
			return _StartLevel
		set:
			self._StartLevel = value

	public MaxLevel as int:
		get:
			return _MaxLevel
		set:
			self._MaxLevel = value

	public CanCrit as bool:
		get:
			return _CanCrit
		set:
			self._CanCrit = value

	public CritRate as int:
		get:
			return _CritRate
		set:
			self._CritRate = value

	public Portrait as string:
		get:
			return _Portrait
		set:
			self._Portrait = value

	public PortraitIndex as int:
		get:
			return _PortraitIndex
		set:
			self._PortraitIndex = value

	public DualWield as bool:
		get:
			return _DualWield
		set:
			self._DualWield = value

	public StaticEq as bool:
		get:
			return _StaticEq
		set:
			self._StaticEq = value

	public ComputerControlled as bool:
		get:
			return _ComputerControlled
		set:
			self._ComputerControlled = value

	public StrongDefense as bool:
		get:
			return _StrongDefense
		set:
			self._StrongDefense = value

	public StatSection as LCFUshortArray:
		get:
			return _StatSection
		set:
			self._StatSection = value

	public ExpStandard as int:
		get:
			return _ExpStandard
		set:
			self._ExpStandard = value

	public ExpAddition as int:
		get:
			return _ExpAddition
		set:
			self._ExpAddition = value

	public ExpCorrection as int:
		get:
			return _ExpCorrection
		set:
			self._ExpCorrection = value

	public InitialEq as LCFUshortArray:
		get:
			return _InitialEq
		set:
			self._InitialEq = value

	public UnarmedAnim as int:
		get:
			return _UnarmedAnim
		set:
			self._UnarmedAnim = value

	public ClassNum as int:
		get:
			return _ClassNum
		set:
			self._ClassNum = value

	public BattleX as int:
		get:
			return _BattleX
		set:
			self._BattleX = value

	public BattleY as int:
		get:
			return _BattleY
		set:
			self._BattleY = value

	public BattleChar as int:
		get:
			return _BattleChar
		set:
			self._BattleChar = value

	public SkillSection as System.Collections.Generic.List[of HeroSkillRecord]:
		get:
			return _SkillSection
		set:
			self._SkillSection = value

	public SkillRenamed as bool:
		get:
			return _SkillRenamed
		set:
			self._SkillRenamed = value

	public SkillCategoryName as string:
		get:
			return _SkillCategoryName
		set:
			self._SkillCategoryName = value

	public ConditionModifiers as LCFByteArray:
		get:
			return _ConditionModifiers
		set:
			self._ConditionModifiers = value

	public DTypeModifiers as LCFByteArray:
		get:
			return _DTypeModifiers
		set:
			self._DTypeModifiers = value

	public BattleCommands as LCFIntArray:
		get:
			return _BattleCommands
		set:
			self._BattleCommands = value

	public Legacy:
		get:
			return _legacy

class HeroSkillRecord(ILCFObject):

	private final _ID as int

	private _Level as int

	private _Skill as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Level = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, HeroSkillRecord)
		else:
			_Level = LCFInt(1)
		if current == 2:
			_Skill = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, HeroSkillRecord)
		else:
			_Skill = LCFInt(1)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Level == 1:
			WriteBERInt(output, 1)
			WriteValue(output, _Level)
		unless _Skill == 1:
			WriteBERInt(output, 2)
			WriteValue(output, _Skill)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Level as int:
		get:
			return _Level
		set:
			self._Level = value

	public Skill as int:
		get:
			return _Skill
		set:
			self._Skill = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMItem(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Desc as string

	private _ItemType as int

	private _Price as int

	private _Uses as int

	private _AttackModify as int

	private _DefenseModify as int

	private _MindModify as int

	private _SpeedModify as int

	private _TwoHanded as bool

	private _MPCost as int

	private _ToHit as int

	private _CritChance as int

	private _BattleAnim as int

	private _Preemptive as bool

	private _AttackTwice as bool

	private _AreaHit as bool

	private _IgnoreEvasion as bool

	private _PreventCrits as bool

	private _BoostEvade as bool

	private _HalfMP as bool

	private _NoTerrainDamage as bool

	private _Cursed as bool

	private _AreaMedicine as bool

	private _HPPercent as int

	private _HPHeal as int

	private _MPPercent as int

	private _MPHeal as int

	private _OutOfBattleOnly as bool

	private _DeadHeroesOnly as bool

	private _PermHPGain as int

	private _PermMPGain as int

	private _PermAttackGain as int

	private _PermDefenseGain as int

	private _PermMindGain as int

	private _PermSpeedGain as int

	private _DisplaySkillMessage as bool

	private _SkillToLearn as int

	private _Switch as int

	private _OnField as bool

	private _InBattle as bool

	private _UsableCount as int

	private _UsableBy as LCFBoolArray

	private _ConditionCount as int

	private _Conditions as LCFBoolArray

	private _AttributeCount as int

	private _Attributes as LCFBoolArray

	private _ConditionInflictChance as int

	private _InflictReversed as bool

	private _WeaponAnimation as int

	private _AnimData as System.Collections.Generic.List[of ItemAnimData]

	private _InvokeSkill as bool

	private _UsableClassCount as int

	private _UsableByClass as LCFBoolArray

	private _RangedTrajectory as int

	private _RangedTarget as int

	public def constructor(input as System.IO.Stream):
		_AnimData = System.Collections.Generic.List[of ItemAnimData]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMItem)
		else:
			_Name = LCFString('')
		if current == 2:
			_Desc = LCFString(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMItem)
		else:
			_Desc = LCFString('')
		if current == 3:
			_ItemType = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMItem)
		if current == 5:
			_Price = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMItem)
		else:
			_Price = LCFInt(0)
		if current == 6:
			_Uses = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, RMItem)
		else:
			_Uses = LCFInt(1)
		if current == 11:
			_AttackModify = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMItem)
		else:
			_AttackModify = LCFInt(0)
		if current == 12:
			_DefenseModify = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMItem)
		else:
			_DefenseModify = LCFInt(0)
		if current == 13:
			_MindModify = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, RMItem)
		else:
			_MindModify = LCFInt(0)
		if current == 14:
			_SpeedModify = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, RMItem)
		else:
			_SpeedModify = LCFInt(0)
		if current == 15:
			_TwoHanded = LCFBool(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMItem)
		else:
			_TwoHanded = LCFBool(false)
		if current == 16:
			_MPCost = LCFInt(input)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, RMItem)
		else:
			_MPCost = LCFInt(0)
		if current == 17:
			_ToHit = LCFInt(input)
			current = BERInt(input)
		elif (current < 17) and (current > 0):
			raise LCFUnexpectedSection(current, 17, RMItem)
		else:
			_ToHit = LCFInt(90)
		if current == 18:
			_CritChance = LCFInt(input)
			current = BERInt(input)
		elif (current < 18) and (current > 0):
			raise LCFUnexpectedSection(current, 18, RMItem)
		else:
			_CritChance = LCFInt(0)
		if current == 20:
			_BattleAnim = LCFInt(input)
			current = BERInt(input)
		elif (current < 20) and (current > 0):
			raise LCFUnexpectedSection(current, 20, RMItem)
		else:
			_BattleAnim = LCFInt(1)
		if current == 21:
			_Preemptive = LCFBool(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMItem)
		else:
			_Preemptive = LCFBool(false)
		if current == 22:
			_AttackTwice = LCFBool(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMItem)
		else:
			_AttackTwice = LCFBool(false)
		if current == 23:
			_AreaHit = LCFBool(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, RMItem)
		else:
			_AreaHit = LCFBool(false)
		if current == 24:
			_IgnoreEvasion = LCFBool(input)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, RMItem)
		else:
			_IgnoreEvasion = LCFBool(false)
		if current == 25:
			_PreventCrits = LCFBool(input)
			current = BERInt(input)
		elif (current < 25) and (current > 0):
			raise LCFUnexpectedSection(current, 25, RMItem)
		else:
			_PreventCrits = LCFBool(false)
		if current == 26:
			_BoostEvade = LCFBool(input)
			current = BERInt(input)
		elif (current < 26) and (current > 0):
			raise LCFUnexpectedSection(current, 26, RMItem)
		else:
			_BoostEvade = LCFBool(false)
		if current == 27:
			_HalfMP = LCFBool(input)
			current = BERInt(input)
		elif (current < 27) and (current > 0):
			raise LCFUnexpectedSection(current, 27, RMItem)
		else:
			_HalfMP = LCFBool(false)
		if current == 28:
			_NoTerrainDamage = LCFBool(input)
			current = BERInt(input)
		elif (current < 28) and (current > 0):
			raise LCFUnexpectedSection(current, 28, RMItem)
		else:
			_NoTerrainDamage = LCFBool(false)
		if current == 29:
			_Cursed = LCFBool(input)
			current = BERInt(input)
		elif (current < 29) and (current > 0):
			raise LCFUnexpectedSection(current, 29, RMItem)
		else:
			_Cursed = LCFBool(false)
		if current == 31:
			_AreaMedicine = LCFBool(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMItem)
		if current == 32:
			_HPPercent = LCFInt(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, RMItem)
		else:
			_HPPercent = LCFInt(0)
		if current == 33:
			_HPHeal = LCFInt(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, RMItem)
		else:
			_HPHeal = LCFInt(0)
		if current == 34:
			_MPPercent = LCFInt(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, RMItem)
		else:
			_MPPercent = LCFInt(0)
		if current == 35:
			_MPHeal = LCFInt(input)
			current = BERInt(input)
		elif (current < 35) and (current > 0):
			raise LCFUnexpectedSection(current, 35, RMItem)
		else:
			_MPHeal = LCFInt(0)
		if current == 37:
			_OutOfBattleOnly = LCFBool(input)
			current = BERInt(input)
		elif (current < 37) and (current > 0):
			raise LCFUnexpectedSection(current, 37, RMItem)
		else:
			_OutOfBattleOnly = LCFBool(false)
		if current == 38:
			_DeadHeroesOnly = LCFBool(input)
			current = BERInt(input)
		elif (current < 38) and (current > 0):
			raise LCFUnexpectedSection(current, 38, RMItem)
		else:
			_DeadHeroesOnly = LCFBool(false)
		if current == 41:
			_PermHPGain = LCFInt(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, RMItem)
		else:
			_PermHPGain = LCFInt(0)
		if current == 42:
			_PermMPGain = LCFInt(input)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMItem)
		else:
			_PermMPGain = LCFInt(0)
		if current == 43:
			_PermAttackGain = LCFInt(input)
			current = BERInt(input)
		elif (current < 43) and (current > 0):
			raise LCFUnexpectedSection(current, 43, RMItem)
		else:
			_PermAttackGain = LCFInt(0)
		if current == 44:
			_PermDefenseGain = LCFInt(input)
			current = BERInt(input)
		elif (current < 44) and (current > 0):
			raise LCFUnexpectedSection(current, 44, RMItem)
		else:
			_PermDefenseGain = LCFInt(0)
		if current == 45:
			_PermMindGain = LCFInt(input)
			current = BERInt(input)
		elif (current < 45) and (current > 0):
			raise LCFUnexpectedSection(current, 45, RMItem)
		else:
			_PermMindGain = LCFInt(0)
		if current == 46:
			_PermSpeedGain = LCFInt(input)
			current = BERInt(input)
		elif (current < 46) and (current > 0):
			raise LCFUnexpectedSection(current, 46, RMItem)
		else:
			_PermSpeedGain = LCFInt(0)
		if current == 51:
			_DisplaySkillMessage = LCFBool(input)
			current = BERInt(input)
		elif (current < 51) and (current > 0):
			raise LCFUnexpectedSection(current, 51, RMItem)
		if current == 53:
			_SkillToLearn = LCFInt(input)
			current = BERInt(input)
		elif (current < 53) and (current > 0):
			raise LCFUnexpectedSection(current, 53, RMItem)
		else:
			_SkillToLearn = LCFInt(0)
		if current == 55:
			_Switch = LCFInt(input)
			current = BERInt(input)
		elif (current < 55) and (current > 0):
			raise LCFUnexpectedSection(current, 55, RMItem)
		else:
			_Switch = LCFInt(0)
		if current == 57:
			_OnField = LCFBool(input)
			current = BERInt(input)
		elif (current < 57) and (current > 0):
			raise LCFUnexpectedSection(current, 57, RMItem)
		else:
			_OnField = LCFBool(false)
		if current == 58:
			_InBattle = LCFBool(input)
			current = BERInt(input)
		elif (current < 58) and (current > 0):
			raise LCFUnexpectedSection(current, 58, RMItem)
		else:
			_InBattle = LCFBool(false)
		if current == 61:
			_UsableCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 61) and (current > 0):
			raise LCFUnexpectedSection(current, 61, RMItem)
		else:
			_UsableCount = LCFInt(0)
		if current == 62:
			_UsableBy = LCFBoolArray(input)
			current = BERInt(input)
		elif (current < 62) and (current > 0):
			raise LCFUnexpectedSection(current, 62, RMItem)
		if current == 63:
			_ConditionCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 63) and (current > 0):
			raise LCFUnexpectedSection(current, 63, RMItem)
		else:
			_ConditionCount = LCFInt(0)
		if current == 64:
			_Conditions = LCFBoolArray(input)
			current = BERInt(input)
		elif (current < 64) and (current > 0):
			raise LCFUnexpectedSection(current, 64, RMItem)
		if current == 65:
			_AttributeCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 65) and (current > 0):
			raise LCFUnexpectedSection(current, 65, RMItem)
		else:
			_AttributeCount = LCFInt(0)
		if current == 66:
			_Attributes = LCFBoolArray(input)
			current = BERInt(input)
		elif (current < 66) and (current > 0):
			raise LCFUnexpectedSection(current, 66, RMItem)
		if current == 67:
			_ConditionInflictChance = LCFInt(input)
			current = BERInt(input)
		elif (current < 67) and (current > 0):
			raise LCFUnexpectedSection(current, 67, RMItem)
		else:
			_ConditionInflictChance = LCFInt(0)
		if current == 68:
			_InflictReversed = LCFBool(input)
			current = BERInt(input)
		elif (current < 68) and (current > 0):
			raise LCFUnexpectedSection(current, 68, RMItem)
		else:
			_InflictReversed = LCFBool(false)
		if current == 69:
			_WeaponAnimation = LCFInt(input)
			current = BERInt(input)
		elif (current < 69) and (current > 0):
			raise LCFUnexpectedSection(current, 69, RMItem)
		else:
			_WeaponAnimation = LCFInt(1)
		if current == 70:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				AnimData.Add(ItemAnimData(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 70) and (current > 0):
			raise LCFUnexpectedSection(current, 70, RMItem)
		if current == 71:
			_InvokeSkill = LCFBool(input)
			current = BERInt(input)
		elif (current < 71) and (current > 0):
			raise LCFUnexpectedSection(current, 71, RMItem)
		else:
			_InvokeSkill = LCFBool(false)
		if current == 72:
			_UsableClassCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 72) and (current > 0):
			raise LCFUnexpectedSection(current, 72, RMItem)
		else:
			_UsableClassCount = LCFInt(0)
		if current == 73:
			_UsableByClass = LCFBoolArray(input)
			current = BERInt(input)
		elif (current < 73) and (current > 0):
			raise LCFUnexpectedSection(current, 73, RMItem)
		if current == 75:
			_RangedTrajectory = LCFInt(input)
			current = BERInt(input)
		elif (current < 75) and (current > 0):
			raise LCFUnexpectedSection(current, 75, RMItem)
		else:
			_RangedTrajectory = LCFInt(0)
		if current == 76:
			_RangedTarget = LCFInt(input)
			current = BERInt(input)
		elif (current < 76) and (current > 0):
			raise LCFUnexpectedSection(current, 76, RMItem)
		else:
			_RangedTarget = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		unless _Desc == '':
			WriteBERInt(output, 2)
			WriteValue(output, _Desc)
		WriteBERInt(output, 3)
		WriteValue(output, _ItemType)
		unless _Price == 0:
			WriteBERInt(output, 5)
			WriteValue(output, _Price)
		unless _Uses == 1:
			WriteBERInt(output, 6)
			WriteValue(output, _Uses)
		unless _AttackModify == 0:
			WriteBERInt(output, 11)
			WriteValue(output, _AttackModify)
		unless _DefenseModify == 0:
			WriteBERInt(output, 12)
			WriteValue(output, _DefenseModify)
		unless _MindModify == 0:
			WriteBERInt(output, 13)
			WriteValue(output, _MindModify)
		unless _SpeedModify == 0:
			WriteBERInt(output, 14)
			WriteValue(output, _SpeedModify)
		unless _TwoHanded == false:
			WriteBERInt(output, 15)
			WriteValue(output, _TwoHanded)
		unless _MPCost == 0:
			WriteBERInt(output, 16)
			WriteValue(output, _MPCost)
		unless _ToHit == 90:
			WriteBERInt(output, 17)
			WriteValue(output, _ToHit)
		unless _CritChance == 0:
			WriteBERInt(output, 18)
			WriteValue(output, _CritChance)
		unless _BattleAnim == 1:
			WriteBERInt(output, 20)
			WriteValue(output, _BattleAnim)
		unless _Preemptive == false:
			WriteBERInt(output, 21)
			WriteValue(output, _Preemptive)
		unless _AttackTwice == false:
			WriteBERInt(output, 22)
			WriteValue(output, _AttackTwice)
		unless _AreaHit == false:
			WriteBERInt(output, 23)
			WriteValue(output, _AreaHit)
		unless _IgnoreEvasion == false:
			WriteBERInt(output, 24)
			WriteValue(output, _IgnoreEvasion)
		unless _PreventCrits == false:
			WriteBERInt(output, 25)
			WriteValue(output, _PreventCrits)
		unless _BoostEvade == false:
			WriteBERInt(output, 26)
			WriteValue(output, _BoostEvade)
		unless _HalfMP == false:
			WriteBERInt(output, 27)
			WriteValue(output, _HalfMP)
		unless _NoTerrainDamage == false:
			WriteBERInt(output, 28)
			WriteValue(output, _NoTerrainDamage)
		unless _Cursed == false:
			WriteBERInt(output, 29)
			WriteValue(output, _Cursed)
		WriteBERInt(output, 31)
		WriteValue(output, _AreaMedicine)
		unless _HPPercent == 0:
			WriteBERInt(output, 32)
			WriteValue(output, _HPPercent)
		unless _HPHeal == 0:
			WriteBERInt(output, 33)
			WriteValue(output, _HPHeal)
		unless _MPPercent == 0:
			WriteBERInt(output, 34)
			WriteValue(output, _MPPercent)
		unless _MPHeal == 0:
			WriteBERInt(output, 35)
			WriteValue(output, _MPHeal)
		unless _OutOfBattleOnly == false:
			WriteBERInt(output, 37)
			WriteValue(output, _OutOfBattleOnly)
		unless _DeadHeroesOnly == false:
			WriteBERInt(output, 38)
			WriteValue(output, _DeadHeroesOnly)
		unless _PermHPGain == 0:
			WriteBERInt(output, 41)
			WriteValue(output, _PermHPGain)
		unless _PermMPGain == 0:
			WriteBERInt(output, 42)
			WriteValue(output, _PermMPGain)
		unless _PermAttackGain == 0:
			WriteBERInt(output, 43)
			WriteValue(output, _PermAttackGain)
		unless _PermDefenseGain == 0:
			WriteBERInt(output, 44)
			WriteValue(output, _PermDefenseGain)
		unless _PermMindGain == 0:
			WriteBERInt(output, 45)
			WriteValue(output, _PermMindGain)
		unless _PermSpeedGain == 0:
			WriteBERInt(output, 46)
			WriteValue(output, _PermSpeedGain)
		WriteBERInt(output, 51)
		WriteValue(output, _DisplaySkillMessage)
		unless _SkillToLearn == 0:
			WriteBERInt(output, 53)
			WriteValue(output, _SkillToLearn)
		unless _Switch == 0:
			WriteBERInt(output, 55)
			WriteValue(output, _Switch)
		unless _OnField == false:
			WriteBERInt(output, 57)
			WriteValue(output, _OnField)
		unless _InBattle == false:
			WriteBERInt(output, 58)
			WriteValue(output, _InBattle)
		unless _UsableCount == 0:
			WriteBERInt(output, 61)
			WriteValue(output, _UsableCount)
		WriteBERInt(output, 62)
		WriteValue(output, _UsableBy)
		unless _ConditionCount == 0:
			WriteBERInt(output, 63)
			WriteValue(output, _ConditionCount)
		WriteBERInt(output, 64)
		WriteValue(output, _Conditions)
		unless _AttributeCount == 0:
			WriteBERInt(output, 65)
			WriteValue(output, _AttributeCount)
		WriteBERInt(output, 66)
		WriteValue(output, _Attributes)
		unless _ConditionInflictChance == 0:
			WriteBERInt(output, 67)
			WriteValue(output, _ConditionInflictChance)
		unless _InflictReversed == false:
			WriteBERInt(output, 68)
			WriteValue(output, _InflictReversed)
		unless _WeaponAnimation == 1:
			WriteBERInt(output, 69)
			WriteValue(output, _WeaponAnimation)
		WriteBERInt(output, 70)
		WriteList(output, _AnimData)
		unless _InvokeSkill == false:
			WriteBERInt(output, 71)
			WriteValue(output, _InvokeSkill)
		unless _UsableClassCount == 0:
			WriteBERInt(output, 72)
			WriteValue(output, _UsableClassCount)
		WriteBERInt(output, 73)
		WriteValue(output, _UsableByClass)
		unless _RangedTrajectory == 0:
			WriteBERInt(output, 75)
			WriteValue(output, _RangedTrajectory)
		unless _RangedTarget == 0:
			WriteBERInt(output, 76)
			WriteValue(output, _RangedTarget)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Desc as string:
		get:
			return _Desc
		set:
			self._Desc = value

	public ItemType as int:
		get:
			return _ItemType
		set:
			self._ItemType = value

	public Price as int:
		get:
			return _Price
		set:
			self._Price = value

	public Uses as int:
		get:
			return _Uses
		set:
			self._Uses = value

	public AttackModify as int:
		get:
			return _AttackModify
		set:
			self._AttackModify = value

	public DefenseModify as int:
		get:
			return _DefenseModify
		set:
			self._DefenseModify = value

	public MindModify as int:
		get:
			return _MindModify
		set:
			self._MindModify = value

	public SpeedModify as int:
		get:
			return _SpeedModify
		set:
			self._SpeedModify = value

	public TwoHanded as bool:
		get:
			return _TwoHanded
		set:
			self._TwoHanded = value

	public MPCost as int:
		get:
			return _MPCost
		set:
			self._MPCost = value

	public ToHit as int:
		get:
			return _ToHit
		set:
			self._ToHit = value

	public CritChance as int:
		get:
			return _CritChance
		set:
			self._CritChance = value

	public BattleAnim as int:
		get:
			return _BattleAnim
		set:
			self._BattleAnim = value

	public Preemptive as bool:
		get:
			return _Preemptive
		set:
			self._Preemptive = value

	public AttackTwice as bool:
		get:
			return _AttackTwice
		set:
			self._AttackTwice = value

	public AreaHit as bool:
		get:
			return _AreaHit
		set:
			self._AreaHit = value

	public IgnoreEvasion as bool:
		get:
			return _IgnoreEvasion
		set:
			self._IgnoreEvasion = value

	public PreventCrits as bool:
		get:
			return _PreventCrits
		set:
			self._PreventCrits = value

	public BoostEvade as bool:
		get:
			return _BoostEvade
		set:
			self._BoostEvade = value

	public HalfMP as bool:
		get:
			return _HalfMP
		set:
			self._HalfMP = value

	public NoTerrainDamage as bool:
		get:
			return _NoTerrainDamage
		set:
			self._NoTerrainDamage = value

	public Cursed as bool:
		get:
			return _Cursed
		set:
			self._Cursed = value

	public AreaMedicine as bool:
		get:
			return _AreaMedicine
		set:
			self._AreaMedicine = value

	public HPPercent as int:
		get:
			return _HPPercent
		set:
			self._HPPercent = value

	public HPHeal as int:
		get:
			return _HPHeal
		set:
			self._HPHeal = value

	public MPPercent as int:
		get:
			return _MPPercent
		set:
			self._MPPercent = value

	public MPHeal as int:
		get:
			return _MPHeal
		set:
			self._MPHeal = value

	public OutOfBattleOnly as bool:
		get:
			return _OutOfBattleOnly
		set:
			self._OutOfBattleOnly = value

	public DeadHeroesOnly as bool:
		get:
			return _DeadHeroesOnly
		set:
			self._DeadHeroesOnly = value

	public PermHPGain as int:
		get:
			return _PermHPGain
		set:
			self._PermHPGain = value

	public PermMPGain as int:
		get:
			return _PermMPGain
		set:
			self._PermMPGain = value

	public PermAttackGain as int:
		get:
			return _PermAttackGain
		set:
			self._PermAttackGain = value

	public PermDefenseGain as int:
		get:
			return _PermDefenseGain
		set:
			self._PermDefenseGain = value

	public PermMindGain as int:
		get:
			return _PermMindGain
		set:
			self._PermMindGain = value

	public PermSpeedGain as int:
		get:
			return _PermSpeedGain
		set:
			self._PermSpeedGain = value

	public DisplaySkillMessage as bool:
		get:
			return _DisplaySkillMessage
		set:
			self._DisplaySkillMessage = value

	public SkillToLearn as int:
		get:
			return _SkillToLearn
		set:
			self._SkillToLearn = value

	public Switch as int:
		get:
			return _Switch
		set:
			self._Switch = value

	public OnField as bool:
		get:
			return _OnField
		set:
			self._OnField = value

	public InBattle as bool:
		get:
			return _InBattle
		set:
			self._InBattle = value

	public UsableCount as int:
		get:
			return _UsableCount
		set:
			self._UsableCount = value

	public UsableBy as LCFBoolArray:
		get:
			return _UsableBy
		set:
			self._UsableBy = value

	public ConditionCount as int:
		get:
			return _ConditionCount
		set:
			self._ConditionCount = value

	public Conditions as LCFBoolArray:
		get:
			return _Conditions
		set:
			self._Conditions = value

	public AttributeCount as int:
		get:
			return _AttributeCount
		set:
			self._AttributeCount = value

	public Attributes as LCFBoolArray:
		get:
			return _Attributes
		set:
			self._Attributes = value

	public ConditionInflictChance as int:
		get:
			return _ConditionInflictChance
		set:
			self._ConditionInflictChance = value

	public InflictReversed as bool:
		get:
			return _InflictReversed
		set:
			self._InflictReversed = value

	public WeaponAnimation as int:
		get:
			return _WeaponAnimation
		set:
			self._WeaponAnimation = value

	public AnimData as System.Collections.Generic.List[of ItemAnimData]:
		get:
			return _AnimData
		set:
			self._AnimData = value

	public InvokeSkill as bool:
		get:
			return _InvokeSkill
		set:
			self._InvokeSkill = value

	public UsableClassCount as int:
		get:
			return _UsableClassCount
		set:
			self._UsableClassCount = value

	public UsableByClass as LCFBoolArray:
		get:
			return _UsableByClass
		set:
			self._UsableByClass = value

	public RangedTrajectory as int:
		get:
			return _RangedTrajectory
		set:
			self._RangedTrajectory = value

	public RangedTarget as int:
		get:
			return _RangedTarget
		set:
			self._RangedTarget = value

class ItemAnimData(ILCFObject):

	private final _ID as int

	private _AnimType as int

	private _WhichWeapon as int

	private _MovementMode as int

	private _Afterimage as bool

	private _AttackNum as int

	private _Ranged as bool

	private _RangedProjectile as int

	private _RangedSpeed as int

	private _BattleAnim as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 3:
			_AnimType = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, ItemAnimData)
		else:
			_AnimType = LCFInt(0)
		if current == 4:
			_WhichWeapon = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, ItemAnimData)
		else:
			_WhichWeapon = LCFInt(0)
		if current == 5:
			_MovementMode = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, ItemAnimData)
		else:
			_MovementMode = LCFInt(0)
		if current == 6:
			_Afterimage = LCFBool(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, ItemAnimData)
		else:
			_Afterimage = LCFBool(false)
		if current == 7:
			_AttackNum = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, ItemAnimData)
		else:
			_AttackNum = LCFInt(0)
		if current == 8:
			_Ranged = LCFBool(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, ItemAnimData)
		else:
			_Ranged = LCFBool(false)
		if current == 9:
			_RangedProjectile = LCFInt(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, ItemAnimData)
		else:
			_RangedProjectile = LCFInt(0)
		if current == 12:
			_RangedSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, ItemAnimData)
		else:
			_RangedSpeed = LCFInt(0)
		if current == 13:
			_BattleAnim = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, ItemAnimData)
		else:
			_BattleAnim = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _AnimType == 0:
			WriteBERInt(output, 3)
			WriteValue(output, _AnimType)
		unless _WhichWeapon == 0:
			WriteBERInt(output, 4)
			WriteValue(output, _WhichWeapon)
		unless _MovementMode == 0:
			WriteBERInt(output, 5)
			WriteValue(output, _MovementMode)
		unless _Afterimage == false:
			WriteBERInt(output, 6)
			WriteValue(output, _Afterimage)
		unless _AttackNum == 0:
			WriteBERInt(output, 7)
			WriteValue(output, _AttackNum)
		unless _Ranged == false:
			WriteBERInt(output, 8)
			WriteValue(output, _Ranged)
		unless _RangedProjectile == 0:
			WriteBERInt(output, 9)
			WriteValue(output, _RangedProjectile)
		unless _RangedSpeed == 0:
			WriteBERInt(output, 12)
			WriteValue(output, _RangedSpeed)
		unless _BattleAnim == 0:
			WriteBERInt(output, 13)
			WriteValue(output, _BattleAnim)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public AnimType as int:
		get:
			return _AnimType
		set:
			self._AnimType = value

	public WhichWeapon as int:
		get:
			return _WhichWeapon
		set:
			self._WhichWeapon = value

	public MovementMode as int:
		get:
			return _MovementMode
		set:
			self._MovementMode = value

	public Afterimage as bool:
		get:
			return _Afterimage
		set:
			self._Afterimage = value

	public AttackNum as int:
		get:
			return _AttackNum
		set:
			self._AttackNum = value

	public Ranged as bool:
		get:
			return _Ranged
		set:
			self._Ranged = value

	public RangedProjectile as int:
		get:
			return _RangedProjectile
		set:
			self._RangedProjectile = value

	public RangedSpeed as int:
		get:
			return _RangedSpeed
		set:
			self._RangedSpeed = value

	public BattleAnim as int:
		get:
			return _BattleAnim
		set:
			self._BattleAnim = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMMonster(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Filename as string

	private _ColorShift as int

	private _HP as int

	private _MP as int

	private _Attack as int

	private _Defense as int

	private _Mind as int

	private _Speed as int

	private _Transparent as bool

	private _Exp as int

	private _Money as int

	private _Item as int

	private _ItemChance as int

	private _CanCrit as bool

	private _CritChance as int

	private _OftenMiss as bool

	private _Flying as bool

	private _ConditionCount as int

	private _ConditionModifiers as LCFByteArray

	private _DTypeCount as int

	private _DTypeModifiers as LCFByteArray

	private _Behavior as System.Collections.Generic.List[of MonsterBehavior]

	public def constructor(input as System.IO.Stream):
		_Behavior = System.Collections.Generic.List[of MonsterBehavior]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMMonster)
		else:
			_Name = LCFString('')
		if current == 2:
			_Filename = LCFString(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMMonster)
		else:
			_Filename = LCFString('')
		if current == 3:
			_ColorShift = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMMonster)
		else:
			_ColorShift = LCFInt(0)
		if current == 4:
			_HP = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMMonster)
		else:
			_HP = LCFInt(10)
		if current == 5:
			_MP = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMMonster)
		else:
			_MP = LCFInt(10)
		if current == 6:
			_Attack = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, RMMonster)
		else:
			_Attack = LCFInt(10)
		if current == 7:
			_Defense = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, RMMonster)
		else:
			_Defense = LCFInt(10)
		if current == 8:
			_Mind = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, RMMonster)
		else:
			_Mind = LCFInt(10)
		if current == 9:
			_Speed = LCFInt(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, RMMonster)
		else:
			_Speed = LCFInt(10)
		if current == 10:
			_Transparent = LCFBool(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, RMMonster)
		else:
			_Transparent = LCFBool(false)
		if current == 11:
			_Exp = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMMonster)
		else:
			_Exp = LCFInt(0)
		if current == 12:
			_Money = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMMonster)
		else:
			_Money = LCFInt(0)
		if current == 13:
			_Item = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, RMMonster)
		else:
			_Item = LCFInt(0)
		if current == 14:
			_ItemChance = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, RMMonster)
		else:
			_ItemChance = LCFInt(100)
		if current == 21:
			_CanCrit = LCFBool(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMMonster)
		else:
			_CanCrit = LCFBool(false)
		if current == 22:
			_CritChance = LCFInt(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMMonster)
		else:
			_CritChance = LCFInt(30)
		if current == 26:
			_OftenMiss = LCFBool(input)
			current = BERInt(input)
		elif (current < 26) and (current > 0):
			raise LCFUnexpectedSection(current, 26, RMMonster)
		else:
			_OftenMiss = LCFBool(false)
		if current == 28:
			_Flying = LCFBool(input)
			current = BERInt(input)
		elif (current < 28) and (current > 0):
			raise LCFUnexpectedSection(current, 28, RMMonster)
		else:
			_Flying = LCFBool(false)
		if current == 31:
			_ConditionCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMMonster)
		else:
			_ConditionCount = LCFInt(0)
		if current == 32:
			_ConditionModifiers = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, RMMonster)
		if current == 33:
			_DTypeCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, RMMonster)
		else:
			_DTypeCount = LCFInt(0)
		if current == 34:
			_DTypeModifiers = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, RMMonster)
		if current == 42:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Behavior.Add(MonsterBehavior(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMMonster)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		unless _Filename == '':
			WriteBERInt(output, 2)
			WriteValue(output, _Filename)
		unless _ColorShift == 0:
			WriteBERInt(output, 3)
			WriteValue(output, _ColorShift)
		unless _HP == 10:
			WriteBERInt(output, 4)
			WriteValue(output, _HP)
		unless _MP == 10:
			WriteBERInt(output, 5)
			WriteValue(output, _MP)
		unless _Attack == 10:
			WriteBERInt(output, 6)
			WriteValue(output, _Attack)
		unless _Defense == 10:
			WriteBERInt(output, 7)
			WriteValue(output, _Defense)
		unless _Mind == 10:
			WriteBERInt(output, 8)
			WriteValue(output, _Mind)
		unless _Speed == 10:
			WriteBERInt(output, 9)
			WriteValue(output, _Speed)
		unless _Transparent == false:
			WriteBERInt(output, 10)
			WriteValue(output, _Transparent)
		unless _Exp == 0:
			WriteBERInt(output, 11)
			WriteValue(output, _Exp)
		unless _Money == 0:
			WriteBERInt(output, 12)
			WriteValue(output, _Money)
		unless _Item == 0:
			WriteBERInt(output, 13)
			WriteValue(output, _Item)
		unless _ItemChance == 100:
			WriteBERInt(output, 14)
			WriteValue(output, _ItemChance)
		unless _CanCrit == false:
			WriteBERInt(output, 21)
			WriteValue(output, _CanCrit)
		unless _CritChance == 30:
			WriteBERInt(output, 22)
			WriteValue(output, _CritChance)
		unless _OftenMiss == false:
			WriteBERInt(output, 26)
			WriteValue(output, _OftenMiss)
		unless _Flying == false:
			WriteBERInt(output, 28)
			WriteValue(output, _Flying)
		unless _ConditionCount == 0:
			WriteBERInt(output, 31)
			WriteValue(output, _ConditionCount)
		WriteBERInt(output, 32)
		WriteValue(output, _ConditionModifiers)
		unless _DTypeCount == 0:
			WriteBERInt(output, 33)
			WriteValue(output, _DTypeCount)
		WriteBERInt(output, 34)
		WriteValue(output, _DTypeModifiers)
		WriteBERInt(output, 42)
		WriteList(output, _Behavior)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Filename as string:
		get:
			return _Filename
		set:
			self._Filename = value

	public ColorShift as int:
		get:
			return _ColorShift
		set:
			self._ColorShift = value

	public HP as int:
		get:
			return _HP
		set:
			self._HP = value

	public MP as int:
		get:
			return _MP
		set:
			self._MP = value

	public Attack as int:
		get:
			return _Attack
		set:
			self._Attack = value

	public Defense as int:
		get:
			return _Defense
		set:
			self._Defense = value

	public Mind as int:
		get:
			return _Mind
		set:
			self._Mind = value

	public Speed as int:
		get:
			return _Speed
		set:
			self._Speed = value

	public Transparent as bool:
		get:
			return _Transparent
		set:
			self._Transparent = value

	public Exp as int:
		get:
			return _Exp
		set:
			self._Exp = value

	public Money as int:
		get:
			return _Money
		set:
			self._Money = value

	public Item as int:
		get:
			return _Item
		set:
			self._Item = value

	public ItemChance as int:
		get:
			return _ItemChance
		set:
			self._ItemChance = value

	public CanCrit as bool:
		get:
			return _CanCrit
		set:
			self._CanCrit = value

	public CritChance as int:
		get:
			return _CritChance
		set:
			self._CritChance = value

	public OftenMiss as bool:
		get:
			return _OftenMiss
		set:
			self._OftenMiss = value

	public Flying as bool:
		get:
			return _Flying
		set:
			self._Flying = value

	public ConditionCount as int:
		get:
			return _ConditionCount
		set:
			self._ConditionCount = value

	public ConditionModifiers as LCFByteArray:
		get:
			return _ConditionModifiers
		set:
			self._ConditionModifiers = value

	public DTypeCount as int:
		get:
			return _DTypeCount
		set:
			self._DTypeCount = value

	public DTypeModifiers as LCFByteArray:
		get:
			return _DTypeModifiers
		set:
			self._DTypeModifiers = value

	public Behavior as System.Collections.Generic.List[of MonsterBehavior]:
		get:
			return _Behavior
		set:
			self._Behavior = value

class MonsterBehavior(ILCFObject):

	private final _ID as int

	private _Action as int

	private _Basic as int

	private _Skill as int

	private _Transform as int

	private _Precondition as int

	private _PreconditionP1 as int

	private _PreconditionP2 as int

	private _PreconditionSwitch as int

	private _SwitchOn as bool

	private _SwitchOnID as int

	private _SwitchOff as bool

	private _SwitchOffID as int

	private _Priority as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Action = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, MonsterBehavior)
		if current == 2:
			_Basic = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, MonsterBehavior)
		if current == 3:
			_Skill = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, MonsterBehavior)
		else:
			_Skill = LCFInt(1)
		if current == 4:
			_Transform = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, MonsterBehavior)
		else:
			_Transform = LCFInt(1)
		if current == 5:
			_Precondition = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, MonsterBehavior)
		if current == 6:
			_PreconditionP1 = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, MonsterBehavior)
		else:
			_PreconditionP1 = LCFInt(0)
		if current == 7:
			_PreconditionP2 = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, MonsterBehavior)
		else:
			_PreconditionP2 = LCFInt(0)
		if current == 8:
			_PreconditionSwitch = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, MonsterBehavior)
		else:
			_PreconditionSwitch = LCFInt(1)
		if current == 9:
			_SwitchOn = LCFBool(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, MonsterBehavior)
		else:
			_SwitchOn = LCFBool(false)
		if current == 10:
			_SwitchOnID = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, MonsterBehavior)
		else:
			_SwitchOnID = LCFInt(1)
		if current == 11:
			_SwitchOff = LCFBool(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, MonsterBehavior)
		else:
			_SwitchOff = LCFBool(false)
		if current == 12:
			_SwitchOffID = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, MonsterBehavior)
		else:
			_SwitchOffID = LCFInt(1)
		if current == 13:
			_Priority = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, MonsterBehavior)
		else:
			_Priority = LCFInt(50)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Action)
		WriteBERInt(output, 2)
		WriteValue(output, _Basic)
		unless _Skill == 1:
			WriteBERInt(output, 3)
			WriteValue(output, _Skill)
		unless _Transform == 1:
			WriteBERInt(output, 4)
			WriteValue(output, _Transform)
		WriteBERInt(output, 5)
		WriteValue(output, _Precondition)
		unless _PreconditionP1 == 0:
			WriteBERInt(output, 6)
			WriteValue(output, _PreconditionP1)
		unless _PreconditionP2 == 0:
			WriteBERInt(output, 7)
			WriteValue(output, _PreconditionP2)
		unless _PreconditionSwitch == 1:
			WriteBERInt(output, 8)
			WriteValue(output, _PreconditionSwitch)
		unless _SwitchOn == false:
			WriteBERInt(output, 9)
			WriteValue(output, _SwitchOn)
		unless _SwitchOnID == 1:
			WriteBERInt(output, 10)
			WriteValue(output, _SwitchOnID)
		unless _SwitchOff == false:
			WriteBERInt(output, 11)
			WriteValue(output, _SwitchOff)
		unless _SwitchOffID == 1:
			WriteBERInt(output, 12)
			WriteValue(output, _SwitchOffID)
		unless _Priority == 50:
			WriteBERInt(output, 13)
			WriteValue(output, _Priority)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Action as int:
		get:
			return _Action
		set:
			self._Action = value

	public Basic as int:
		get:
			return _Basic
		set:
			self._Basic = value

	public Skill as int:
		get:
			return _Skill
		set:
			self._Skill = value

	public Transform as int:
		get:
			return _Transform
		set:
			self._Transform = value

	public Precondition as int:
		get:
			return _Precondition
		set:
			self._Precondition = value

	public PreconditionP1 as int:
		get:
			return _PreconditionP1
		set:
			self._PreconditionP1 = value

	public PreconditionP2 as int:
		get:
			return _PreconditionP2
		set:
			self._PreconditionP2 = value

	public PreconditionSwitch as int:
		get:
			return _PreconditionSwitch
		set:
			self._PreconditionSwitch = value

	public SwitchOn as bool:
		get:
			return _SwitchOn
		set:
			self._SwitchOn = value

	public SwitchOnID as int:
		get:
			return _SwitchOnID
		set:
			self._SwitchOnID = value

	public SwitchOff as bool:
		get:
			return _SwitchOff
		set:
			self._SwitchOff = value

	public SwitchOffID as int:
		get:
			return _SwitchOffID
		set:
			self._SwitchOffID = value

	public Priority as int:
		get:
			return _Priority
		set:
			self._Priority = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMMonsterParty(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Monsters as System.Collections.Generic.List[of MonsterElement]

	private _AutoAlign as bool

	private _HabitatCount as int

	private _Habitats as LCFBoolArray

	private _Random as bool

	private _Events as System.Collections.Generic.List[of BattleEventPage]

	public def constructor(input as System.IO.Stream):
		_Monsters = System.Collections.Generic.List[of MonsterElement]()
		_Events = System.Collections.Generic.List[of BattleEventPage]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMMonsterParty)
		else:
			_Name = LCFString('')
		if current == 2:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Monsters.Add(MonsterElement(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMMonsterParty)
		if current == 3:
			_AutoAlign = LCFBool(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMMonsterParty)
		else:
			_AutoAlign = LCFBool(false)
		if current == 4:
			_HabitatCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMMonsterParty)
		else:
			_HabitatCount = LCFInt(0)
		if current == 5:
			_Habitats = LCFBoolArray(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMMonsterParty)
		if current == 6:
			_Random = LCFBool(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, RMMonsterParty)
		else:
			_Random = LCFBool(false)
		if current == 11:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				Events.Add(BattleEventPage(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMMonsterParty)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		WriteBERInt(output, 2)
		WriteList(output, _Monsters)
		unless _AutoAlign == false:
			WriteBERInt(output, 3)
			WriteValue(output, _AutoAlign)
		unless _HabitatCount == 0:
			WriteBERInt(output, 4)
			WriteValue(output, _HabitatCount)
		WriteBERInt(output, 5)
		WriteValue(output, _Habitats)
		unless _Random == false:
			WriteBERInt(output, 6)
			WriteValue(output, _Random)
		WriteBERInt(output, 11)
		WriteList(output, _Events)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Monsters as System.Collections.Generic.List[of MonsterElement]:
		get:
			return _Monsters
		set:
			self._Monsters = value

	public AutoAlign as bool:
		get:
			return _AutoAlign
		set:
			self._AutoAlign = value

	public HabitatCount as int:
		get:
			return _HabitatCount
		set:
			self._HabitatCount = value

	public Habitats as LCFBoolArray:
		get:
			return _Habitats
		set:
			self._Habitats = value

	public Random as bool:
		get:
			return _Random
		set:
			self._Random = value

	public Events as System.Collections.Generic.List[of BattleEventPage]:
		get:
			return _Events
		set:
			self._Events = value

class MonsterElement(ILCFObject):

	private final _ID as int

	private _Monster as int

	private _X as int

	private _Y as int

	private _Invisible as bool

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Monster = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, MonsterElement)
		else:
			_Monster = LCFInt(1)
		if current == 2:
			_X = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, MonsterElement)
		if current == 3:
			_Y = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, MonsterElement)
		if current == 4:
			_Invisible = LCFBool(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, MonsterElement)
		else:
			_Invisible = LCFBool(false)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Monster == 1:
			WriteBERInt(output, 1)
			WriteValue(output, _Monster)
		WriteBERInt(output, 2)
		WriteValue(output, _X)
		WriteBERInt(output, 3)
		WriteValue(output, _Y)
		unless _Invisible == false:
			WriteBERInt(output, 4)
			WriteValue(output, _Invisible)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Monster as int:
		get:
			return _Monster
		set:
			self._Monster = value

	public X as int:
		get:
			return _X
		set:
			self._X = value

	public Y as int:
		get:
			return _Y
		set:
			self._Y = value

	public Invisible as bool:
		get:
			return _Invisible
		set:
			self._Invisible = value

class BattleEventPage(ILCFObject):

	private final _ID as int

	private _Conditions as BattleEventConditions

	private _CommandCount as int

	private _Commands as System.Collections.Generic.List[of EventCommand]

	public def constructor(input as System.IO.Stream):
		_Commands = System.Collections.Generic.List[of EventCommand]()
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 2:
			BERInt(input)
			_Conditions = BattleEventConditions(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, BattleEventPage)
		if current == 11:
			_CommandCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, BattleEventPage)
		if current == 12:
			check = (BERInt(input) + input.Position)
			while input.Position < check:
				_Commands.Add(EventCommand(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, BattleEventPage)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 2)
		WriteValue(output, _Conditions)
		WriteBERInt(output, 11)
		WriteValue(output, _CommandCount)
		WriteBERInt(output, 12)
		WriteSequence(output, _Commands)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Conditions as BattleEventConditions:
		get:
			return _Conditions
		set:
			self._Conditions = value

	public CommandCount as int:
		get:
			return _CommandCount
		set:
			self._CommandCount = value

	public Commands as System.Collections.Generic.List[of EventCommand]:
		get:
			return _Commands
		set:
			self._Commands = value

class BattleEventConditions(ILCFObject):

	private _Conditions as LCFWord

	private _Switch1 as int

	private _Switch2 as int

	private _Variable as int

	private _VarValue as int

	private _TurnsMultiple as int

	private _TurnsConst as int

	private _ExhaustionMin as int

	private _ExhaustionMax as int

	private _MonsterHPID as int

	private _MonsterHPMin as int

	private _MonsterHPMax as int

	private _HeroHP as int

	private _HeroHPMin as int

	private _HeroHPMax as int

	private _MonsterTurnID as int

	private _MonsterTurnsMultiple as int

	private _MonsterTurnsConst as int

	private _HeroTurn as int

	private _HeroTurnsMultiple as int

	private _HeroTurnsConst as int

	private _HeroCommandWho as int

	private _HeroCommandWhich as int

	public def constructor(input as System.IO.Stream):
		current = BERInt(input)
		if current == 1:
			BERInt(input)
			_Conditions = LCFWord(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, BattleEventConditions)
		if current == 2:
			_Switch1 = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, BattleEventConditions)
		else:
			_Switch1 = LCFInt(1)
		if current == 3:
			_Switch2 = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, BattleEventConditions)
		else:
			_Switch2 = LCFInt(1)
		if current == 4:
			_Variable = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, BattleEventConditions)
		else:
			_Variable = LCFInt(1)
		if current == 5:
			_VarValue = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, BattleEventConditions)
		else:
			_VarValue = LCFInt(0)
		if current == 6:
			_TurnsMultiple = LCFInt(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, BattleEventConditions)
		else:
			_TurnsMultiple = LCFInt(0)
		if current == 7:
			_TurnsConst = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, BattleEventConditions)
		else:
			_TurnsConst = LCFInt(0)
		if current == 8:
			_ExhaustionMin = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, BattleEventConditions)
		else:
			_ExhaustionMin = LCFInt(0)
		if current == 9:
			_ExhaustionMax = LCFInt(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, BattleEventConditions)
		else:
			_ExhaustionMax = LCFInt(100)
		if current == 10:
			_MonsterHPID = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, BattleEventConditions)
		else:
			_MonsterHPID = LCFInt(0)
		if current == 11:
			_MonsterHPMin = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, BattleEventConditions)
		else:
			_MonsterHPMin = LCFInt(0)
		if current == 12:
			_MonsterHPMax = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, BattleEventConditions)
		else:
			_MonsterHPMax = LCFInt(100)
		if current == 13:
			_HeroHP = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, BattleEventConditions)
		else:
			_HeroHP = LCFInt(1)
		if current == 14:
			_HeroHPMin = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, BattleEventConditions)
		else:
			_HeroHPMin = LCFInt(0)
		if current == 15:
			_HeroHPMax = LCFInt(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, BattleEventConditions)
		else:
			_HeroHPMax = LCFInt(100)
		if current == 16:
			_MonsterTurnID = LCFInt(input)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, BattleEventConditions)
		else:
			_MonsterTurnID = LCFInt(0)
		if current == 17:
			_MonsterTurnsMultiple = LCFInt(input)
			current = BERInt(input)
		elif (current < 17) and (current > 0):
			raise LCFUnexpectedSection(current, 17, BattleEventConditions)
		else:
			_MonsterTurnsMultiple = LCFInt(0)
		if current == 18:
			_MonsterTurnsConst = LCFInt(input)
			current = BERInt(input)
		elif (current < 18) and (current > 0):
			raise LCFUnexpectedSection(current, 18, BattleEventConditions)
		else:
			_MonsterTurnsConst = LCFInt(0)
		if current == 19:
			_HeroTurn = LCFInt(input)
			current = BERInt(input)
		elif (current < 19) and (current > 0):
			raise LCFUnexpectedSection(current, 19, BattleEventConditions)
		else:
			_HeroTurn = LCFInt(1)
		if current == 20:
			_HeroTurnsMultiple = LCFInt(input)
			current = BERInt(input)
		elif (current < 20) and (current > 0):
			raise LCFUnexpectedSection(current, 20, BattleEventConditions)
		else:
			_HeroTurnsMultiple = LCFInt(0)
		if current == 21:
			_HeroTurnsConst = LCFInt(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, BattleEventConditions)
		else:
			_HeroTurnsConst = LCFInt(0)
		if current == 22:
			_HeroCommandWho = LCFInt(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, BattleEventConditions)
		else:
			_HeroCommandWho = LCFInt(1)
		if current == 23:
			_HeroCommandWhich = LCFInt(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, BattleEventConditions)
		else:
			_HeroCommandWhich = LCFInt(1)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, 1)
		WriteValue(output, _Conditions)
		unless _Switch1 == 1:
			WriteBERInt(output, 2)
			WriteValue(output, _Switch1)
		unless _Switch2 == 1:
			WriteBERInt(output, 3)
			WriteValue(output, _Switch2)
		unless _Variable == 1:
			WriteBERInt(output, 4)
			WriteValue(output, _Variable)
		unless _VarValue == 0:
			WriteBERInt(output, 5)
			WriteValue(output, _VarValue)
		unless _TurnsMultiple == 0:
			WriteBERInt(output, 6)
			WriteValue(output, _TurnsMultiple)
		unless _TurnsConst == 0:
			WriteBERInt(output, 7)
			WriteValue(output, _TurnsConst)
		unless _ExhaustionMin == 0:
			WriteBERInt(output, 8)
			WriteValue(output, _ExhaustionMin)
		unless _ExhaustionMax == 100:
			WriteBERInt(output, 9)
			WriteValue(output, _ExhaustionMax)
		unless _MonsterHPID == 0:
			WriteBERInt(output, 10)
			WriteValue(output, _MonsterHPID)
		unless _MonsterHPMin == 0:
			WriteBERInt(output, 11)
			WriteValue(output, _MonsterHPMin)
		unless _MonsterHPMax == 100:
			WriteBERInt(output, 12)
			WriteValue(output, _MonsterHPMax)
		unless _HeroHP == 1:
			WriteBERInt(output, 13)
			WriteValue(output, _HeroHP)
		unless _HeroHPMin == 0:
			WriteBERInt(output, 14)
			WriteValue(output, _HeroHPMin)
		unless _HeroHPMax == 100:
			WriteBERInt(output, 15)
			WriteValue(output, _HeroHPMax)
		unless _MonsterTurnID == 0:
			WriteBERInt(output, 16)
			WriteValue(output, _MonsterTurnID)
		unless _MonsterTurnsMultiple == 0:
			WriteBERInt(output, 17)
			WriteValue(output, _MonsterTurnsMultiple)
		unless _MonsterTurnsConst == 0:
			WriteBERInt(output, 18)
			WriteValue(output, _MonsterTurnsConst)
		unless _HeroTurn == 1:
			WriteBERInt(output, 19)
			WriteValue(output, _HeroTurn)
		unless _HeroTurnsMultiple == 0:
			WriteBERInt(output, 20)
			WriteValue(output, _HeroTurnsMultiple)
		unless _HeroTurnsConst == 0:
			WriteBERInt(output, 21)
			WriteValue(output, _HeroTurnsConst)
		unless _HeroCommandWho == 1:
			WriteBERInt(output, 22)
			WriteValue(output, _HeroCommandWho)
		unless _HeroCommandWhich == 1:
			WriteBERInt(output, 23)
			WriteValue(output, _HeroCommandWhich)
		output.WriteByte(0)

	public Conditions as LCFWord:
		get:
			return _Conditions
		set:
			self._Conditions = value

	public Switch1 as int:
		get:
			return _Switch1
		set:
			self._Switch1 = value

	public Switch2 as int:
		get:
			return _Switch2
		set:
			self._Switch2 = value

	public Variable as int:
		get:
			return _Variable
		set:
			self._Variable = value

	public VarValue as int:
		get:
			return _VarValue
		set:
			self._VarValue = value

	public TurnsMultiple as int:
		get:
			return _TurnsMultiple
		set:
			self._TurnsMultiple = value

	public TurnsConst as int:
		get:
			return _TurnsConst
		set:
			self._TurnsConst = value

	public ExhaustionMin as int:
		get:
			return _ExhaustionMin
		set:
			self._ExhaustionMin = value

	public ExhaustionMax as int:
		get:
			return _ExhaustionMax
		set:
			self._ExhaustionMax = value

	public MonsterHPID as int:
		get:
			return _MonsterHPID
		set:
			self._MonsterHPID = value

	public MonsterHPMin as int:
		get:
			return _MonsterHPMin
		set:
			self._MonsterHPMin = value

	public MonsterHPMax as int:
		get:
			return _MonsterHPMax
		set:
			self._MonsterHPMax = value

	public HeroHP as int:
		get:
			return _HeroHP
		set:
			self._HeroHP = value

	public HeroHPMin as int:
		get:
			return _HeroHPMin
		set:
			self._HeroHPMin = value

	public HeroHPMax as int:
		get:
			return _HeroHPMax
		set:
			self._HeroHPMax = value

	public MonsterTurnID as int:
		get:
			return _MonsterTurnID
		set:
			self._MonsterTurnID = value

	public MonsterTurnsMultiple as int:
		get:
			return _MonsterTurnsMultiple
		set:
			self._MonsterTurnsMultiple = value

	public MonsterTurnsConst as int:
		get:
			return _MonsterTurnsConst
		set:
			self._MonsterTurnsConst = value

	public HeroTurn as int:
		get:
			return _HeroTurn
		set:
			self._HeroTurn = value

	public HeroTurnsMultiple as int:
		get:
			return _HeroTurnsMultiple
		set:
			self._HeroTurnsMultiple = value

	public HeroTurnsConst as int:
		get:
			return _HeroTurnsConst
		set:
			self._HeroTurnsConst = value

	public HeroCommandWho as int:
		get:
			return _HeroCommandWho
		set:
			self._HeroCommandWho = value

	public HeroCommandWhich as int:
		get:
			return _HeroCommandWhich
		set:
			self._HeroCommandWhich = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMMusic(ILCFObject):

	private _Filename as string

	private _FadeIn as int

	private _Volume as int

	private _Tempo as int

	private _Balance as int

	public def constructor(input as System.IO.Stream):
		current = BERInt(input)
		if current == 1:
			_Filename = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMMusic)
		if current == 2:
			_FadeIn = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMMusic)
		else:
			_FadeIn = LCFInt(0)
		if current == 3:
			_Volume = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMMusic)
		else:
			_Volume = LCFInt(100)
		if current == 4:
			_Tempo = LCFInt(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMMusic)
		else:
			_Tempo = LCFInt(100)
		if current == 5:
			_Balance = LCFInt(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMMusic)
		else:
			_Balance = LCFInt(50)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, 1)
		WriteValue(output, _Filename)
		unless _FadeIn == 0:
			WriteBERInt(output, 2)
			WriteValue(output, _FadeIn)
		unless _Volume == 100:
			WriteBERInt(output, 3)
			WriteValue(output, _Volume)
		unless _Tempo == 100:
			WriteBERInt(output, 4)
			WriteValue(output, _Tempo)
		unless _Balance == 50:
			WriteBERInt(output, 5)
			WriteValue(output, _Balance)
		output.WriteByte(0)

	public Filename as string:
		get:
			return _Filename
		set:
			self._Filename = value

	public FadeIn as int:
		get:
			return _FadeIn
		set:
			self._FadeIn = value

	public Volume as int:
		get:
			return _Volume
		set:
			self._Volume = value

	public Tempo as int:
		get:
			return _Tempo
		set:
			self._Tempo = value

	public Balance as int:
		get:
			return _Balance
		set:
			self._Balance = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMSkill(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Desc as string

	private _Usage as string

	private _Usage2 as string

	private _Failure as int

	private _SkillType as int

	private _UsesPercentCost as bool

	private _PercentCost as int

	private _Cost as int

	private _Range as int

	private _Switch as int

	private _Anim as int

	private _Sfx as RMMusic

	private _Field as bool

	private _Battle as bool

	private _InflictReversed as bool

	private _StrengthBase as int

	private _MindBase as int

	private _Variance as int

	private _Base as int

	private _SuccessRate as int

	private _HP as int

	private _MP as int

	private _Attack as int

	private _Defense as int

	private _Mind as int

	private _Speed as int

	private _Vampire as bool

	private _Phased as bool

	private _ConditionCount as int

	private _Conditions as LCFBoolArray

	private _AttributeCount as int

	private _Attributes as LCFBoolArray

	private _ResistMod as bool

	private _DisplaySprite as int

	private final _legacy = System.Collections.Generic.Dictionary[of int, (byte)]()

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMSkill)
		else:
			_Name = LCFString('')
		if current == 2:
			_Desc = LCFString(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMSkill)
		else:
			_Desc = LCFString('')
		if current == 3:
			_Usage = LCFString(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMSkill)
		else:
			_Usage = LCFString('')
		if current == 4:
			_Usage2 = LCFString(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMSkill)
		else:
			_Usage2 = LCFString('')
		if current == 7:
			_Failure = LCFInt(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, RMSkill)
		else:
			_Failure = LCFInt(-1)
		if current == 8:
			_SkillType = LCFInt(input)
			current = BERInt(input)
		elif (current < 8) and (current > 0):
			raise LCFUnexpectedSection(current, 8, RMSkill)
		if current == 9:
			_UsesPercentCost = LCFBool(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, RMSkill)
		else:
			_UsesPercentCost = LCFBool(false)
		if current == 10:
			_PercentCost = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, RMSkill)
		else:
			_PercentCost = LCFInt(0)
		if current == 11:
			_Cost = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMSkill)
		else:
			_Cost = LCFInt(0)
		if current == 12:
			_Range = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMSkill)
		if current == 13:
			_Switch = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, RMSkill)
		else:
			_Switch = LCFInt(0)
		if current == 14:
			_Anim = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, RMSkill)
		else:
			_Anim = LCFInt(0)
		if current == 16:
			BERInt(input)
			_Sfx = RMMusic(input)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, RMSkill)
		if current == 18:
			_Field = LCFBool(input)
			current = BERInt(input)
		elif (current < 18) and (current > 0):
			raise LCFUnexpectedSection(current, 18, RMSkill)
		else:
			_Field = LCFBool(true)
		if current == 19:
			_Battle = LCFBool(input)
			current = BERInt(input)
		elif (current < 19) and (current > 0):
			raise LCFUnexpectedSection(current, 19, RMSkill)
		else:
			_Battle = LCFBool(false)
		if current == 20:
			_InflictReversed = LCFBool(input)
			current = BERInt(input)
		elif (current < 20) and (current > 0):
			raise LCFUnexpectedSection(current, 20, RMSkill)
		else:
			_InflictReversed = LCFBool(false)
		if current == 21:
			_StrengthBase = LCFInt(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMSkill)
		else:
			_StrengthBase = LCFInt(0)
		if current == 22:
			_MindBase = LCFInt(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMSkill)
		else:
			_MindBase = LCFInt(3)
		if current == 23:
			_Variance = LCFInt(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, RMSkill)
		else:
			_Variance = LCFInt(4)
		if current == 24:
			_Base = LCFInt(input)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, RMSkill)
		else:
			_Base = LCFInt(0)
		if current == 25:
			_SuccessRate = LCFInt(input)
			current = BERInt(input)
		elif (current < 25) and (current > 0):
			raise LCFUnexpectedSection(current, 25, RMSkill)
		else:
			_SuccessRate = LCFInt(100)
		if current == 31:
			_HP = LCFInt(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMSkill)
		else:
			_HP = LCFInt(0)
		if current == 32:
			_MP = LCFInt(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, RMSkill)
		else:
			_MP = LCFInt(0)
		if current == 33:
			_Attack = LCFInt(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, RMSkill)
		else:
			_Attack = LCFInt(0)
		if current == 34:
			_Defense = LCFInt(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, RMSkill)
		else:
			_Defense = LCFInt(0)
		if current == 35:
			_Mind = LCFInt(input)
			current = BERInt(input)
		elif (current < 35) and (current > 0):
			raise LCFUnexpectedSection(current, 35, RMSkill)
		else:
			_Mind = LCFInt(0)
		if current == 36:
			_Speed = LCFInt(input)
			current = BERInt(input)
		elif (current < 36) and (current > 0):
			raise LCFUnexpectedSection(current, 36, RMSkill)
		else:
			_Speed = LCFInt(0)
		if current == 37:
			_Vampire = LCFBool(input)
			current = BERInt(input)
		elif (current < 37) and (current > 0):
			raise LCFUnexpectedSection(current, 37, RMSkill)
		else:
			_Vampire = LCFBool(false)
		if current == 38:
			_Phased = LCFBool(input)
			current = BERInt(input)
		elif (current < 38) and (current > 0):
			raise LCFUnexpectedSection(current, 38, RMSkill)
		else:
			_Phased = LCFBool(false)
		if current == 41:
			_ConditionCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, RMSkill)
		else:
			_ConditionCount = LCFInt(0)
		if current == 42:
			_Conditions = LCFBoolArray(input)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMSkill)
		if current == 43:
			_AttributeCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 43) and (current > 0):
			raise LCFUnexpectedSection(current, 43, RMSkill)
		else:
			_AttributeCount = LCFInt(0)
		if current == 44:
			_Attributes = LCFBoolArray(input)
			current = BERInt(input)
		elif (current < 44) and (current > 0):
			raise LCFUnexpectedSection(current, 44, RMSkill)
		if current == 45:
			_ResistMod = LCFBool(input)
			current = BERInt(input)
		elif (current < 45) and (current > 0):
			raise LCFUnexpectedSection(current, 45, RMSkill)
		else:
			_ResistMod = LCFBool(false)
		if current == 49:
			_DisplaySprite = LCFInt(input)
			current = BERInt(input)
		elif (current < 49) and (current > 0):
			raise LCFUnexpectedSection(current, 49, RMSkill)
		else:
			_DisplaySprite = LCFInt(1)
		if current == 50:
			_legacy.Add(50, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 50) and (current > 0):
			raise LCFUnexpectedSection(current, 50, RMSkill)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		unless _Desc == '':
			WriteBERInt(output, 2)
			WriteValue(output, _Desc)
		unless _Usage == '':
			WriteBERInt(output, 3)
			WriteValue(output, _Usage)
		unless _Usage2 == '':
			WriteBERInt(output, 4)
			WriteValue(output, _Usage2)
		unless _Failure == (-1):
			WriteBERInt(output, 7)
			WriteValue(output, _Failure)
		WriteBERInt(output, 8)
		WriteValue(output, _SkillType)
		unless _UsesPercentCost == false:
			WriteBERInt(output, 9)
			WriteValue(output, _UsesPercentCost)
		unless _PercentCost == 0:
			WriteBERInt(output, 10)
			WriteValue(output, _PercentCost)
		unless _Cost == 0:
			WriteBERInt(output, 11)
			WriteValue(output, _Cost)
		WriteBERInt(output, 12)
		WriteValue(output, _Range)
		unless _Switch == 0:
			WriteBERInt(output, 13)
			WriteValue(output, _Switch)
		unless _Anim == 0:
			WriteBERInt(output, 14)
			WriteValue(output, _Anim)
		WriteBERInt(output, 16)
		WriteValue(output, _Sfx)
		unless _Field == true:
			WriteBERInt(output, 18)
			WriteValue(output, _Field)
		unless _Battle == false:
			WriteBERInt(output, 19)
			WriteValue(output, _Battle)
		unless _InflictReversed == false:
			WriteBERInt(output, 20)
			WriteValue(output, _InflictReversed)
		unless _StrengthBase == 0:
			WriteBERInt(output, 21)
			WriteValue(output, _StrengthBase)
		unless _MindBase == 3:
			WriteBERInt(output, 22)
			WriteValue(output, _MindBase)
		unless _Variance == 4:
			WriteBERInt(output, 23)
			WriteValue(output, _Variance)
		unless _Base == 0:
			WriteBERInt(output, 24)
			WriteValue(output, _Base)
		unless _SuccessRate == 100:
			WriteBERInt(output, 25)
			WriteValue(output, _SuccessRate)
		unless _HP == 0:
			WriteBERInt(output, 31)
			WriteValue(output, _HP)
		unless _MP == 0:
			WriteBERInt(output, 32)
			WriteValue(output, _MP)
		unless _Attack == 0:
			WriteBERInt(output, 33)
			WriteValue(output, _Attack)
		unless _Defense == 0:
			WriteBERInt(output, 34)
			WriteValue(output, _Defense)
		unless _Mind == 0:
			WriteBERInt(output, 35)
			WriteValue(output, _Mind)
		unless _Speed == 0:
			WriteBERInt(output, 36)
			WriteValue(output, _Speed)
		unless _Vampire == false:
			WriteBERInt(output, 37)
			WriteValue(output, _Vampire)
		unless _Phased == false:
			WriteBERInt(output, 38)
			WriteValue(output, _Phased)
		unless _ConditionCount == 0:
			WriteBERInt(output, 41)
			WriteValue(output, _ConditionCount)
		WriteBERInt(output, 42)
		WriteValue(output, _Conditions)
		unless _AttributeCount == 0:
			WriteBERInt(output, 43)
			WriteValue(output, _AttributeCount)
		WriteBERInt(output, 44)
		WriteValue(output, _Attributes)
		unless _ResistMod == false:
			WriteBERInt(output, 45)
			WriteValue(output, _ResistMod)
		unless _DisplaySprite == 1:
			WriteBERInt(output, 49)
			WriteValue(output, _DisplaySprite)
		unless not _legacy.ContainsKey(50):
			WriteBERInt(output, 50)
			WriteByteArray(output, _legacy[50])
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Desc as string:
		get:
			return _Desc
		set:
			self._Desc = value

	public Usage as string:
		get:
			return _Usage
		set:
			self._Usage = value

	public Usage2 as string:
		get:
			return _Usage2
		set:
			self._Usage2 = value

	public Failure as int:
		get:
			return _Failure
		set:
			self._Failure = value

	public SkillType as int:
		get:
			return _SkillType
		set:
			self._SkillType = value

	public UsesPercentCost as bool:
		get:
			return _UsesPercentCost
		set:
			self._UsesPercentCost = value

	public PercentCost as int:
		get:
			return _PercentCost
		set:
			self._PercentCost = value

	public Cost as int:
		get:
			return _Cost
		set:
			self._Cost = value

	public Range as int:
		get:
			return _Range
		set:
			self._Range = value

	public Switch as int:
		get:
			return _Switch
		set:
			self._Switch = value

	public Anim as int:
		get:
			return _Anim
		set:
			self._Anim = value

	public Sfx as RMMusic:
		get:
			return _Sfx
		set:
			self._Sfx = value

	public Field as bool:
		get:
			return _Field
		set:
			self._Field = value

	public Battle as bool:
		get:
			return _Battle
		set:
			self._Battle = value

	public InflictReversed as bool:
		get:
			return _InflictReversed
		set:
			self._InflictReversed = value

	public StrengthBase as int:
		get:
			return _StrengthBase
		set:
			self._StrengthBase = value

	public MindBase as int:
		get:
			return _MindBase
		set:
			self._MindBase = value

	public Variance as int:
		get:
			return _Variance
		set:
			self._Variance = value

	public Base as int:
		get:
			return _Base
		set:
			self._Base = value

	public SuccessRate as int:
		get:
			return _SuccessRate
		set:
			self._SuccessRate = value

	public HP as int:
		get:
			return _HP
		set:
			self._HP = value

	public MP as int:
		get:
			return _MP
		set:
			self._MP = value

	public Attack as int:
		get:
			return _Attack
		set:
			self._Attack = value

	public Defense as int:
		get:
			return _Defense
		set:
			self._Defense = value

	public Mind as int:
		get:
			return _Mind
		set:
			self._Mind = value

	public Speed as int:
		get:
			return _Speed
		set:
			self._Speed = value

	public Vampire as bool:
		get:
			return _Vampire
		set:
			self._Vampire = value

	public Phased as bool:
		get:
			return _Phased
		set:
			self._Phased = value

	public ConditionCount as int:
		get:
			return _ConditionCount
		set:
			self._ConditionCount = value

	public Conditions as LCFBoolArray:
		get:
			return _Conditions
		set:
			self._Conditions = value

	public AttributeCount as int:
		get:
			return _AttributeCount
		set:
			self._AttributeCount = value

	public Attributes as LCFBoolArray:
		get:
			return _Attributes
		set:
			self._Attributes = value

	public ResistMod as bool:
		get:
			return _ResistMod
		set:
			self._ResistMod = value

	public DisplaySprite as int:
		get:
			return _DisplaySprite
		set:
			self._DisplaySprite = value

	public Legacy:
		get:
			return _legacy

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMSystemRecord(ILCFObject):

	private _RMVersion as int

	private _BoatGraphic as string

	private _ShipGraphic as string

	private _AirshipGraphic as string

	private _BoatIndex as int

	private _ShipIndex as int

	private _AirshipIndex as int

	private _TitleScreen as string

	private _GameOverScreen as string

	private _SystemGraphic as string

	private _BattleSysGraphic as string

	private _StartingHeroes as int

	private _StartingHero as LCFUshortArray

	private _CommandCount as int

	private _Commands as LCFUshortArray

	private _TitleMusic as RMMusic

	private _BattleMusic as RMMusic

	private _VictoryMusic as RMMusic

	private _InnMusic as RMMusic

	private _BoatMusic as RMMusic

	private _ShipMusic as RMMusic

	private _AirshipMusic as RMMusic

	private _GameOverMusic as RMMusic

	private _CursorSound as RMMusic

	private _AcceptSound as RMMusic

	private _CancelSound as RMMusic

	private _BuzzerSound as RMMusic

	private _BattleStartSound as RMMusic

	private _EscapeSound as RMMusic

	private _EnemyAttackSound as RMMusic

	private _EnemyDamageSound as RMMusic

	private _AllyDamageSound as RMMusic

	private _EvadeSound as RMMusic

	private _EnemyDiesSound as RMMusic

	private _ItemUsedSound as RMMusic

	private _MapExitTransition as int

	private _MapEnterTransition as int

	private _BattleStartEraseTransition as int

	private _BattleStartShowTransition as int

	private _BattleEndEraseTransition as int

	private _BattleEndShowTransition as int

	private _WallpaperTiled as bool

	private _WhichFont as int

	private _EditorCondition as int

	private _Hero as int

	private _EditorBattleTestBG as string

	private _BattleTestData as System.Collections.Generic.List[of RMBattleTest]

	private _SaveCount as int

	private _BattleTestTerrain as int

	private _BattleTestFormation as int

	private _BattleTestSpecialCondition as int

	private _UsesFrame as bool

	private _Frame as string

	private _ReverseGraphics as bool

	private final _legacy = System.Collections.Generic.Dictionary[of int, (byte)]()

	public def constructor(input as System.IO.Stream):
		_BattleTestData = System.Collections.Generic.List[of RMBattleTest]()
		current = BERInt(input)
		if current == 10:
			_RMVersion = LCFInt(input)
			current = BERInt(input)
		elif (current < 10) and (current > 0):
			raise LCFUnexpectedSection(current, 10, RMSystemRecord)
		else:
			_RMVersion = LCFInt(2000)
		if current == 11:
			_BoatGraphic = LCFString(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMSystemRecord)
		if current == 12:
			_ShipGraphic = LCFString(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMSystemRecord)
		if current == 13:
			_AirshipGraphic = LCFString(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, RMSystemRecord)
		if current == 14:
			_BoatIndex = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, RMSystemRecord)
		else:
			_BoatIndex = LCFInt(0)
		if current == 15:
			_ShipIndex = LCFInt(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMSystemRecord)
		if current == 16:
			_AirshipIndex = LCFInt(input)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, RMSystemRecord)
		if current == 17:
			_TitleScreen = LCFString(input)
			current = BERInt(input)
		elif (current < 17) and (current > 0):
			raise LCFUnexpectedSection(current, 17, RMSystemRecord)
		if current == 18:
			_GameOverScreen = LCFString(input)
			current = BERInt(input)
		elif (current < 18) and (current > 0):
			raise LCFUnexpectedSection(current, 18, RMSystemRecord)
		if current == 19:
			_SystemGraphic = LCFString(input)
			current = BERInt(input)
		elif (current < 19) and (current > 0):
			raise LCFUnexpectedSection(current, 19, RMSystemRecord)
		if current == 20:
			_BattleSysGraphic = LCFString(input)
			current = BERInt(input)
		elif (current < 20) and (current > 0):
			raise LCFUnexpectedSection(current, 20, RMSystemRecord)
		if current == 21:
			_StartingHeroes = LCFInt(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMSystemRecord)
		else:
			_StartingHeroes = LCFInt(1)
		if current == 22:
			_StartingHero = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMSystemRecord)
		if current == 26:
			_CommandCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 26) and (current > 0):
			raise LCFUnexpectedSection(current, 26, RMSystemRecord)
		if current == 27:
			_Commands = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 27) and (current > 0):
			raise LCFUnexpectedSection(current, 27, RMSystemRecord)
		if current == 31:
			BERInt(input)
			_TitleMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMSystemRecord)
		if current == 32:
			BERInt(input)
			_BattleMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, RMSystemRecord)
		if current == 33:
			BERInt(input)
			_VictoryMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, RMSystemRecord)
		if current == 34:
			BERInt(input)
			_InnMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, RMSystemRecord)
		if current == 35:
			BERInt(input)
			_BoatMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 35) and (current > 0):
			raise LCFUnexpectedSection(current, 35, RMSystemRecord)
		if current == 36:
			BERInt(input)
			_ShipMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 36) and (current > 0):
			raise LCFUnexpectedSection(current, 36, RMSystemRecord)
		if current == 37:
			BERInt(input)
			_AirshipMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 37) and (current > 0):
			raise LCFUnexpectedSection(current, 37, RMSystemRecord)
		if current == 38:
			BERInt(input)
			_GameOverMusic = RMMusic(input)
			current = BERInt(input)
		elif (current < 38) and (current > 0):
			raise LCFUnexpectedSection(current, 38, RMSystemRecord)
		if current == 41:
			BERInt(input)
			_CursorSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, RMSystemRecord)
		if current == 42:
			BERInt(input)
			_AcceptSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMSystemRecord)
		if current == 43:
			BERInt(input)
			_CancelSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 43) and (current > 0):
			raise LCFUnexpectedSection(current, 43, RMSystemRecord)
		if current == 44:
			BERInt(input)
			_BuzzerSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 44) and (current > 0):
			raise LCFUnexpectedSection(current, 44, RMSystemRecord)
		if current == 45:
			BERInt(input)
			_BattleStartSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 45) and (current > 0):
			raise LCFUnexpectedSection(current, 45, RMSystemRecord)
		if current == 46:
			BERInt(input)
			_EscapeSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 46) and (current > 0):
			raise LCFUnexpectedSection(current, 46, RMSystemRecord)
		if current == 47:
			BERInt(input)
			_EnemyAttackSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 47) and (current > 0):
			raise LCFUnexpectedSection(current, 47, RMSystemRecord)
		if current == 48:
			BERInt(input)
			_EnemyDamageSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 48) and (current > 0):
			raise LCFUnexpectedSection(current, 48, RMSystemRecord)
		if current == 49:
			BERInt(input)
			_AllyDamageSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 49) and (current > 0):
			raise LCFUnexpectedSection(current, 49, RMSystemRecord)
		if current == 50:
			BERInt(input)
			_EvadeSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 50) and (current > 0):
			raise LCFUnexpectedSection(current, 50, RMSystemRecord)
		if current == 51:
			BERInt(input)
			_EnemyDiesSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 51) and (current > 0):
			raise LCFUnexpectedSection(current, 51, RMSystemRecord)
		if current == 52:
			BERInt(input)
			_ItemUsedSound = RMMusic(input)
			current = BERInt(input)
		elif (current < 52) and (current > 0):
			raise LCFUnexpectedSection(current, 52, RMSystemRecord)
		if current == 61:
			_MapExitTransition = LCFInt(input)
			current = BERInt(input)
		elif (current < 61) and (current > 0):
			raise LCFUnexpectedSection(current, 61, RMSystemRecord)
		if current == 62:
			_MapEnterTransition = LCFInt(input)
			current = BERInt(input)
		elif (current < 62) and (current > 0):
			raise LCFUnexpectedSection(current, 62, RMSystemRecord)
		if current == 63:
			_BattleStartEraseTransition = LCFInt(input)
			current = BERInt(input)
		elif (current < 63) and (current > 0):
			raise LCFUnexpectedSection(current, 63, RMSystemRecord)
		if current == 64:
			_BattleStartShowTransition = LCFInt(input)
			current = BERInt(input)
		elif (current < 64) and (current > 0):
			raise LCFUnexpectedSection(current, 64, RMSystemRecord)
		if current == 65:
			_BattleEndEraseTransition = LCFInt(input)
			current = BERInt(input)
		elif (current < 65) and (current > 0):
			raise LCFUnexpectedSection(current, 65, RMSystemRecord)
		if current == 66:
			_BattleEndShowTransition = LCFInt(input)
			current = BERInt(input)
		elif (current < 66) and (current > 0):
			raise LCFUnexpectedSection(current, 66, RMSystemRecord)
		if current == 71:
			_WallpaperTiled = LCFBool(input)
			current = BERInt(input)
		elif (current < 71) and (current > 0):
			raise LCFUnexpectedSection(current, 71, RMSystemRecord)
		else:
			_WallpaperTiled = LCFBool(false)
		if current == 72:
			_WhichFont = LCFInt(input)
			current = BERInt(input)
		elif (current < 72) and (current > 0):
			raise LCFUnexpectedSection(current, 72, RMSystemRecord)
		if current == 81:
			_EditorCondition = LCFInt(input)
			current = BERInt(input)
		elif (current < 81) and (current > 0):
			raise LCFUnexpectedSection(current, 81, RMSystemRecord)
		else:
			_EditorCondition = LCFInt(0)
		if current == 82:
			_Hero = LCFInt(input)
			current = BERInt(input)
		elif (current < 82) and (current > 0):
			raise LCFUnexpectedSection(current, 82, RMSystemRecord)
		if current == 84:
			_EditorBattleTestBG = LCFString(input)
			current = BERInt(input)
		elif (current < 84) and (current > 0):
			raise LCFUnexpectedSection(current, 84, RMSystemRecord)
		if current == 85:
			check = (BERInt(input) + input.Position)
			for i in range(BERInt(input)):
				BattleTestData.Add(RMBattleTest(input))
			raise 'Unexpected input position' unless (input.Position == check)
			current = BERInt(input)
		elif (current < 85) and (current > 0):
			raise LCFUnexpectedSection(current, 85, RMSystemRecord)
		if current == 91:
			_SaveCount = LCFInt(input)
			current = BERInt(input)
		elif (current < 91) and (current > 0):
			raise LCFUnexpectedSection(current, 91, RMSystemRecord)
		if current == 94:
			_BattleTestTerrain = LCFInt(input)
			current = BERInt(input)
		elif (current < 94) and (current > 0):
			raise LCFUnexpectedSection(current, 94, RMSystemRecord)
		else:
			_BattleTestTerrain = LCFInt(0)
		if current == 95:
			_BattleTestFormation = LCFInt(input)
			current = BERInt(input)
		elif (current < 95) and (current > 0):
			raise LCFUnexpectedSection(current, 95, RMSystemRecord)
		else:
			_BattleTestFormation = LCFInt(0)
		if current == 96:
			_BattleTestSpecialCondition = LCFInt(input)
			current = BERInt(input)
		elif (current < 96) and (current > 0):
			raise LCFUnexpectedSection(current, 96, RMSystemRecord)
		if current == 97:
			_legacy.Add(97, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 97) and (current > 0):
			raise LCFUnexpectedSection(current, 97, RMSystemRecord)
		if current == 98:
			_legacy.Add(98, LCFByteArray(input))
			current = BERInt(input)
		elif (current < 98) and (current > 0):
			raise LCFUnexpectedSection(current, 98, RMSystemRecord)
		if current == 99:
			_UsesFrame = LCFBool(input)
			current = BERInt(input)
		elif (current < 99) and (current > 0):
			raise LCFUnexpectedSection(current, 99, RMSystemRecord)
		else:
			_UsesFrame = LCFBool(false)
		if current == 100:
			_Frame = LCFString(input)
			current = BERInt(input)
		elif (current < 100) and (current > 0):
			raise LCFUnexpectedSection(current, 100, RMSystemRecord)
		else:
			_Frame = LCFString('')
		if current == 101:
			_ReverseGraphics = LCFBool(input)
			current = BERInt(input)
		elif (current < 101) and (current > 0):
			raise LCFUnexpectedSection(current, 101, RMSystemRecord)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		unless _RMVersion == 2000:
			WriteBERInt(output, 10)
			WriteValue(output, _RMVersion)
		WriteBERInt(output, 11)
		WriteValue(output, _BoatGraphic)
		WriteBERInt(output, 12)
		WriteValue(output, _ShipGraphic)
		WriteBERInt(output, 13)
		WriteValue(output, _AirshipGraphic)
		unless _BoatIndex == 0:
			WriteBERInt(output, 14)
			WriteValue(output, _BoatIndex)
		WriteBERInt(output, 15)
		WriteValue(output, _ShipIndex)
		WriteBERInt(output, 16)
		WriteValue(output, _AirshipIndex)
		WriteBERInt(output, 17)
		WriteValue(output, _TitleScreen)
		WriteBERInt(output, 18)
		WriteValue(output, _GameOverScreen)
		WriteBERInt(output, 19)
		WriteValue(output, _SystemGraphic)
		WriteBERInt(output, 20)
		WriteValue(output, _BattleSysGraphic)
		unless _StartingHeroes == 1:
			WriteBERInt(output, 21)
			WriteValue(output, _StartingHeroes)
		WriteBERInt(output, 22)
		WriteValue(output, _StartingHero)
		WriteBERInt(output, 26)
		WriteValue(output, _CommandCount)
		WriteBERInt(output, 27)
		WriteValue(output, _Commands)
		WriteBERInt(output, 31)
		WriteValue(output, _TitleMusic)
		WriteBERInt(output, 32)
		WriteValue(output, _BattleMusic)
		WriteBERInt(output, 33)
		WriteValue(output, _VictoryMusic)
		WriteBERInt(output, 34)
		WriteValue(output, _InnMusic)
		WriteBERInt(output, 35)
		WriteValue(output, _BoatMusic)
		WriteBERInt(output, 36)
		WriteValue(output, _ShipMusic)
		WriteBERInt(output, 37)
		WriteValue(output, _AirshipMusic)
		WriteBERInt(output, 38)
		WriteValue(output, _GameOverMusic)
		WriteBERInt(output, 41)
		WriteValue(output, _CursorSound)
		WriteBERInt(output, 42)
		WriteValue(output, _AcceptSound)
		WriteBERInt(output, 43)
		WriteValue(output, _CancelSound)
		WriteBERInt(output, 44)
		WriteValue(output, _BuzzerSound)
		WriteBERInt(output, 45)
		WriteValue(output, _BattleStartSound)
		WriteBERInt(output, 46)
		WriteValue(output, _EscapeSound)
		WriteBERInt(output, 47)
		WriteValue(output, _EnemyAttackSound)
		WriteBERInt(output, 48)
		WriteValue(output, _EnemyDamageSound)
		WriteBERInt(output, 49)
		WriteValue(output, _AllyDamageSound)
		WriteBERInt(output, 50)
		WriteValue(output, _EvadeSound)
		WriteBERInt(output, 51)
		WriteValue(output, _EnemyDiesSound)
		WriteBERInt(output, 52)
		WriteValue(output, _ItemUsedSound)
		WriteBERInt(output, 61)
		WriteValue(output, _MapExitTransition)
		WriteBERInt(output, 62)
		WriteValue(output, _MapEnterTransition)
		WriteBERInt(output, 63)
		WriteValue(output, _BattleStartEraseTransition)
		WriteBERInt(output, 64)
		WriteValue(output, _BattleStartShowTransition)
		WriteBERInt(output, 65)
		WriteValue(output, _BattleEndEraseTransition)
		WriteBERInt(output, 66)
		WriteValue(output, _BattleEndShowTransition)
		unless _WallpaperTiled == false:
			WriteBERInt(output, 71)
			WriteValue(output, _WallpaperTiled)
		WriteBERInt(output, 72)
		WriteValue(output, _WhichFont)
		unless _EditorCondition == 0:
			WriteBERInt(output, 81)
			WriteValue(output, _EditorCondition)
		WriteBERInt(output, 82)
		WriteValue(output, _Hero)
		WriteBERInt(output, 84)
		WriteValue(output, _EditorBattleTestBG)
		WriteBERInt(output, 85)
		WriteList(output, _BattleTestData)
		WriteBERInt(output, 91)
		WriteValue(output, _SaveCount)
		unless _BattleTestTerrain == 0:
			WriteBERInt(output, 94)
			WriteValue(output, _BattleTestTerrain)
		unless _BattleTestFormation == 0:
			WriteBERInt(output, 95)
			WriteValue(output, _BattleTestFormation)
		WriteBERInt(output, 96)
		WriteValue(output, _BattleTestSpecialCondition)
		unless not _legacy.ContainsKey(97):
			WriteBERInt(output, 97)
			WriteByteArray(output, _legacy[97])
		unless not _legacy.ContainsKey(98):
			WriteBERInt(output, 98)
			WriteByteArray(output, _legacy[98])
		unless _UsesFrame == false:
			WriteBERInt(output, 99)
			WriteValue(output, _UsesFrame)
		unless _Frame == '':
			WriteBERInt(output, 100)
			WriteValue(output, _Frame)
		WriteBERInt(output, 101)
		WriteValue(output, _ReverseGraphics)
		output.WriteByte(0)

	public RMVersion as int:
		get:
			return _RMVersion
		set:
			self._RMVersion = value

	public BoatGraphic as string:
		get:
			return _BoatGraphic
		set:
			self._BoatGraphic = value

	public ShipGraphic as string:
		get:
			return _ShipGraphic
		set:
			self._ShipGraphic = value

	public AirshipGraphic as string:
		get:
			return _AirshipGraphic
		set:
			self._AirshipGraphic = value

	public BoatIndex as int:
		get:
			return _BoatIndex
		set:
			self._BoatIndex = value

	public ShipIndex as int:
		get:
			return _ShipIndex
		set:
			self._ShipIndex = value

	public AirshipIndex as int:
		get:
			return _AirshipIndex
		set:
			self._AirshipIndex = value

	public TitleScreen as string:
		get:
			return _TitleScreen
		set:
			self._TitleScreen = value

	public GameOverScreen as string:
		get:
			return _GameOverScreen
		set:
			self._GameOverScreen = value

	public SystemGraphic as string:
		get:
			return _SystemGraphic
		set:
			self._SystemGraphic = value

	public BattleSysGraphic as string:
		get:
			return _BattleSysGraphic
		set:
			self._BattleSysGraphic = value

	public StartingHeroes as int:
		get:
			return _StartingHeroes
		set:
			self._StartingHeroes = value

	public StartingHero as LCFUshortArray:
		get:
			return _StartingHero
		set:
			self._StartingHero = value

	public CommandCount as int:
		get:
			return _CommandCount
		set:
			self._CommandCount = value

	public Commands as LCFUshortArray:
		get:
			return _Commands
		set:
			self._Commands = value

	public TitleMusic as RMMusic:
		get:
			return _TitleMusic
		set:
			self._TitleMusic = value

	public BattleMusic as RMMusic:
		get:
			return _BattleMusic
		set:
			self._BattleMusic = value

	public VictoryMusic as RMMusic:
		get:
			return _VictoryMusic
		set:
			self._VictoryMusic = value

	public InnMusic as RMMusic:
		get:
			return _InnMusic
		set:
			self._InnMusic = value

	public BoatMusic as RMMusic:
		get:
			return _BoatMusic
		set:
			self._BoatMusic = value

	public ShipMusic as RMMusic:
		get:
			return _ShipMusic
		set:
			self._ShipMusic = value

	public AirshipMusic as RMMusic:
		get:
			return _AirshipMusic
		set:
			self._AirshipMusic = value

	public GameOverMusic as RMMusic:
		get:
			return _GameOverMusic
		set:
			self._GameOverMusic = value

	public CursorSound as RMMusic:
		get:
			return _CursorSound
		set:
			self._CursorSound = value

	public AcceptSound as RMMusic:
		get:
			return _AcceptSound
		set:
			self._AcceptSound = value

	public CancelSound as RMMusic:
		get:
			return _CancelSound
		set:
			self._CancelSound = value

	public BuzzerSound as RMMusic:
		get:
			return _BuzzerSound
		set:
			self._BuzzerSound = value

	public BattleStartSound as RMMusic:
		get:
			return _BattleStartSound
		set:
			self._BattleStartSound = value

	public EscapeSound as RMMusic:
		get:
			return _EscapeSound
		set:
			self._EscapeSound = value

	public EnemyAttackSound as RMMusic:
		get:
			return _EnemyAttackSound
		set:
			self._EnemyAttackSound = value

	public EnemyDamageSound as RMMusic:
		get:
			return _EnemyDamageSound
		set:
			self._EnemyDamageSound = value

	public AllyDamageSound as RMMusic:
		get:
			return _AllyDamageSound
		set:
			self._AllyDamageSound = value

	public EvadeSound as RMMusic:
		get:
			return _EvadeSound
		set:
			self._EvadeSound = value

	public EnemyDiesSound as RMMusic:
		get:
			return _EnemyDiesSound
		set:
			self._EnemyDiesSound = value

	public ItemUsedSound as RMMusic:
		get:
			return _ItemUsedSound
		set:
			self._ItemUsedSound = value

	public MapExitTransition as int:
		get:
			return _MapExitTransition
		set:
			self._MapExitTransition = value

	public MapEnterTransition as int:
		get:
			return _MapEnterTransition
		set:
			self._MapEnterTransition = value

	public BattleStartEraseTransition as int:
		get:
			return _BattleStartEraseTransition
		set:
			self._BattleStartEraseTransition = value

	public BattleStartShowTransition as int:
		get:
			return _BattleStartShowTransition
		set:
			self._BattleStartShowTransition = value

	public BattleEndEraseTransition as int:
		get:
			return _BattleEndEraseTransition
		set:
			self._BattleEndEraseTransition = value

	public BattleEndShowTransition as int:
		get:
			return _BattleEndShowTransition
		set:
			self._BattleEndShowTransition = value

	public WallpaperTiled as bool:
		get:
			return _WallpaperTiled
		set:
			self._WallpaperTiled = value

	public WhichFont as int:
		get:
			return _WhichFont
		set:
			self._WhichFont = value

	public EditorCondition as int:
		get:
			return _EditorCondition
		set:
			self._EditorCondition = value

	public Hero as int:
		get:
			return _Hero
		set:
			self._Hero = value

	public EditorBattleTestBG as string:
		get:
			return _EditorBattleTestBG
		set:
			self._EditorBattleTestBG = value

	public BattleTestData as System.Collections.Generic.List[of RMBattleTest]:
		get:
			return _BattleTestData
		set:
			self._BattleTestData = value

	public SaveCount as int:
		get:
			return _SaveCount
		set:
			self._SaveCount = value

	public BattleTestTerrain as int:
		get:
			return _BattleTestTerrain
		set:
			self._BattleTestTerrain = value

	public BattleTestFormation as int:
		get:
			return _BattleTestFormation
		set:
			self._BattleTestFormation = value

	public BattleTestSpecialCondition as int:
		get:
			return _BattleTestSpecialCondition
		set:
			self._BattleTestSpecialCondition = value

	public UsesFrame as bool:
		get:
			return _UsesFrame
		set:
			self._UsesFrame = value

	public Frame as string:
		get:
			return _Frame
		set:
			self._Frame = value

	public ReverseGraphics as bool:
		get:
			return _ReverseGraphics
		set:
			self._ReverseGraphics = value

	public Legacy:
		get:
			return _legacy

class RMBattleTest(ILCFObject):

	private final _ID as int

	private _HeroID as int

	private _Level as int

	private _WeaponID as int

	private _ShieldID as int

	private _ArmorID as int

	private _HelmetID as int

	private _RelicID as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_HeroID = LCFInt(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMBattleTest)
		else:
			_HeroID = LCFInt(1)
		if current == 2:
			_Level = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMBattleTest)
		else:
			_Level = LCFInt(1)
		if current == 11:
			_WeaponID = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMBattleTest)
		else:
			_WeaponID = LCFInt(0)
		if current == 12:
			_ShieldID = LCFInt(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMBattleTest)
		else:
			_ShieldID = LCFInt(0)
		if current == 13:
			_ArmorID = LCFInt(input)
			current = BERInt(input)
		elif (current < 13) and (current > 0):
			raise LCFUnexpectedSection(current, 13, RMBattleTest)
		else:
			_ArmorID = LCFInt(0)
		if current == 14:
			_HelmetID = LCFInt(input)
			current = BERInt(input)
		elif (current < 14) and (current > 0):
			raise LCFUnexpectedSection(current, 14, RMBattleTest)
		else:
			_HelmetID = LCFInt(0)
		if current == 15:
			_RelicID = LCFInt(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMBattleTest)
		else:
			_RelicID = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _HeroID == 1:
			WriteBERInt(output, 1)
			WriteValue(output, _HeroID)
		unless _Level == 1:
			WriteBERInt(output, 2)
			WriteValue(output, _Level)
		unless _WeaponID == 0:
			WriteBERInt(output, 11)
			WriteValue(output, _WeaponID)
		unless _ShieldID == 0:
			WriteBERInt(output, 12)
			WriteValue(output, _ShieldID)
		unless _ArmorID == 0:
			WriteBERInt(output, 13)
			WriteValue(output, _ArmorID)
		unless _HelmetID == 0:
			WriteBERInt(output, 14)
			WriteValue(output, _HelmetID)
		unless _RelicID == 0:
			WriteBERInt(output, 15)
			WriteValue(output, _RelicID)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public HeroID as int:
		get:
			return _HeroID
		set:
			self._HeroID = value

	public Level as int:
		get:
			return _Level
		set:
			self._Level = value

	public WeaponID as int:
		get:
			return _WeaponID
		set:
			self._WeaponID = value

	public ShieldID as int:
		get:
			return _ShieldID
		set:
			self._ShieldID = value

	public ArmorID as int:
		get:
			return _ArmorID
		set:
			self._ArmorID = value

	public HelmetID as int:
		get:
			return _HelmetID
		set:
			self._HelmetID = value

	public RelicID as int:
		get:
			return _RelicID
		set:
			self._RelicID = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMTerrain(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Damage as int

	private _EncounterMultiplier as int

	private _BattleBG as string

	private _BoatPass as bool

	private _ShipPass as bool

	private _AirshipPass as bool

	private _AirshipLanding as bool

	private _Concealment as int

	private _SoundEffect as RMMusic

	private _DamageSound as bool

	private _BGAssociation as int

	private _Frame1 as string

	private _Frame1ScrollX as bool

	private _Frame1ScrollY as bool

	private _Frame1ScrollXSpeed as int

	private _Frame1ScrollYSpeed as int

	private _UseFrame2 as bool

	private _Frame2 as string

	private _Frame2ScrollX as bool

	private _Frame2ScrollY as bool

	private _Frame2ScrollXSpeed as int

	private _Frame2ScrollYSpeed as int

	private _SpecialFlags as int

	private _Initiative as int

	private _BackAttack as int

	private _SideAttack as int

	private _PincerAttack as int

	private _GridPosition as int

	private _GridValue1 as int

	private _GridValue2 as int

	private _GridValue3 as int

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMTerrain)
		else:
			_Name = LCFString('')
		if current == 2:
			_Damage = LCFInt(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMTerrain)
		else:
			_Damage = LCFInt(0)
		if current == 3:
			_EncounterMultiplier = LCFInt(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMTerrain)
		else:
			_EncounterMultiplier = LCFInt(100)
		if current == 4:
			_BattleBG = LCFString(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMTerrain)
		else:
			_BattleBG = LCFString('')
		if current == 5:
			_BoatPass = LCFBool(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMTerrain)
		else:
			_BoatPass = LCFBool(false)
		if current == 6:
			_ShipPass = LCFBool(input)
			current = BERInt(input)
		elif (current < 6) and (current > 0):
			raise LCFUnexpectedSection(current, 6, RMTerrain)
		else:
			_ShipPass = LCFBool(false)
		if current == 7:
			_AirshipPass = LCFBool(input)
			current = BERInt(input)
		elif (current < 7) and (current > 0):
			raise LCFUnexpectedSection(current, 7, RMTerrain)
		else:
			_AirshipPass = LCFBool(true)
		if current == 9:
			_AirshipLanding = LCFBool(input)
			current = BERInt(input)
		elif (current < 9) and (current > 0):
			raise LCFUnexpectedSection(current, 9, RMTerrain)
		else:
			_AirshipLanding = LCFBool(true)
		if current == 11:
			_Concealment = LCFInt(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMTerrain)
		if current == 15:
			BERInt(input)
			_SoundEffect = RMMusic(input)
			current = BERInt(input)
		elif (current < 15) and (current > 0):
			raise LCFUnexpectedSection(current, 15, RMTerrain)
		if current == 16:
			_DamageSound = LCFBool(input)
			current = BERInt(input)
		elif (current < 16) and (current > 0):
			raise LCFUnexpectedSection(current, 16, RMTerrain)
		else:
			_DamageSound = LCFBool(false)
		if current == 17:
			_BGAssociation = LCFInt(input)
			current = BERInt(input)
		elif (current < 17) and (current > 0):
			raise LCFUnexpectedSection(current, 17, RMTerrain)
		else:
			_BGAssociation = LCFInt(0)
		if current == 21:
			_Frame1 = LCFString(input)
			current = BERInt(input)
		elif (current < 21) and (current > 0):
			raise LCFUnexpectedSection(current, 21, RMTerrain)
		else:
			_Frame1 = LCFString('')
		if current == 22:
			_Frame1ScrollX = LCFBool(input)
			current = BERInt(input)
		elif (current < 22) and (current > 0):
			raise LCFUnexpectedSection(current, 22, RMTerrain)
		else:
			_Frame1ScrollX = LCFBool(false)
		if current == 23:
			_Frame1ScrollY = LCFBool(input)
			current = BERInt(input)
		elif (current < 23) and (current > 0):
			raise LCFUnexpectedSection(current, 23, RMTerrain)
		else:
			_Frame1ScrollY = LCFBool(false)
		if current == 24:
			_Frame1ScrollXSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 24) and (current > 0):
			raise LCFUnexpectedSection(current, 24, RMTerrain)
		else:
			_Frame1ScrollXSpeed = LCFInt(0)
		if current == 25:
			_Frame1ScrollYSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 25) and (current > 0):
			raise LCFUnexpectedSection(current, 25, RMTerrain)
		else:
			_Frame1ScrollYSpeed = LCFInt(0)
		if current == 30:
			_UseFrame2 = LCFBool(input)
			current = BERInt(input)
		elif (current < 30) and (current > 0):
			raise LCFUnexpectedSection(current, 30, RMTerrain)
		else:
			_UseFrame2 = LCFBool(false)
		if current == 31:
			_Frame2 = LCFString(input)
			current = BERInt(input)
		elif (current < 31) and (current > 0):
			raise LCFUnexpectedSection(current, 31, RMTerrain)
		else:
			_Frame2 = LCFString('')
		if current == 32:
			_Frame2ScrollX = LCFBool(input)
			current = BERInt(input)
		elif (current < 32) and (current > 0):
			raise LCFUnexpectedSection(current, 32, RMTerrain)
		else:
			_Frame2ScrollX = LCFBool(false)
		if current == 33:
			_Frame2ScrollY = LCFBool(input)
			current = BERInt(input)
		elif (current < 33) and (current > 0):
			raise LCFUnexpectedSection(current, 33, RMTerrain)
		else:
			_Frame2ScrollY = LCFBool(false)
		if current == 34:
			_Frame2ScrollXSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 34) and (current > 0):
			raise LCFUnexpectedSection(current, 34, RMTerrain)
		else:
			_Frame2ScrollXSpeed = LCFInt(0)
		if current == 35:
			_Frame2ScrollYSpeed = LCFInt(input)
			current = BERInt(input)
		elif (current < 35) and (current > 0):
			raise LCFUnexpectedSection(current, 35, RMTerrain)
		else:
			_Frame2ScrollYSpeed = LCFInt(0)
		if current == 40:
			_SpecialFlags = LCFInt(input)
			current = BERInt(input)
		elif (current < 40) and (current > 0):
			raise LCFUnexpectedSection(current, 40, RMTerrain)
		else:
			_SpecialFlags = LCFInt(0)
		if current == 41:
			_Initiative = LCFInt(input)
			current = BERInt(input)
		elif (current < 41) and (current > 0):
			raise LCFUnexpectedSection(current, 41, RMTerrain)
		else:
			_Initiative = LCFInt(15)
		if current == 42:
			_BackAttack = LCFInt(input)
			current = BERInt(input)
		elif (current < 42) and (current > 0):
			raise LCFUnexpectedSection(current, 42, RMTerrain)
		else:
			_BackAttack = LCFInt(10)
		if current == 43:
			_SideAttack = LCFInt(input)
			current = BERInt(input)
		elif (current < 43) and (current > 0):
			raise LCFUnexpectedSection(current, 43, RMTerrain)
		else:
			_SideAttack = LCFInt(10)
		if current == 44:
			_PincerAttack = LCFInt(input)
			current = BERInt(input)
		elif (current < 44) and (current > 0):
			raise LCFUnexpectedSection(current, 44, RMTerrain)
		else:
			_PincerAttack = LCFInt(5)
		if current == 45:
			_GridPosition = LCFInt(input)
			current = BERInt(input)
		elif (current < 45) and (current > 0):
			raise LCFUnexpectedSection(current, 45, RMTerrain)
		else:
			_GridPosition = LCFInt(0)
		if current == 46:
			_GridValue1 = LCFInt(input)
			current = BERInt(input)
		elif (current < 46) and (current > 0):
			raise LCFUnexpectedSection(current, 46, RMTerrain)
		else:
			_GridValue1 = LCFInt(0)
		if current == 47:
			_GridValue2 = LCFInt(input)
			current = BERInt(input)
		elif (current < 47) and (current > 0):
			raise LCFUnexpectedSection(current, 47, RMTerrain)
		else:
			_GridValue2 = LCFInt(0)
		if current == 48:
			_GridValue3 = LCFInt(input)
			current = BERInt(input)
		elif (current < 48) and (current > 0):
			raise LCFUnexpectedSection(current, 48, RMTerrain)
		else:
			_GridValue3 = LCFInt(0)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		unless _Name == '':
			WriteBERInt(output, 1)
			WriteValue(output, _Name)
		unless _Damage == 0:
			WriteBERInt(output, 2)
			WriteValue(output, _Damage)
		unless _EncounterMultiplier == 100:
			WriteBERInt(output, 3)
			WriteValue(output, _EncounterMultiplier)
		unless _BattleBG == '':
			WriteBERInt(output, 4)
			WriteValue(output, _BattleBG)
		unless _BoatPass == false:
			WriteBERInt(output, 5)
			WriteValue(output, _BoatPass)
		unless _ShipPass == false:
			WriteBERInt(output, 6)
			WriteValue(output, _ShipPass)
		unless _AirshipPass == true:
			WriteBERInt(output, 7)
			WriteValue(output, _AirshipPass)
		unless _AirshipLanding == true:
			WriteBERInt(output, 9)
			WriteValue(output, _AirshipLanding)
		WriteBERInt(output, 11)
		WriteValue(output, _Concealment)
		WriteBERInt(output, 15)
		WriteValue(output, _SoundEffect)
		unless _DamageSound == false:
			WriteBERInt(output, 16)
			WriteValue(output, _DamageSound)
		unless _BGAssociation == 0:
			WriteBERInt(output, 17)
			WriteValue(output, _BGAssociation)
		unless _Frame1 == '':
			WriteBERInt(output, 21)
			WriteValue(output, _Frame1)
		unless _Frame1ScrollX == false:
			WriteBERInt(output, 22)
			WriteValue(output, _Frame1ScrollX)
		unless _Frame1ScrollY == false:
			WriteBERInt(output, 23)
			WriteValue(output, _Frame1ScrollY)
		unless _Frame1ScrollXSpeed == 0:
			WriteBERInt(output, 24)
			WriteValue(output, _Frame1ScrollXSpeed)
		unless _Frame1ScrollYSpeed == 0:
			WriteBERInt(output, 25)
			WriteValue(output, _Frame1ScrollYSpeed)
		unless _UseFrame2 == false:
			WriteBERInt(output, 30)
			WriteValue(output, _UseFrame2)
		unless _Frame2 == '':
			WriteBERInt(output, 31)
			WriteValue(output, _Frame2)
		unless _Frame2ScrollX == false:
			WriteBERInt(output, 32)
			WriteValue(output, _Frame2ScrollX)
		unless _Frame2ScrollY == false:
			WriteBERInt(output, 33)
			WriteValue(output, _Frame2ScrollY)
		unless _Frame2ScrollXSpeed == 0:
			WriteBERInt(output, 34)
			WriteValue(output, _Frame2ScrollXSpeed)
		unless _Frame2ScrollYSpeed == 0:
			WriteBERInt(output, 35)
			WriteValue(output, _Frame2ScrollYSpeed)
		unless _SpecialFlags == 0:
			WriteBERInt(output, 40)
			WriteValue(output, _SpecialFlags)
		unless _Initiative == 15:
			WriteBERInt(output, 41)
			WriteValue(output, _Initiative)
		unless _BackAttack == 10:
			WriteBERInt(output, 42)
			WriteValue(output, _BackAttack)
		unless _SideAttack == 10:
			WriteBERInt(output, 43)
			WriteValue(output, _SideAttack)
		unless _PincerAttack == 5:
			WriteBERInt(output, 44)
			WriteValue(output, _PincerAttack)
		unless _GridPosition == 0:
			WriteBERInt(output, 45)
			WriteValue(output, _GridPosition)
		unless _GridValue1 == 0:
			WriteBERInt(output, 46)
			WriteValue(output, _GridValue1)
		unless _GridValue2 == 0:
			WriteBERInt(output, 47)
			WriteValue(output, _GridValue2)
		unless _GridValue3 == 0:
			WriteBERInt(output, 48)
			WriteValue(output, _GridValue3)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Damage as int:
		get:
			return _Damage
		set:
			self._Damage = value

	public EncounterMultiplier as int:
		get:
			return _EncounterMultiplier
		set:
			self._EncounterMultiplier = value

	public BattleBG as string:
		get:
			return _BattleBG
		set:
			self._BattleBG = value

	public BoatPass as bool:
		get:
			return _BoatPass
		set:
			self._BoatPass = value

	public ShipPass as bool:
		get:
			return _ShipPass
		set:
			self._ShipPass = value

	public AirshipPass as bool:
		get:
			return _AirshipPass
		set:
			self._AirshipPass = value

	public AirshipLanding as bool:
		get:
			return _AirshipLanding
		set:
			self._AirshipLanding = value

	public Concealment as int:
		get:
			return _Concealment
		set:
			self._Concealment = value

	public SoundEffect as RMMusic:
		get:
			return _SoundEffect
		set:
			self._SoundEffect = value

	public DamageSound as bool:
		get:
			return _DamageSound
		set:
			self._DamageSound = value

	public BGAssociation as int:
		get:
			return _BGAssociation
		set:
			self._BGAssociation = value

	public Frame1 as string:
		get:
			return _Frame1
		set:
			self._Frame1 = value

	public Frame1ScrollX as bool:
		get:
			return _Frame1ScrollX
		set:
			self._Frame1ScrollX = value

	public Frame1ScrollY as bool:
		get:
			return _Frame1ScrollY
		set:
			self._Frame1ScrollY = value

	public Frame1ScrollXSpeed as int:
		get:
			return _Frame1ScrollXSpeed
		set:
			self._Frame1ScrollXSpeed = value

	public Frame1ScrollYSpeed as int:
		get:
			return _Frame1ScrollYSpeed
		set:
			self._Frame1ScrollYSpeed = value

	public UseFrame2 as bool:
		get:
			return _UseFrame2
		set:
			self._UseFrame2 = value

	public Frame2 as string:
		get:
			return _Frame2
		set:
			self._Frame2 = value

	public Frame2ScrollX as bool:
		get:
			return _Frame2ScrollX
		set:
			self._Frame2ScrollX = value

	public Frame2ScrollY as bool:
		get:
			return _Frame2ScrollY
		set:
			self._Frame2ScrollY = value

	public Frame2ScrollXSpeed as int:
		get:
			return _Frame2ScrollXSpeed
		set:
			self._Frame2ScrollXSpeed = value

	public Frame2ScrollYSpeed as int:
		get:
			return _Frame2ScrollYSpeed
		set:
			self._Frame2ScrollYSpeed = value

	public SpecialFlags as int:
		get:
			return _SpecialFlags
		set:
			self._SpecialFlags = value

	public Initiative as int:
		get:
			return _Initiative
		set:
			self._Initiative = value

	public BackAttack as int:
		get:
			return _BackAttack
		set:
			self._BackAttack = value

	public SideAttack as int:
		get:
			return _SideAttack
		set:
			self._SideAttack = value

	public PincerAttack as int:
		get:
			return _PincerAttack
		set:
			self._PincerAttack = value

	public GridPosition as int:
		get:
			return _GridPosition
		set:
			self._GridPosition = value

	public GridValue1 as int:
		get:
			return _GridValue1
		set:
			self._GridValue1 = value

	public GridValue2 as int:
		get:
			return _GridValue2
		set:
			self._GridValue2 = value

	public GridValue3 as int:
		get:
			return _GridValue3
		set:
			self._GridValue3 = value

namespace TURBU.RM2K.Import.LCF

import System
import TURBU.RM2K.Import.LCF

class RMTileset(ILCFObject):

	private final _ID as int

	private _Name as string

	private _Filename as string

	private _Terrain as LCFUshortArray

	private _BlockData as LCFByteArray

	private _UBlockData as LCFByteArray

	private _Animation as bool

	private _HighSpeed as bool

	public def constructor(input as System.IO.Stream):
		_ID = BERInt(input)
		current = BERInt(input)
		if current == 1:
			_Name = LCFString(input)
			current = BERInt(input)
		elif (current < 1) and (current > 0):
			raise LCFUnexpectedSection(current, 1, RMTileset)
		if current == 2:
			_Filename = LCFString(input)
			current = BERInt(input)
		elif (current < 2) and (current > 0):
			raise LCFUnexpectedSection(current, 2, RMTileset)
		if current == 3:
			_Terrain = LCFUshortArray(input)
			current = BERInt(input)
		elif (current < 3) and (current > 0):
			raise LCFUnexpectedSection(current, 3, RMTileset)
		if current == 4:
			_BlockData = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 4) and (current > 0):
			raise LCFUnexpectedSection(current, 4, RMTileset)
		if current == 5:
			_UBlockData = LCFByteArray(input)
			current = BERInt(input)
		elif (current < 5) and (current > 0):
			raise LCFUnexpectedSection(current, 5, RMTileset)
		if current == 11:
			_Animation = LCFBool(input)
			current = BERInt(input)
		elif (current < 11) and (current > 0):
			raise LCFUnexpectedSection(current, 11, RMTileset)
		else:
			_Animation = LCFBool(false)
		if current == 12:
			_HighSpeed = LCFBool(input)
			current = BERInt(input)
		elif (current < 12) and (current > 0):
			raise LCFUnexpectedSection(current, 12, RMTileset)
		else:
			_HighSpeed = LCFBool(false)
		unless current == 0:
			raise Boo.Lang.Runtime.AssertionFailedException("Ending 0 not found at offset $(input.Position.ToString('X'))")

	public def Save(output as System.IO.Stream):
		WriteBERInt(output, _ID)
		WriteBERInt(output, 1)
		WriteValue(output, _Name)
		WriteBERInt(output, 2)
		WriteValue(output, _Filename)
		unless _Terrain == null:
			WriteBERInt(output, 3)
			WriteValue(output, _Terrain)
		unless _BlockData == null:
			WriteBERInt(output, 4)
			WriteValue(output, _BlockData)
		unless _UBlockData == null:
			WriteBERInt(output, 5)
			WriteValue(output, _UBlockData)
		unless _Animation == false:
			WriteBERInt(output, 11)
			WriteValue(output, _Animation)
		unless _HighSpeed == false:
			WriteBERInt(output, 12)
			WriteValue(output, _HighSpeed)
		output.WriteByte(0)

	public ID as int:
		get:
			return _ID

	public Name as string:
		get:
			return _Name
		set:
			self._Name = value

	public Filename as string:
		get:
			return _Filename
		set:
			self._Filename = value

	public Terrain as LCFUshortArray:
		get:
			return _Terrain
		set:
			self._Terrain = value

	public BlockData as LCFByteArray:
		get:
			return _BlockData
		set:
			self._BlockData = value

	public UBlockData as LCFByteArray:
		get:
			return _UBlockData
		set:
			self._UBlockData = value

	public Animation as bool:
		get:
			return _Animation
		set:
			self._Animation = value

	public HighSpeed as bool:
		get:
			return _HighSpeed
		set:
			self._HighSpeed = value

